
RTOS-LCD-maxTouch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007840  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407840  00407840  00017840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00407848  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000beec  204009c0  00408208  000209c0  2**2
                  ALLOC
  4 .stack        00002004  2040c8ac  004140f4  000209c0  2**0
                  ALLOC
  5 .heap         00000200  2040e8b0  004160f8  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002d3a9  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005bd1  00000000  00000000  0004ddf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000012c8  00000000  00000000  000539c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002791a  00000000  00000000  00054c89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017c7d  00000000  00000000  0007c5a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009f19c  00000000  00000000  00094220  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000dbaa  00000000  00000000  001333bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001560  00000000  00000000  00140f66  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003bbc  00000000  00000000  001424c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	b0 e8 40 20 45 1f 40 00 43 1f 40 00 43 1f 40 00     ..@ E.@.C.@.C.@.
  400010:	43 1f 40 00 43 1f 40 00 43 1f 40 00 00 00 00 00     C.@.C.@.C.@.....
	...
  40002c:	1d 23 40 00 43 1f 40 00 00 00 00 00 bd 23 40 00     .#@.C.@......#@.
  40003c:	25 24 40 00 43 1f 40 00 43 1f 40 00 43 1f 40 00     %$@.C.@.C.@.C.@.
  40004c:	43 1f 40 00 43 1f 40 00 43 1f 40 00 43 1f 40 00     C.@.C.@.C.@.C.@.
  40005c:	43 1f 40 00 43 1f 40 00 00 00 00 00 bd 18 40 00     C.@.C.@.......@.
  40006c:	d1 18 40 00 e5 18 40 00 43 1f 40 00 43 1f 40 00     ..@...@.C.@.C.@.
  40007c:	43 1f 40 00 f9 18 40 00 0d 19 40 00 43 1f 40 00     C.@...@...@.C.@.
  40008c:	43 1f 40 00 43 1f 40 00 43 1f 40 00 43 1f 40 00     C.@.C.@.C.@.C.@.
  40009c:	43 1f 40 00 43 1f 40 00 43 1f 40 00 43 1f 40 00     C.@.C.@.C.@.C.@.
  4000ac:	43 1f 40 00 43 1f 40 00 49 04 40 00 43 1f 40 00     C.@.C.@.I.@.C.@.
  4000bc:	43 1f 40 00 43 1f 40 00 43 1f 40 00 43 1f 40 00     C.@.C.@.C.@.C.@.
  4000cc:	43 1f 40 00 43 1f 40 00 43 1f 40 00 43 1f 40 00     C.@.C.@.C.@.C.@.
  4000dc:	43 1f 40 00 5d 04 40 00 43 1f 40 00 43 1f 40 00     C.@.].@.C.@.C.@.
  4000ec:	43 1f 40 00 43 1f 40 00 43 1f 40 00 43 1f 40 00     C.@.C.@.C.@.C.@.
  4000fc:	43 1f 40 00 43 1f 40 00 43 1f 40 00 43 1f 40 00     C.@.C.@.C.@.C.@.
  40010c:	43 1f 40 00 43 1f 40 00 00 00 00 00 00 00 00 00     C.@.C.@.........
  40011c:	00 00 00 00 43 1f 40 00 43 1f 40 00 43 1f 40 00     ....C.@.C.@.C.@.
  40012c:	43 1f 40 00 43 1f 40 00 43 1f 40 00 43 1f 40 00     C.@.C.@.C.@.C.@.
  40013c:	43 1f 40 00 43 1f 40 00 43 1f 40 00 43 1f 40 00     C.@.C.@.C.@.C.@.
  40014c:	43 1f 40 00 43 1f 40 00 43 1f 40 00 43 1f 40 00     C.@.C.@.C.@.C.@.
  40015c:	43 1f 40 00 43 1f 40 00 43 1f 40 00                 C.@.C.@.C.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	00407848 	.word	0x00407848

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00407848 	.word	0x00407848
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	00407848 	.word	0x00407848
  4001d0:	00000000 	.word	0x00000000

004001d4 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001d4:	b570      	push	{r4, r5, r6, lr}
  4001d6:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001d8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001dc:	4013      	ands	r3, r2
  4001de:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001e0:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4001e2:	4e1c      	ldr	r6, [pc, #112]	; (400254 <afec_process_callback+0x80>)
  4001e4:	4d1c      	ldr	r5, [pc, #112]	; (400258 <afec_process_callback+0x84>)
  4001e6:	42a8      	cmp	r0, r5
  4001e8:	bf14      	ite	ne
  4001ea:	2000      	movne	r0, #0
  4001ec:	2001      	moveq	r0, #1
  4001ee:	0105      	lsls	r5, r0, #4
  4001f0:	e00b      	b.n	40020a <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4001f2:	2c0e      	cmp	r4, #14
  4001f4:	d81e      	bhi.n	400234 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4001f6:	9a01      	ldr	r2, [sp, #4]
  4001f8:	f104 010c 	add.w	r1, r4, #12
  4001fc:	2301      	movs	r3, #1
  4001fe:	408b      	lsls	r3, r1
  400200:	4213      	tst	r3, r2
  400202:	d110      	bne.n	400226 <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400204:	3401      	adds	r4, #1
  400206:	2c10      	cmp	r4, #16
  400208:	d022      	beq.n	400250 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40020a:	2c0b      	cmp	r4, #11
  40020c:	d8f1      	bhi.n	4001f2 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  40020e:	9a01      	ldr	r2, [sp, #4]
  400210:	2301      	movs	r3, #1
  400212:	40a3      	lsls	r3, r4
  400214:	4213      	tst	r3, r2
  400216:	d0f5      	beq.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400218:	192b      	adds	r3, r5, r4
  40021a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40021e:	2b00      	cmp	r3, #0
  400220:	d0f0      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400222:	4798      	blx	r3
  400224:	e7ee      	b.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400226:	192b      	adds	r3, r5, r4
  400228:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40022c:	2b00      	cmp	r3, #0
  40022e:	d0e9      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400230:	4798      	blx	r3
  400232:	e7e7      	b.n	400204 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400234:	9a01      	ldr	r2, [sp, #4]
  400236:	f104 010f 	add.w	r1, r4, #15
  40023a:	2301      	movs	r3, #1
  40023c:	408b      	lsls	r3, r1
  40023e:	4213      	tst	r3, r2
  400240:	d0e0      	beq.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400242:	192b      	adds	r3, r5, r4
  400244:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400248:	2b00      	cmp	r3, #0
  40024a:	d0db      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40024c:	4798      	blx	r3
  40024e:	e7d9      	b.n	400204 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400250:	b002      	add	sp, #8
  400252:	bd70      	pop	{r4, r5, r6, pc}
  400254:	2040c79c 	.word	0x2040c79c
  400258:	40064000 	.word	0x40064000

0040025c <afec_ch_set_config>:
{
  40025c:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  40025e:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400260:	2301      	movs	r3, #1
  400262:	408b      	lsls	r3, r1
  400264:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400268:	7815      	ldrb	r5, [r2, #0]
  40026a:	2d00      	cmp	r5, #0
  40026c:	bf08      	it	eq
  40026e:	2300      	moveq	r3, #0
  400270:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  400272:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  400274:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  400276:	004b      	lsls	r3, r1, #1
  400278:	2103      	movs	r1, #3
  40027a:	4099      	lsls	r1, r3
  40027c:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400280:	7851      	ldrb	r1, [r2, #1]
  400282:	4099      	lsls	r1, r3
  400284:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  400286:	6541      	str	r1, [r0, #84]	; 0x54
}
  400288:	bc30      	pop	{r4, r5}
  40028a:	4770      	bx	lr

0040028c <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  40028c:	784b      	ldrb	r3, [r1, #1]
  40028e:	780a      	ldrb	r2, [r1, #0]
  400290:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  400292:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  400294:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  400296:	884b      	ldrh	r3, [r1, #2]
  400298:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40029c:	6743      	str	r3, [r0, #116]	; 0x74
  40029e:	4770      	bx	lr

004002a0 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  4002a0:	2200      	movs	r2, #0
  4002a2:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  4002a4:	4b08      	ldr	r3, [pc, #32]	; (4002c8 <afec_get_config_defaults+0x28>)
  4002a6:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  4002a8:	4b08      	ldr	r3, [pc, #32]	; (4002cc <afec_get_config_defaults+0x2c>)
  4002aa:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  4002ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4002b0:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  4002b2:	2302      	movs	r3, #2
  4002b4:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  4002b6:	2301      	movs	r3, #1
  4002b8:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  4002ba:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  4002bc:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  4002be:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  4002c0:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  4002c2:	7583      	strb	r3, [r0, #22]
  4002c4:	4770      	bx	lr
  4002c6:	bf00      	nop
  4002c8:	11e1a300 	.word	0x11e1a300
  4002cc:	005b8d80 	.word	0x005b8d80

004002d0 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  4002d0:	2300      	movs	r3, #0
  4002d2:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  4002d4:	2301      	movs	r3, #1
  4002d6:	7043      	strb	r3, [r0, #1]
  4002d8:	4770      	bx	lr

004002da <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  4002da:	2300      	movs	r3, #0
  4002dc:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  4002de:	2320      	movs	r3, #32
  4002e0:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  4002e2:	23ff      	movs	r3, #255	; 0xff
  4002e4:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  4002e6:	f640 73ff 	movw	r3, #4095	; 0xfff
  4002ea:	8083      	strh	r3, [r0, #4]
  4002ec:	4770      	bx	lr
	...

004002f0 <afec_init>:
	return afec->AFEC_ISR;
  4002f0:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  4002f2:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  4002f6:	d001      	beq.n	4002fc <afec_init+0xc>
		return STATUS_ERR_BUSY;
  4002f8:	2019      	movs	r0, #25
  4002fa:	4770      	bx	lr
{
  4002fc:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  4002fe:	2301      	movs	r3, #1
  400300:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400302:	7ccb      	ldrb	r3, [r1, #19]
  400304:	2b00      	cmp	r3, #0
  400306:	bf18      	it	ne
  400308:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  40030c:	684b      	ldr	r3, [r1, #4]
  40030e:	688c      	ldr	r4, [r1, #8]
  400310:	fbb3 f3f4 	udiv	r3, r3, r4
  400314:	3b01      	subs	r3, #1
  400316:	021b      	lsls	r3, r3, #8
  400318:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40031a:	68cc      	ldr	r4, [r1, #12]
  40031c:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  400320:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  400322:	7c0c      	ldrb	r4, [r1, #16]
  400324:	0624      	lsls	r4, r4, #24
  400326:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40032a:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  40032c:	7c4c      	ldrb	r4, [r1, #17]
  40032e:	0724      	lsls	r4, r4, #28
  400330:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400334:	4323      	orrs	r3, r4
  400336:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  400338:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40033a:	7d0b      	ldrb	r3, [r1, #20]
  40033c:	2b00      	cmp	r3, #0
  40033e:	bf14      	ite	ne
  400340:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  400344:	2300      	moveq	r3, #0
  400346:	680a      	ldr	r2, [r1, #0]
  400348:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  40034a:	7d4a      	ldrb	r2, [r1, #21]
  40034c:	2a00      	cmp	r2, #0
  40034e:	bf14      	ite	ne
  400350:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  400354:	2200      	moveq	r2, #0
			(config->resolution) |
  400356:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400358:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  40035a:	7d8b      	ldrb	r3, [r1, #22]
  40035c:	021b      	lsls	r3, r3, #8
  40035e:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400362:	f043 030c 	orr.w	r3, r3, #12
  400366:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  40036a:	4b0f      	ldr	r3, [pc, #60]	; (4003a8 <afec_init+0xb8>)
  40036c:	4298      	cmp	r0, r3
  40036e:	d006      	beq.n	40037e <afec_init+0x8e>
	if(afec == AFEC1) {
  400370:	4b0e      	ldr	r3, [pc, #56]	; (4003ac <afec_init+0xbc>)
  400372:	4298      	cmp	r0, r3
  400374:	d00d      	beq.n	400392 <afec_init+0xa2>
	return STATUS_OK;
  400376:	2000      	movs	r0, #0
}
  400378:	f85d 4b04 	ldr.w	r4, [sp], #4
  40037c:	4770      	bx	lr
  40037e:	4b0c      	ldr	r3, [pc, #48]	; (4003b0 <afec_init+0xc0>)
  400380:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  400384:	2200      	movs	r2, #0
  400386:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40038a:	428b      	cmp	r3, r1
  40038c:	d1fb      	bne.n	400386 <afec_init+0x96>
	return STATUS_OK;
  40038e:	2000      	movs	r0, #0
  400390:	e7f2      	b.n	400378 <afec_init+0x88>
  400392:	4b08      	ldr	r3, [pc, #32]	; (4003b4 <afec_init+0xc4>)
  400394:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  400398:	2200      	movs	r2, #0
  40039a:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40039e:	428b      	cmp	r3, r1
  4003a0:	d1fb      	bne.n	40039a <afec_init+0xaa>
	return STATUS_OK;
  4003a2:	2000      	movs	r0, #0
  4003a4:	e7e8      	b.n	400378 <afec_init+0x88>
  4003a6:	bf00      	nop
  4003a8:	4003c000 	.word	0x4003c000
  4003ac:	40064000 	.word	0x40064000
  4003b0:	2040c798 	.word	0x2040c798
  4003b4:	2040c7dc 	.word	0x2040c7dc

004003b8 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  4003b8:	4b0c      	ldr	r3, [pc, #48]	; (4003ec <afec_enable_interrupt+0x34>)
  4003ba:	4299      	cmp	r1, r3
  4003bc:	d007      	beq.n	4003ce <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  4003be:	290b      	cmp	r1, #11
  4003c0:	d80b      	bhi.n	4003da <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  4003c2:	d006      	beq.n	4003d2 <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  4003c4:	2301      	movs	r3, #1
  4003c6:	fa03 f101 	lsl.w	r1, r3, r1
  4003ca:	6241      	str	r1, [r0, #36]	; 0x24
  4003cc:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  4003ce:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  4003d0:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  4003d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4003d6:	6243      	str	r3, [r0, #36]	; 0x24
  4003d8:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  4003da:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  4003dc:	bf94      	ite	ls
  4003de:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  4003e0:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  4003e2:	2301      	movs	r3, #1
  4003e4:	fa03 f101 	lsl.w	r1, r3, r1
  4003e8:	6241      	str	r1, [r0, #36]	; 0x24
  4003ea:	4770      	bx	lr
  4003ec:	47000fff 	.word	0x47000fff

004003f0 <afec_set_callback>:
{
  4003f0:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  4003f2:	4c11      	ldr	r4, [pc, #68]	; (400438 <afec_set_callback+0x48>)
  4003f4:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  4003f6:	bf0c      	ite	eq
  4003f8:	2410      	moveq	r4, #16
  4003fa:	2400      	movne	r4, #0
  4003fc:	440c      	add	r4, r1
  4003fe:	4d0f      	ldr	r5, [pc, #60]	; (40043c <afec_set_callback+0x4c>)
  400400:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  400404:	d10a      	bne.n	40041c <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400406:	4a0e      	ldr	r2, [pc, #56]	; (400440 <afec_set_callback+0x50>)
  400408:	f44f 7480 	mov.w	r4, #256	; 0x100
  40040c:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400410:	015b      	lsls	r3, r3, #5
  400412:	b2db      	uxtb	r3, r3
  400414:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400418:	6054      	str	r4, [r2, #4]
  40041a:	e009      	b.n	400430 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40041c:	4a08      	ldr	r2, [pc, #32]	; (400440 <afec_set_callback+0x50>)
  40041e:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  400422:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400426:	015b      	lsls	r3, r3, #5
  400428:	b2db      	uxtb	r3, r3
  40042a:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40042e:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400430:	4b04      	ldr	r3, [pc, #16]	; (400444 <afec_set_callback+0x54>)
  400432:	4798      	blx	r3
  400434:	bd38      	pop	{r3, r4, r5, pc}
  400436:	bf00      	nop
  400438:	40064000 	.word	0x40064000
  40043c:	2040c79c 	.word	0x2040c79c
  400440:	e000e100 	.word	0xe000e100
  400444:	004003b9 	.word	0x004003b9

00400448 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400448:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40044a:	4802      	ldr	r0, [pc, #8]	; (400454 <AFEC0_Handler+0xc>)
  40044c:	4b02      	ldr	r3, [pc, #8]	; (400458 <AFEC0_Handler+0x10>)
  40044e:	4798      	blx	r3
  400450:	bd08      	pop	{r3, pc}
  400452:	bf00      	nop
  400454:	4003c000 	.word	0x4003c000
  400458:	004001d5 	.word	0x004001d5

0040045c <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  40045c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  40045e:	4802      	ldr	r0, [pc, #8]	; (400468 <AFEC1_Handler+0xc>)
  400460:	4b02      	ldr	r3, [pc, #8]	; (40046c <AFEC1_Handler+0x10>)
  400462:	4798      	blx	r3
  400464:	bd08      	pop	{r3, pc}
  400466:	bf00      	nop
  400468:	40064000 	.word	0x40064000
  40046c:	004001d5 	.word	0x004001d5

00400470 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400470:	b500      	push	{lr}
  400472:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400474:	4b13      	ldr	r3, [pc, #76]	; (4004c4 <afec_enable+0x54>)
  400476:	4298      	cmp	r0, r3
  400478:	bf0c      	ite	eq
  40047a:	2028      	moveq	r0, #40	; 0x28
  40047c:	201d      	movne	r0, #29
  40047e:	4b12      	ldr	r3, [pc, #72]	; (4004c8 <afec_enable+0x58>)
  400480:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400482:	4b12      	ldr	r3, [pc, #72]	; (4004cc <afec_enable+0x5c>)
  400484:	789b      	ldrb	r3, [r3, #2]
  400486:	2bff      	cmp	r3, #255	; 0xff
  400488:	d01a      	beq.n	4004c0 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40048a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40048e:	fab3 f383 	clz	r3, r3
  400492:	095b      	lsrs	r3, r3, #5
  400494:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400496:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400498:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40049c:	2200      	movs	r2, #0
  40049e:	4b0c      	ldr	r3, [pc, #48]	; (4004d0 <afec_enable+0x60>)
  4004a0:	701a      	strb	r2, [r3, #0]
	return flags;
  4004a2:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4004a4:	4a09      	ldr	r2, [pc, #36]	; (4004cc <afec_enable+0x5c>)
  4004a6:	7893      	ldrb	r3, [r2, #2]
  4004a8:	3301      	adds	r3, #1
  4004aa:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4004ac:	b129      	cbz	r1, 4004ba <afec_enable+0x4a>
		cpu_irq_enable();
  4004ae:	2201      	movs	r2, #1
  4004b0:	4b07      	ldr	r3, [pc, #28]	; (4004d0 <afec_enable+0x60>)
  4004b2:	701a      	strb	r2, [r3, #0]
  4004b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4004b8:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4004ba:	b003      	add	sp, #12
  4004bc:	f85d fb04 	ldr.w	pc, [sp], #4
  4004c0:	e7fe      	b.n	4004c0 <afec_enable+0x50>
  4004c2:	bf00      	nop
  4004c4:	40064000 	.word	0x40064000
  4004c8:	00401a41 	.word	0x00401a41
  4004cc:	2040c794 	.word	0x2040c794
  4004d0:	2040000a 	.word	0x2040000a

004004d4 <mxt_init>:
* to the maXTouch Xplained Pro.
*
* \param device Pointer to mxt_device struct
*/
void mxt_init(struct mxt_device *device)
{
  4004d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4004d8:	b09c      	sub	sp, #112	; 0x70
  4004da:	4604      	mov	r4, r0
  enum status_code status;

  /* T8 configuration object data */
  uint8_t t8_object[] = {
  4004dc:	4d48      	ldr	r5, [pc, #288]	; (400600 <mxt_init+0x12c>)
  4004de:	ab19      	add	r3, sp, #100	; 0x64
  4004e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4004e4:	c303      	stmia	r3!, {r0, r1}
  4004e6:	801a      	strh	r2, [r3, #0]
    0x0d, 0x00, 0x05, 0x0a, 0x4b, 0x00, 0x00,
    0x00, 0x32, 0x19
  };

  /* T9 configuration object data */
  uint8_t t9_object[] = {
  4004e8:	ae10      	add	r6, sp, #64	; 0x40
  4004ea:	f105 070c 	add.w	r7, r5, #12
  4004ee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  4004f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4004f2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  4004f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4004f6:	683b      	ldr	r3, [r7, #0]
  4004f8:	6033      	str	r3, [r6, #0]
    0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x02,
    0x02
  };

  /* T46 configuration object data */
  uint8_t t46_object[] = {
  4004fa:	ab0d      	add	r3, sp, #52	; 0x34
  4004fc:	f105 0230 	add.w	r2, r5, #48	; 0x30
  400500:	ca07      	ldmia	r2, {r0, r1, r2}
  400502:	c303      	stmia	r3!, {r0, r1}
  400504:	701a      	strb	r2, [r3, #0]
    0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x03,
    0x00, 0x00
  };
  
  /* T56 configuration object data */
  uint8_t t56_object[] = {
  400506:	ae04      	add	r6, sp, #16
  400508:	353c      	adds	r5, #60	; 0x3c
  40050a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40050c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  40050e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400510:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  400512:	682b      	ldr	r3, [r5, #0]
  400514:	7033      	strb	r3, [r6, #0]
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00
  };

  /* TWI configuration */
  twihs_master_options_t twi_opt = {
  400516:	2500      	movs	r5, #0
  400518:	9503      	str	r5, [sp, #12]
  40051a:	4b3a      	ldr	r3, [pc, #232]	; (400604 <mxt_init+0x130>)
  40051c:	9302      	str	r3, [sp, #8]
  40051e:	274a      	movs	r7, #74	; 0x4a
  400520:	f88d 700c 	strb.w	r7, [sp, #12]
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  400524:	4b38      	ldr	r3, [pc, #224]	; (400608 <mxt_init+0x134>)
  400526:	9301      	str	r3, [sp, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400528:	2013      	movs	r0, #19
  40052a:	4b38      	ldr	r3, [pc, #224]	; (40060c <mxt_init+0x138>)
  40052c:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  40052e:	4e38      	ldr	r6, [pc, #224]	; (400610 <mxt_init+0x13c>)
  400530:	a901      	add	r1, sp, #4
  400532:	4630      	mov	r0, r6
  400534:	4b37      	ldr	r3, [pc, #220]	; (400614 <mxt_init+0x140>)
  400536:	4798      	blx	r3

  status = (enum status_code)twihs_master_setup(MAXTOUCH_TWI_INTERFACE, &twi_opt);
  Assert(status == STATUS_OK);

  /* Initialize the maXTouch device */
  status = mxt_init_device(device, MAXTOUCH_TWI_INTERFACE,
  400538:	2302      	movs	r3, #2
  40053a:	463a      	mov	r2, r7
  40053c:	4631      	mov	r1, r6
  40053e:	4620      	mov	r0, r4
  400540:	4e35      	ldr	r6, [pc, #212]	; (400618 <mxt_init+0x144>)
  400542:	47b0      	blx	r6
  MAXTOUCH_TWI_ADDRESS, MAXTOUCH_XPRO_CHG_PIO);
  Assert(status == STATUS_OK);

  /* Issue soft reset of maXTouch device by writing a non-zero value to
  * the reset register */
  mxt_write_config_reg(device, mxt_get_object_address(device,
  400544:	462a      	mov	r2, r5
  400546:	2106      	movs	r1, #6
  400548:	4620      	mov	r0, r4
  40054a:	4e34      	ldr	r6, [pc, #208]	; (40061c <mxt_init+0x148>)
  40054c:	47b0      	blx	r6
  40054e:	2201      	movs	r2, #1
  400550:	4601      	mov	r1, r0
  400552:	4620      	mov	r0, r4
  400554:	4f32      	ldr	r7, [pc, #200]	; (400620 <mxt_init+0x14c>)
  400556:	47b8      	blx	r7
  MXT_GEN_COMMANDPROCESSOR_T6, 0)
  + MXT_GEN_COMMANDPROCESSOR_RESET, 0x01);

  /* Wait for the reset of the device to complete */
  delay_ms(MXT_RESET_TIME);
  400558:	4832      	ldr	r0, [pc, #200]	; (400624 <mxt_init+0x150>)
  40055a:	4b33      	ldr	r3, [pc, #204]	; (400628 <mxt_init+0x154>)
  40055c:	4798      	blx	r3

  /* Write data to configuration registers in T7 configuration object */
  mxt_write_config_reg(device, mxt_get_object_address(device,
  40055e:	462a      	mov	r2, r5
  400560:	2107      	movs	r1, #7
  400562:	4620      	mov	r0, r4
  400564:	47b0      	blx	r6
  400566:	2220      	movs	r2, #32
  400568:	4601      	mov	r1, r0
  40056a:	4620      	mov	r0, r4
  40056c:	47b8      	blx	r7
  MXT_GEN_POWERCONFIG_T7, 0) + 0, 0x20);
  mxt_write_config_reg(device, mxt_get_object_address(device,
  40056e:	462a      	mov	r2, r5
  400570:	2107      	movs	r1, #7
  400572:	4620      	mov	r0, r4
  400574:	47b0      	blx	r6
  400576:	1c41      	adds	r1, r0, #1
  400578:	2210      	movs	r2, #16
  40057a:	b289      	uxth	r1, r1
  40057c:	4620      	mov	r0, r4
  40057e:	47b8      	blx	r7
  MXT_GEN_POWERCONFIG_T7, 0) + 1, 0x10);
  mxt_write_config_reg(device, mxt_get_object_address(device,
  400580:	462a      	mov	r2, r5
  400582:	2107      	movs	r1, #7
  400584:	4620      	mov	r0, r4
  400586:	47b0      	blx	r6
  400588:	1c81      	adds	r1, r0, #2
  40058a:	224b      	movs	r2, #75	; 0x4b
  40058c:	b289      	uxth	r1, r1
  40058e:	4620      	mov	r0, r4
  400590:	47b8      	blx	r7
  MXT_GEN_POWERCONFIG_T7, 0) + 2, 0x4b);
  mxt_write_config_reg(device, mxt_get_object_address(device,
  400592:	462a      	mov	r2, r5
  400594:	2107      	movs	r1, #7
  400596:	4620      	mov	r0, r4
  400598:	47b0      	blx	r6
  40059a:	1cc1      	adds	r1, r0, #3
  40059c:	2284      	movs	r2, #132	; 0x84
  40059e:	b289      	uxth	r1, r1
  4005a0:	4620      	mov	r0, r4
  4005a2:	47b8      	blx	r7
  MXT_GEN_POWERCONFIG_T7, 0) + 3, 0x84);

  /* Write predefined configuration data to configuration objects */
  mxt_write_config_object(device, mxt_get_object_address(device,
  4005a4:	462a      	mov	r2, r5
  4005a6:	2108      	movs	r1, #8
  4005a8:	4620      	mov	r0, r4
  4005aa:	47b0      	blx	r6
  4005ac:	aa19      	add	r2, sp, #100	; 0x64
  4005ae:	4601      	mov	r1, r0
  4005b0:	4620      	mov	r0, r4
  4005b2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 40062c <mxt_init+0x158>
  4005b6:	47c0      	blx	r8
  MXT_GEN_ACQUISITIONCONFIG_T8, 0), &t8_object);
  mxt_write_config_object(device, mxt_get_object_address(device,
  4005b8:	462a      	mov	r2, r5
  4005ba:	2109      	movs	r1, #9
  4005bc:	4620      	mov	r0, r4
  4005be:	47b0      	blx	r6
  4005c0:	aa10      	add	r2, sp, #64	; 0x40
  4005c2:	4601      	mov	r1, r0
  4005c4:	4620      	mov	r0, r4
  4005c6:	47c0      	blx	r8
  MXT_TOUCH_MULTITOUCHSCREEN_T9, 0), &t9_object);
  mxt_write_config_object(device, mxt_get_object_address(device,
  4005c8:	462a      	mov	r2, r5
  4005ca:	212e      	movs	r1, #46	; 0x2e
  4005cc:	4620      	mov	r0, r4
  4005ce:	47b0      	blx	r6
  4005d0:	aa0d      	add	r2, sp, #52	; 0x34
  4005d2:	4601      	mov	r1, r0
  4005d4:	4620      	mov	r0, r4
  4005d6:	47c0      	blx	r8
  MXT_SPT_CTE_CONFIGURATION_T46, 0), &t46_object);
  mxt_write_config_object(device, mxt_get_object_address(device,
  4005d8:	462a      	mov	r2, r5
  4005da:	2138      	movs	r1, #56	; 0x38
  4005dc:	4620      	mov	r0, r4
  4005de:	47b0      	blx	r6
  4005e0:	aa04      	add	r2, sp, #16
  4005e2:	4601      	mov	r1, r0
  4005e4:	4620      	mov	r0, r4
  4005e6:	47c0      	blx	r8
  MXT_PROCI_SHIELDLESS_T56, 0), &t56_object);

  /* Issue recalibration command to maXTouch device by writing a non-zero
  * value to the calibrate register */
  mxt_write_config_reg(device, mxt_get_object_address(device,
  4005e8:	462a      	mov	r2, r5
  4005ea:	2106      	movs	r1, #6
  4005ec:	4620      	mov	r0, r4
  4005ee:	47b0      	blx	r6
  4005f0:	1c81      	adds	r1, r0, #2
  4005f2:	2201      	movs	r2, #1
  4005f4:	b289      	uxth	r1, r1
  4005f6:	4620      	mov	r0, r4
  4005f8:	47b8      	blx	r7
  MXT_GEN_COMMANDPROCESSOR_T6, 0)
  + MXT_GEN_COMMANDPROCESSOR_CALIBRATE, 0x01);
  4005fa:	b01c      	add	sp, #112	; 0x70
  4005fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400600:	00407598 	.word	0x00407598
  400604:	00061a80 	.word	0x00061a80
  400608:	08f0d180 	.word	0x08f0d180
  40060c:	00401a41 	.word	0x00401a41
  400610:	40018000 	.word	0x40018000
  400614:	00401c8d 	.word	0x00401c8d
  400618:	00400631 	.word	0x00400631
  40061c:	004008c9 	.word	0x004008c9
  400620:	00400981 	.word	0x00400981
  400624:	003228d8 	.word	0x003228d8
  400628:	20400001 	.word	0x20400001
  40062c:	00400909 	.word	0x00400909

00400630 <mxt_init_device>:
 * \param chgpin IOPORT pin instance attached to the maXTouch device's /CHG pin
 * \return Operation result status code
 */
status_code_t mxt_init_device(struct mxt_device *device,
		twihs_master_t interface, uint8_t chip_adr, uint32_t chgpin)
{
  400630:	b5f0      	push	{r4, r5, r6, r7, lr}
  400632:	b087      	sub	sp, #28
  400634:	4604      	mov	r4, r0
  400636:	460e      	mov	r6, r1
  400638:	4617      	mov	r7, r2
	int8_t status;

	/* Set TWI interface, TWI address and CHG-pin of the maXTouch device. */
	device->interface = interface;
  40063a:	6081      	str	r1, [r0, #8]
	device->mxt_chip_adr = chip_adr;
  40063c:	7302      	strb	r2, [r0, #12]
	device->chgpin = chgpin;
  40063e:	6183      	str	r3, [r0, #24]
	device->handler = NULL;
  400640:	2500      	movs	r5, #0
  400642:	6105      	str	r5, [r0, #16]
			malloc(sizeof(struct mxt_info_object));
  400644:	2007      	movs	r0, #7
  400646:	4b9d      	ldr	r3, [pc, #628]	; (4008bc <mxt_init_device+0x28c>)
  400648:	4798      	blx	r3
	device->info_object = (struct mxt_info_object *)
  40064a:	6020      	str	r0, [r4, #0]
	twihs_package_t packet = {
  40064c:	9501      	str	r5, [sp, #4]
  40064e:	9505      	str	r5, [sp, #20]
  400650:	2302      	movs	r3, #2
  400652:	9302      	str	r3, [sp, #8]
  400654:	9003      	str	r0, [sp, #12]
  400656:	2307      	movs	r3, #7
  400658:	9304      	str	r3, [sp, #16]
  40065a:	f88d 7014 	strb.w	r7, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40065e:	a901      	add	r1, sp, #4
  400660:	4630      	mov	r0, r6
  400662:	4b97      	ldr	r3, [pc, #604]	; (4008c0 <mxt_init_device+0x290>)
  400664:	4798      	blx	r3
  400666:	1b40      	subs	r0, r0, r5
  400668:	bf18      	it	ne
  40066a:	2001      	movne	r0, #1
  40066c:	4240      	negs	r0, r0
	if ((status = mxt_read_id_block(device)) != STATUS_OK) {
  40066e:	b108      	cbz	r0, 400674 <mxt_init_device+0x44>
	}

	device->multitouch_report_offset = status;

	return STATUS_OK;
}
  400670:	b007      	add	sp, #28
  400672:	bdf0      	pop	{r4, r5, r6, r7, pc}
			malloc(device->info_object->obj_count *
  400674:	6825      	ldr	r5, [r4, #0]
  400676:	79a8      	ldrb	r0, [r5, #6]
  400678:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  40067c:	0040      	lsls	r0, r0, #1
  40067e:	4b8f      	ldr	r3, [pc, #572]	; (4008bc <mxt_init_device+0x28c>)
  400680:	4798      	blx	r3
	device->object_list = (struct mxt_object *)
  400682:	6060      	str	r0, [r4, #4]
	twihs_package_t packet = {
  400684:	2300      	movs	r3, #0
  400686:	9301      	str	r3, [sp, #4]
  400688:	9304      	str	r3, [sp, #16]
  40068a:	9305      	str	r3, [sp, #20]
  40068c:	2307      	movs	r3, #7
  40068e:	f88d 3004 	strb.w	r3, [sp, #4]
  400692:	2302      	movs	r3, #2
  400694:	9302      	str	r3, [sp, #8]
  400696:	9003      	str	r0, [sp, #12]
		.length       = device->info_object->obj_count *
  400698:	79ab      	ldrb	r3, [r5, #6]
  40069a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40069e:	005b      	lsls	r3, r3, #1
	twihs_package_t packet = {
  4006a0:	9304      	str	r3, [sp, #16]
  4006a2:	7b23      	ldrb	r3, [r4, #12]
  4006a4:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4006a8:	a901      	add	r1, sp, #4
  4006aa:	68a0      	ldr	r0, [r4, #8]
  4006ac:	4b84      	ldr	r3, [pc, #528]	; (4008c0 <mxt_init_device+0x290>)
  4006ae:	4798      	blx	r3
  4006b0:	3000      	adds	r0, #0
  4006b2:	bf18      	it	ne
  4006b4:	2001      	movne	r0, #1
  4006b6:	4240      	negs	r0, r0
	if (status != STATUS_OK) {
  4006b8:	2800      	cmp	r0, #0
  4006ba:	d1d9      	bne.n	400670 <mxt_init_device+0x40>
	uint8_t *id_pointer = (uint8_t *)device->info_object;
  4006bc:	6827      	ldr	r7, [r4, #0]
	uint8_t *objects_pointer = (uint8_t *)device->object_list;
  4006be:	6860      	ldr	r0, [r4, #4]
			(device->info_object->obj_count *
  4006c0:	79bb      	ldrb	r3, [r7, #6]
  4006c2:	eb03 0643 	add.w	r6, r3, r3, lsl #1
  4006c6:	0076      	lsls	r6, r6, #1
	crc_area_size = MXT_ID_BLOCK_SIZE +
  4006c8:	3607      	adds	r6, #7
  4006ca:	b2b6      	uxth	r6, r6
  4006cc:	463a      	mov	r2, r7
  4006ce:	3706      	adds	r7, #6
	uint32_t crc_tmp = 0;
  4006d0:	2100      	movs	r1, #0
		result ^= crcpoly;
  4006d2:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 4008c4 <mxt_init_device+0x294>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4006d6:	f892 e001 	ldrb.w	lr, [r2, #1]
  4006da:	7815      	ldrb	r5, [r2, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4006dc:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
  4006e0:	ea85 0141 	eor.w	r1, r5, r1, lsl #1
	if (result & 0x1000000) {
  4006e4:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
		result ^= crcpoly;
  4006e8:	bf18      	it	ne
  4006ea:	ea81 010c 	eorne.w	r1, r1, ip
  4006ee:	3202      	adds	r2, #2
	for (i = 0; i < MXT_ID_BLOCK_SIZE - 1; i += 2) {
  4006f0:	42ba      	cmp	r2, r7
  4006f2:	d1f0      	bne.n	4006d6 <mxt_init_device+0xa6>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4006f4:	7802      	ldrb	r2, [r0, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4006f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4006fa:	ea83 0241 	eor.w	r2, r3, r1, lsl #1
	if (result & 0x1000000) {
  4006fe:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  400702:	d003      	beq.n	40070c <mxt_init_device+0xdc>
		result ^= crcpoly;
  400704:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  400708:	f082 021b 	eor.w	r2, r2, #27
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  40070c:	f1a6 0708 	sub.w	r7, r6, #8
  400710:	2f01      	cmp	r7, #1
  400712:	dd12      	ble.n	40073a <mxt_init_device+0x10a>
  400714:	2301      	movs	r3, #1
		result ^= crcpoly;
  400716:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 4008c4 <mxt_init_device+0x294>
		crc_tmp = mxt_crc_24(crc_tmp, objects_pointer[i],
  40071a:	18c1      	adds	r1, r0, r3
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  40071c:	784d      	ldrb	r5, [r1, #1]
  40071e:	5cc1      	ldrb	r1, [r0, r3]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  400720:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  400724:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
	if (result & 0x1000000) {
  400728:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		result ^= crcpoly;
  40072c:	bf18      	it	ne
  40072e:	ea82 020e 	eorne.w	r2, r2, lr
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  400732:	3302      	adds	r3, #2
  400734:	b29b      	uxth	r3, r3
  400736:	42bb      	cmp	r3, r7
  400738:	dbef      	blt.n	40071a <mxt_init_device+0xea>
	crc_tmp = mxt_crc_24(crc_tmp,
  40073a:	4430      	add	r0, r6
	result = ((crc << 1u) ^ (uint32_t)data_word);
  40073c:	f810 3c08 	ldrb.w	r3, [r0, #-8]
  400740:	ea83 0242 	eor.w	r2, r3, r2, lsl #1
	if (result & 0x1000000) {
  400744:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  400748:	d003      	beq.n	400752 <mxt_init_device+0x122>
		result ^= crcpoly;
  40074a:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  40074e:	f082 021b 	eor.w	r2, r2, #27
	*crc = (crc_tmp & 0x00FFFFFF);
  400752:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	twihs_package_t packet = {
  400756:	2300      	movs	r3, #0
  400758:	9301      	str	r3, [sp, #4]
  40075a:	9305      	str	r3, [sp, #20]
  40075c:	f88d 6004 	strb.w	r6, [sp, #4]
  400760:	0a36      	lsrs	r6, r6, #8
  400762:	f88d 6005 	strb.w	r6, [sp, #5]
  400766:	2302      	movs	r3, #2
  400768:	9302      	str	r3, [sp, #8]
  40076a:	f8cd d00c 	str.w	sp, [sp, #12]
  40076e:	2303      	movs	r3, #3
  400770:	9304      	str	r3, [sp, #16]
  400772:	7b23      	ldrb	r3, [r4, #12]
  400774:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400778:	a901      	add	r1, sp, #4
  40077a:	68a0      	ldr	r0, [r4, #8]
  40077c:	4b50      	ldr	r3, [pc, #320]	; (4008c0 <mxt_init_device+0x290>)
  40077e:	4798      	blx	r3
  400780:	b328      	cbz	r0, 4007ce <mxt_init_device+0x19e>
		return ERR_IO_ERROR;
  400782:	f04f 33ff 	mov.w	r3, #4294967295
	if (crc_calculated != crc_read) {
  400786:	42ab      	cmp	r3, r5
  400788:	f040 808b 	bne.w	4008a2 <mxt_init_device+0x272>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40078c:	6825      	ldr	r5, [r4, #0]
  40078e:	79a8      	ldrb	r0, [r5, #6]
  400790:	b198      	cbz	r0, 4007ba <mxt_init_device+0x18a>
  400792:	2300      	movs	r3, #0
  400794:	3301      	adds	r3, #1
  400796:	b2da      	uxtb	r2, r3
  400798:	4290      	cmp	r0, r2
  40079a:	d8fb      	bhi.n	400794 <mxt_init_device+0x164>
		tot_report_ids += (device->object_list[i].num_report_ids);
  40079c:	6862      	ldr	r2, [r4, #4]
  40079e:	1e43      	subs	r3, r0, #1
  4007a0:	b2db      	uxtb	r3, r3
  4007a2:	3301      	adds	r3, #1
  4007a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4007a8:	eb02 0143 	add.w	r1, r2, r3, lsl #1
  4007ac:	2000      	movs	r0, #0
  4007ae:	7953      	ldrb	r3, [r2, #5]
  4007b0:	4418      	add	r0, r3
  4007b2:	b2c0      	uxtb	r0, r0
  4007b4:	3206      	adds	r2, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4007b6:	4291      	cmp	r1, r2
  4007b8:	d1f9      	bne.n	4007ae <mxt_init_device+0x17e>
			malloc(sizeof(struct mxt_report_id_map) *
  4007ba:	0040      	lsls	r0, r0, #1
  4007bc:	4b3f      	ldr	r3, [pc, #252]	; (4008bc <mxt_init_device+0x28c>)
  4007be:	4798      	blx	r3
	device->report_id_map = (struct mxt_report_id_map *)
  4007c0:	6160      	str	r0, [r4, #20]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4007c2:	79ab      	ldrb	r3, [r5, #6]
  4007c4:	b173      	cbz	r3, 4007e4 <mxt_init_device+0x1b4>
  4007c6:	2700      	movs	r7, #0
  4007c8:	2601      	movs	r6, #1
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  4007ca:	46be      	mov	lr, r7
  4007cc:	e037      	b.n	40083e <mxt_init_device+0x20e>
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  4007ce:	f89d 2002 	ldrb.w	r2, [sp, #2]
  4007d2:	f89d 3000 	ldrb.w	r3, [sp]
  4007d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4007da:	f89d 2001 	ldrb.w	r2, [sp, #1]
  4007de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4007e2:	e7d0      	b.n	400786 <mxt_init_device+0x156>
		return ERR_BAD_DATA;
  4007e4:	f06f 0003 	mvn.w	r0, #3
  4007e8:	e742      	b.n	400670 <mxt_init_device+0x40>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  4007ea:	3001      	adds	r0, #1
  4007ec:	b2c0      	uxtb	r0, r0
  4007ee:	6862      	ldr	r2, [r4, #4]
  4007f0:	1953      	adds	r3, r2, r5
  4007f2:	7919      	ldrb	r1, [r3, #4]
  4007f4:	4281      	cmp	r1, r0
  4007f6:	d31c      	bcc.n	400832 <mxt_init_device+0x202>
			if (device->object_list[i].num_report_ids != 0) {
  4007f8:	795b      	ldrb	r3, [r3, #5]
  4007fa:	2b00      	cmp	r3, #0
  4007fc:	d0f5      	beq.n	4007ea <mxt_init_device+0x1ba>
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4007fe:	6862      	ldr	r2, [r4, #4]
  400800:	442a      	add	r2, r5
  400802:	7953      	ldrb	r3, [r2, #5]
  400804:	2b00      	cmp	r3, #0
  400806:	d0f0      	beq.n	4007ea <mxt_init_device+0x1ba>
  400808:	4633      	mov	r3, r6
							device->object_list[i].type;
  40080a:	7811      	ldrb	r1, [r2, #0]
					device->report_id_map[id_index].object_type =
  40080c:	6962      	ldr	r2, [r4, #20]
  40080e:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					device->report_id_map[id_index].instance = j;
  400812:	6962      	ldr	r2, [r4, #20]
  400814:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  400818:	7050      	strb	r0, [r2, #1]
					id_index++;
  40081a:	3301      	adds	r3, #1
  40081c:	b2db      	uxtb	r3, r3
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  40081e:	6862      	ldr	r2, [r4, #4]
  400820:	442a      	add	r2, r5
  400822:	1b99      	subs	r1, r3, r6
  400824:	f892 c005 	ldrb.w	ip, [r2, #5]
  400828:	b2c9      	uxtb	r1, r1
  40082a:	458c      	cmp	ip, r1
  40082c:	d8ed      	bhi.n	40080a <mxt_init_device+0x1da>
					id_index++;
  40082e:	461e      	mov	r6, r3
  400830:	e7db      	b.n	4007ea <mxt_init_device+0x1ba>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400832:	3701      	adds	r7, #1
  400834:	b2ff      	uxtb	r7, r7
  400836:	6823      	ldr	r3, [r4, #0]
  400838:	799b      	ldrb	r3, [r3, #6]
  40083a:	429f      	cmp	r7, r3
  40083c:	d207      	bcs.n	40084e <mxt_init_device+0x21e>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40083e:	eb07 0347 	add.w	r3, r7, r7, lsl #1
  400842:	005a      	lsls	r2, r3, #1
  400844:	4615      	mov	r5, r2
  400846:	6863      	ldr	r3, [r4, #4]
  400848:	4413      	add	r3, r2
  40084a:	4670      	mov	r0, lr
  40084c:	e7d4      	b.n	4007f8 <mxt_init_device+0x1c8>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40084e:	b35b      	cbz	r3, 4008a8 <mxt_init_device+0x278>
  400850:	4610      	mov	r0, r2
  400852:	3b01      	subs	r3, #1
  400854:	b2db      	uxtb	r3, r3
  400856:	3301      	adds	r3, #1
  400858:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40085c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  400860:	2100      	movs	r1, #0
		tot_report_ids += (device->object_list[i].num_report_ids);
  400862:	7943      	ldrb	r3, [r0, #5]
  400864:	4419      	add	r1, r3
  400866:	b2c9      	uxtb	r1, r1
  400868:	3006      	adds	r0, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40086a:	4282      	cmp	r2, r0
  40086c:	d1f9      	bne.n	400862 <mxt_init_device+0x232>
	for (i = 0; i < tot_rpt_id; ++i) {
  40086e:	b1f1      	cbz	r1, 4008ae <mxt_init_device+0x27e>
		if (device->report_id_map[i].object_type == object_type) {
  400870:	6962      	ldr	r2, [r4, #20]
  400872:	7813      	ldrb	r3, [r2, #0]
  400874:	2b09      	cmp	r3, #9
  400876:	d00f      	beq.n	400898 <mxt_init_device+0x268>
  400878:	2300      	movs	r3, #0
	for (i = 0; i < tot_rpt_id; ++i) {
  40087a:	3301      	adds	r3, #1
  40087c:	b2db      	uxtb	r3, r3
  40087e:	428b      	cmp	r3, r1
  400880:	d00c      	beq.n	40089c <mxt_init_device+0x26c>
		if (device->report_id_map[i].object_type == object_type) {
  400882:	f812 0f02 	ldrb.w	r0, [r2, #2]!
  400886:	2809      	cmp	r0, #9
  400888:	d1f7      	bne.n	40087a <mxt_init_device+0x24a>
			return i;
  40088a:	b25b      	sxtb	r3, r3
	if (status == -1) {
  40088c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400890:	d010      	beq.n	4008b4 <mxt_init_device+0x284>
	device->multitouch_report_offset = status;
  400892:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
  400894:	2000      	movs	r0, #0
  400896:	e6eb      	b.n	400670 <mxt_init_device+0x40>
		if (device->report_id_map[i].object_type == object_type) {
  400898:	2300      	movs	r3, #0
  40089a:	e7f6      	b.n	40088a <mxt_init_device+0x25a>
		return ERR_BAD_DATA;
  40089c:	f06f 0003 	mvn.w	r0, #3
  4008a0:	e6e6      	b.n	400670 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  4008a2:	f06f 0003 	mvn.w	r0, #3
  4008a6:	e6e3      	b.n	400670 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  4008a8:	f06f 0003 	mvn.w	r0, #3
  4008ac:	e6e0      	b.n	400670 <mxt_init_device+0x40>
  4008ae:	f06f 0003 	mvn.w	r0, #3
  4008b2:	e6dd      	b.n	400670 <mxt_init_device+0x40>
  4008b4:	f06f 0003 	mvn.w	r0, #3
  4008b8:	e6da      	b.n	400670 <mxt_init_device+0x40>
  4008ba:	bf00      	nop
  4008bc:	00404679 	.word	0x00404679
  4008c0:	00401cc1 	.word	0x00401cc1
  4008c4:	0080001b 	.word	0x0080001b

004008c8 <mxt_get_object_address>:
uint16_t mxt_get_object_address(struct mxt_device *device, uint8_t object_id,
		uint8_t instance)
{
	uint8_t i;

	for (i = 0; i < device->info_object->obj_count; i++) {
  4008c8:	6803      	ldr	r3, [r0, #0]
  4008ca:	799a      	ldrb	r2, [r3, #6]
  4008cc:	b1d2      	cbz	r2, 400904 <mxt_get_object_address+0x3c>
{
  4008ce:	b410      	push	{r4}
		if (object_id == device->object_list[i].type) {
  4008d0:	6844      	ldr	r4, [r0, #4]
  4008d2:	7823      	ldrb	r3, [r4, #0]
  4008d4:	428b      	cmp	r3, r1
  4008d6:	d00e      	beq.n	4008f6 <mxt_get_object_address+0x2e>
  4008d8:	1da3      	adds	r3, r4, #6
  4008da:	3a01      	subs	r2, #1
  4008dc:	b2d2      	uxtb	r2, r2
  4008de:	3201      	adds	r2, #1
  4008e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4008e4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; i++) {
  4008e8:	4293      	cmp	r3, r2
  4008ea:	d009      	beq.n	400900 <mxt_get_object_address+0x38>
		if (object_id == device->object_list[i].type) {
  4008ec:	461c      	mov	r4, r3
  4008ee:	f813 0b06 	ldrb.w	r0, [r3], #6
  4008f2:	4288      	cmp	r0, r1
  4008f4:	d1f8      	bne.n	4008e8 <mxt_get_object_address+0x20>
			return device->object_list[i].start_address;
  4008f6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
		}
	}

	return 0;
}
  4008fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008fe:	4770      	bx	lr
	return 0;
  400900:	2000      	movs	r0, #0
  400902:	e7fa      	b.n	4008fa <mxt_get_object_address+0x32>
  400904:	2000      	movs	r0, #0
  400906:	4770      	bx	lr

00400908 <mxt_write_config_object>:
 * \param *obj_data Pointer to memory buffer containing object data
 * \result Operation result status code
 */
status_code_t mxt_write_config_object(struct mxt_device *device,
		mxt_memory_adr memory_adr, void *obj_data)
{
  400908:	b530      	push	{r4, r5, lr}
  40090a:	b087      	sub	sp, #28
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  40090c:	2300      	movs	r3, #0
  40090e:	9301      	str	r3, [sp, #4]
  400910:	9304      	str	r3, [sp, #16]
  400912:	9305      	str	r3, [sp, #20]
  400914:	f88d 1004 	strb.w	r1, [sp, #4]
  400918:	0a0b      	lsrs	r3, r1, #8
  40091a:	f88d 3005 	strb.w	r3, [sp, #5]
  40091e:	2302      	movs	r3, #2
  400920:	9302      	str	r3, [sp, #8]
  400922:	9203      	str	r2, [sp, #12]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400924:	6803      	ldr	r3, [r0, #0]
  400926:	799a      	ldrb	r2, [r3, #6]
  400928:	b1ba      	cbz	r2, 40095a <mxt_write_config_object+0x52>
		if (device->object_list[i].start_address == mem_adr) {
  40092a:	6844      	ldr	r4, [r0, #4]
  40092c:	f8b4 3001 	ldrh.w	r3, [r4, #1]
  400930:	428b      	cmp	r3, r1
  400932:	d00f      	beq.n	400954 <mxt_write_config_object+0x4c>
  400934:	1da3      	adds	r3, r4, #6
  400936:	3a01      	subs	r2, #1
  400938:	b2d2      	uxtb	r2, r2
  40093a:	3201      	adds	r2, #1
  40093c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  400940:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400944:	4293      	cmp	r3, r2
  400946:	d016      	beq.n	400976 <mxt_write_config_object+0x6e>
		if (device->object_list[i].start_address == mem_adr) {
  400948:	461c      	mov	r4, r3
  40094a:	3306      	adds	r3, #6
  40094c:	f8b4 5001 	ldrh.w	r5, [r4, #1]
  400950:	428d      	cmp	r5, r1
  400952:	d1f7      	bne.n	400944 <mxt_write_config_object+0x3c>
			return (device->object_list[i].size + 1);
  400954:	78e2      	ldrb	r2, [r4, #3]
  400956:	3201      	adds	r2, #1
  400958:	b2d2      	uxtb	r2, r2
		.addr[0]      = memory_adr,
		.addr[1]      = memory_adr >> 8,
		.addr_length  = sizeof(mxt_memory_adr),
		.chip         = device->mxt_chip_adr,
		.buffer       = obj_data,
		.length       = mxt_get_object_size(device, memory_adr)
  40095a:	9204      	str	r2, [sp, #16]
	twihs_package_t packet = {
  40095c:	7b03      	ldrb	r3, [r0, #12]
  40095e:	f88d 3014 	strb.w	r3, [sp, #20]
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400962:	a901      	add	r1, sp, #4
  400964:	6880      	ldr	r0, [r0, #8]
  400966:	4b05      	ldr	r3, [pc, #20]	; (40097c <mxt_write_config_object+0x74>)
  400968:	4798      	blx	r3
  40096a:	3000      	adds	r0, #0
  40096c:	bf18      	it	ne
  40096e:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}

}
  400970:	4240      	negs	r0, r0
  400972:	b007      	add	sp, #28
  400974:	bd30      	pop	{r4, r5, pc}
	return 0;
  400976:	2200      	movs	r2, #0
  400978:	e7ef      	b.n	40095a <mxt_write_config_object+0x52>
  40097a:	bf00      	nop
  40097c:	00401d6d 	.word	0x00401d6d

00400980 <mxt_write_config_reg>:
 * \param value Value to be written to register
 * \result Operation result status code
 */
status_code_t mxt_write_config_reg(struct mxt_device *device,
		mxt_memory_adr memory_adr, uint8_t value)
{
  400980:	b500      	push	{lr}
  400982:	b089      	sub	sp, #36	; 0x24
  400984:	f88d 2007 	strb.w	r2, [sp, #7]
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  400988:	2300      	movs	r3, #0
  40098a:	9303      	str	r3, [sp, #12]
  40098c:	9307      	str	r3, [sp, #28]
  40098e:	f88d 100c 	strb.w	r1, [sp, #12]
  400992:	0a09      	lsrs	r1, r1, #8
  400994:	f88d 100d 	strb.w	r1, [sp, #13]
  400998:	2302      	movs	r3, #2
  40099a:	9304      	str	r3, [sp, #16]
  40099c:	f10d 0307 	add.w	r3, sp, #7
  4009a0:	9305      	str	r3, [sp, #20]
  4009a2:	2301      	movs	r3, #1
  4009a4:	9306      	str	r3, [sp, #24]
  4009a6:	7b03      	ldrb	r3, [r0, #12]
  4009a8:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = device->mxt_chip_adr,
		.buffer       = &value,
		.length       = sizeof(value)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  4009ac:	a903      	add	r1, sp, #12
  4009ae:	6880      	ldr	r0, [r0, #8]
  4009b0:	4b04      	ldr	r3, [pc, #16]	; (4009c4 <mxt_write_config_reg+0x44>)
  4009b2:	4798      	blx	r3
  4009b4:	3000      	adds	r0, #0
  4009b6:	bf18      	it	ne
  4009b8:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}
}
  4009ba:	4240      	negs	r0, r0
  4009bc:	b009      	add	sp, #36	; 0x24
  4009be:	f85d fb04 	ldr.w	pc, [sp], #4
  4009c2:	bf00      	nop
  4009c4:	00401d6d 	.word	0x00401d6d

004009c8 <mxt_is_message_pending>:
 * \param *device Pointer to mxt_device instance
 * \return Return /CHG pin status
 */
bool mxt_is_message_pending(struct mxt_device *device)
{
	if (ioport_get_pin_level(device->chgpin) == false) {
  4009c8:	6982      	ldr	r2, [r0, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4009ca:	4b07      	ldr	r3, [pc, #28]	; (4009e8 <mxt_is_message_pending+0x20>)
  4009cc:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  4009d0:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4009d2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  4009d4:	f002 021f 	and.w	r2, r2, #31
  4009d8:	2301      	movs	r3, #1
  4009da:	fa03 f202 	lsl.w	r2, r3, r2
  4009de:	420a      	tst	r2, r1
		return true;
	} else {
		return false;
	}
}
  4009e0:	bf0c      	ite	eq
  4009e2:	4618      	moveq	r0, r3
  4009e4:	2000      	movne	r0, #0
  4009e6:	4770      	bx	lr
  4009e8:	00200707 	.word	0x00200707

004009ec <mxt_read_message>:
 * \param *message Pointer to mxt_message instance
 * \return Operation result status code
 */
status_code_t mxt_read_message(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
  4009ec:	b530      	push	{r4, r5, lr}
  4009ee:	b087      	sub	sp, #28
  4009f0:	4604      	mov	r4, r0
  4009f2:	460d      	mov	r5, r1
	uint16_t obj_adr = mxt_get_object_address(device,
  4009f4:	2200      	movs	r2, #0
  4009f6:	2105      	movs	r1, #5
  4009f8:	4b0d      	ldr	r3, [pc, #52]	; (400a30 <mxt_read_message+0x44>)
  4009fa:	4798      	blx	r3
			MXT_GEN_MESSAGEPROCESSOR_T5, 0);

	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4009fc:	2300      	movs	r3, #0
  4009fe:	9301      	str	r3, [sp, #4]
  400a00:	9305      	str	r3, [sp, #20]
  400a02:	f88d 0004 	strb.w	r0, [sp, #4]
  400a06:	0a00      	lsrs	r0, r0, #8
  400a08:	f88d 0005 	strb.w	r0, [sp, #5]
  400a0c:	2302      	movs	r3, #2
  400a0e:	9302      	str	r3, [sp, #8]
  400a10:	9503      	str	r5, [sp, #12]
  400a12:	2309      	movs	r3, #9
  400a14:	9304      	str	r3, [sp, #16]
  400a16:	7b23      	ldrb	r3, [r4, #12]
  400a18:	f88d 3014 	strb.w	r3, [sp, #20]
		.buffer       = message,
		.length       = MXT_TWI_MSG_SIZE_T5
	};

	/* Read information from the slave */
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400a1c:	a901      	add	r1, sp, #4
  400a1e:	68a0      	ldr	r0, [r4, #8]
  400a20:	4b04      	ldr	r3, [pc, #16]	; (400a34 <mxt_read_message+0x48>)
  400a22:	4798      	blx	r3
  400a24:	3000      	adds	r0, #0
  400a26:	bf18      	it	ne
  400a28:	2001      	movne	r0, #1
		return mxt_validate_message(&packet);
#else
		return STATUS_OK;
#endif
	}
}
  400a2a:	4240      	negs	r0, r0
  400a2c:	b007      	add	sp, #28
  400a2e:	bd30      	pop	{r4, r5, pc}
  400a30:	004008c9 	.word	0x004008c9
  400a34:	00401cc1 	.word	0x00401cc1

00400a38 <mxt_read_touch_event>:
 * \param *touch_event Pointer to mxt_touch_event instance
 * \return Operation result status code
 */
status_code_t mxt_read_touch_event(struct mxt_device *device,
		struct mxt_touch_event *touch_event)
{
  400a38:	b5f0      	push	{r4, r5, r6, r7, lr}
  400a3a:	b085      	sub	sp, #20
  400a3c:	4604      	mov	r4, r0
  400a3e:	460e      	mov	r6, r1
	uint8_t obj_type, status;
	struct mxt_conf_messageprocessor_t5 message;

	while (mxt_is_message_pending(device)) {
  400a40:	4d17      	ldr	r5, [pc, #92]	; (400aa0 <mxt_read_touch_event+0x68>)
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  400a42:	4f18      	ldr	r7, [pc, #96]	; (400aa4 <mxt_read_touch_event+0x6c>)
	while (mxt_is_message_pending(device)) {
  400a44:	4620      	mov	r0, r4
  400a46:	47a8      	blx	r5
  400a48:	b328      	cbz	r0, 400a96 <mxt_read_touch_event+0x5e>
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  400a4a:	a901      	add	r1, sp, #4
  400a4c:	4620      	mov	r0, r4
  400a4e:	47b8      	blx	r7
  400a50:	4603      	mov	r3, r0
  400a52:	bb10      	cbnz	r0, 400a9a <mxt_read_touch_event+0x62>
 * \return Operation
 */
enum mxt_object_type mxt_get_object_type(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
	return (enum mxt_object_type)(device->report_id_map[message->reportid].object_type);
  400a54:	f89d 3004 	ldrb.w	r3, [sp, #4]
  400a58:	6962      	ldr	r2, [r4, #20]
		if (obj_type == MXT_TOUCH_MULTITOUCHSCREEN_T9) {
  400a5a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
  400a5e:	2a09      	cmp	r2, #9
  400a60:	d1f0      	bne.n	400a44 <mxt_read_touch_event+0xc>
			touch_event->id = (message.reportid -
  400a62:	7f22      	ldrb	r2, [r4, #28]
  400a64:	1a9b      	subs	r3, r3, r2
  400a66:	7033      	strb	r3, [r6, #0]
			touch_event->status = message.message[0];
  400a68:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400a6c:	7073      	strb	r3, [r6, #1]
					((message.message[3] & 0xf0) >> 4);
  400a6e:	f89d 3008 	ldrb.w	r3, [sp, #8]
			touch_event->x = (message.message[1] << 4) |
  400a72:	f89d 1006 	ldrb.w	r1, [sp, #6]
					((message.message[3] & 0xf0) >> 4);
  400a76:	091a      	lsrs	r2, r3, #4
			touch_event->x = (message.message[1] << 4) |
  400a78:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  400a7c:	8072      	strh	r2, [r6, #2]
			touch_event->y = (message.message[2] << 4) |
  400a7e:	f89d 2007 	ldrb.w	r2, [sp, #7]
					(message.message[3] & 0x0f);
  400a82:	f003 030f 	and.w	r3, r3, #15
			touch_event->y = (message.message[2] << 4) |
  400a86:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  400a8a:	80b3      	strh	r3, [r6, #4]
			touch_event->size = message.message[4];
  400a8c:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400a90:	71b3      	strb	r3, [r6, #6]
			return STATUS_OK;
  400a92:	2300      	movs	r3, #0
  400a94:	e001      	b.n	400a9a <mxt_read_touch_event+0x62>
	return ERR_BAD_DATA;
  400a96:	f06f 0303 	mvn.w	r3, #3
}
  400a9a:	4618      	mov	r0, r3
  400a9c:	b005      	add	sp, #20
  400a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400aa0:	004009c9 	.word	0x004009c9
  400aa4:	004009ed 	.word	0x004009ed

00400aa8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400aa8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400aaa:	4810      	ldr	r0, [pc, #64]	; (400aec <sysclk_init+0x44>)
  400aac:	4b10      	ldr	r3, [pc, #64]	; (400af0 <sysclk_init+0x48>)
  400aae:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400ab0:	213e      	movs	r1, #62	; 0x3e
  400ab2:	2000      	movs	r0, #0
  400ab4:	4b0f      	ldr	r3, [pc, #60]	; (400af4 <sysclk_init+0x4c>)
  400ab6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400ab8:	4c0f      	ldr	r4, [pc, #60]	; (400af8 <sysclk_init+0x50>)
  400aba:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400abc:	2800      	cmp	r0, #0
  400abe:	d0fc      	beq.n	400aba <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400ac0:	4b0e      	ldr	r3, [pc, #56]	; (400afc <sysclk_init+0x54>)
  400ac2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400ac4:	4a0e      	ldr	r2, [pc, #56]	; (400b00 <sysclk_init+0x58>)
  400ac6:	4b0f      	ldr	r3, [pc, #60]	; (400b04 <sysclk_init+0x5c>)
  400ac8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400aca:	4c0f      	ldr	r4, [pc, #60]	; (400b08 <sysclk_init+0x60>)
  400acc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400ace:	2800      	cmp	r0, #0
  400ad0:	d0fc      	beq.n	400acc <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400ad2:	2002      	movs	r0, #2
  400ad4:	4b0d      	ldr	r3, [pc, #52]	; (400b0c <sysclk_init+0x64>)
  400ad6:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400ad8:	2000      	movs	r0, #0
  400ada:	4b0d      	ldr	r3, [pc, #52]	; (400b10 <sysclk_init+0x68>)
  400adc:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400ade:	4b0d      	ldr	r3, [pc, #52]	; (400b14 <sysclk_init+0x6c>)
  400ae0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400ae2:	480d      	ldr	r0, [pc, #52]	; (400b18 <sysclk_init+0x70>)
  400ae4:	4b02      	ldr	r3, [pc, #8]	; (400af0 <sysclk_init+0x48>)
  400ae6:	4798      	blx	r3
  400ae8:	bd10      	pop	{r4, pc}
  400aea:	bf00      	nop
  400aec:	07270e00 	.word	0x07270e00
  400af0:	00402119 	.word	0x00402119
  400af4:	004019bd 	.word	0x004019bd
  400af8:	00401a11 	.word	0x00401a11
  400afc:	00401a21 	.word	0x00401a21
  400b00:	20183f01 	.word	0x20183f01
  400b04:	400e0600 	.word	0x400e0600
  400b08:	00401a31 	.word	0x00401a31
  400b0c:	00401921 	.word	0x00401921
  400b10:	00401959 	.word	0x00401959
  400b14:	0040200d 	.word	0x0040200d
  400b18:	11e1a300 	.word	0x11e1a300

00400b1c <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  400b1c:	b510      	push	{r4, lr}
  400b1e:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  400b20:	4b10      	ldr	r3, [pc, #64]	; (400b64 <spi_master_init+0x48>)
  400b22:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  400b24:	2380      	movs	r3, #128	; 0x80
  400b26:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400b28:	6863      	ldr	r3, [r4, #4]
  400b2a:	f043 0301 	orr.w	r3, r3, #1
  400b2e:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400b30:	6863      	ldr	r3, [r4, #4]
  400b32:	f043 0310 	orr.w	r3, r3, #16
  400b36:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400b38:	6863      	ldr	r3, [r4, #4]
  400b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400b3e:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  400b40:	2100      	movs	r1, #0
  400b42:	4620      	mov	r0, r4
  400b44:	4b08      	ldr	r3, [pc, #32]	; (400b68 <spi_master_init+0x4c>)
  400b46:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400b48:	6863      	ldr	r3, [r4, #4]
  400b4a:	f023 0302 	bic.w	r3, r3, #2
  400b4e:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  400b50:	6863      	ldr	r3, [r4, #4]
  400b52:	f023 0304 	bic.w	r3, r3, #4
  400b56:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  400b58:	2100      	movs	r1, #0
  400b5a:	4620      	mov	r0, r4
  400b5c:	4b03      	ldr	r3, [pc, #12]	; (400b6c <spi_master_init+0x50>)
  400b5e:	4798      	blx	r3
  400b60:	bd10      	pop	{r4, pc}
  400b62:	bf00      	nop
  400b64:	00401a61 	.word	0x00401a61
  400b68:	00401a8d 	.word	0x00401a8d
  400b6c:	00401aa3 	.word	0x00401aa3

00400b70 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  400b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400b74:	4604      	mov	r4, r0
  400b76:	460d      	mov	r5, r1
  400b78:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  400b7a:	4915      	ldr	r1, [pc, #84]	; (400bd0 <spi_master_setup_device+0x60>)
  400b7c:	4618      	mov	r0, r3
  400b7e:	4b15      	ldr	r3, [pc, #84]	; (400bd4 <spi_master_setup_device+0x64>)
  400b80:	4798      	blx	r3
  400b82:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400b84:	2300      	movs	r3, #0
  400b86:	461a      	mov	r2, r3
  400b88:	6829      	ldr	r1, [r5, #0]
  400b8a:	4620      	mov	r0, r4
  400b8c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 400bec <spi_master_setup_device+0x7c>
  400b90:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  400b92:	2208      	movs	r2, #8
  400b94:	6829      	ldr	r1, [r5, #0]
  400b96:	4620      	mov	r0, r4
  400b98:	4b0f      	ldr	r3, [pc, #60]	; (400bd8 <spi_master_setup_device+0x68>)
  400b9a:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  400b9c:	b2fa      	uxtb	r2, r7
  400b9e:	6829      	ldr	r1, [r5, #0]
  400ba0:	4620      	mov	r0, r4
  400ba2:	4b0e      	ldr	r3, [pc, #56]	; (400bdc <spi_master_setup_device+0x6c>)
  400ba4:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  400ba6:	2208      	movs	r2, #8
  400ba8:	6829      	ldr	r1, [r5, #0]
  400baa:	4620      	mov	r0, r4
  400bac:	4b0c      	ldr	r3, [pc, #48]	; (400be0 <spi_master_setup_device+0x70>)
  400bae:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  400bb0:	0872      	lsrs	r2, r6, #1
  400bb2:	6829      	ldr	r1, [r5, #0]
  400bb4:	4620      	mov	r0, r4
  400bb6:	4b0b      	ldr	r3, [pc, #44]	; (400be4 <spi_master_setup_device+0x74>)
  400bb8:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  400bba:	f086 0201 	eor.w	r2, r6, #1
  400bbe:	f002 0201 	and.w	r2, r2, #1
  400bc2:	6829      	ldr	r1, [r5, #0]
  400bc4:	4620      	mov	r0, r4
  400bc6:	4b08      	ldr	r3, [pc, #32]	; (400be8 <spi_master_setup_device+0x78>)
  400bc8:	4798      	blx	r3
  400bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400bce:	bf00      	nop
  400bd0:	08f0d180 	.word	0x08f0d180
  400bd4:	00401b7f 	.word	0x00401b7f
  400bd8:	00401b6b 	.word	0x00401b6b
  400bdc:	00401b95 	.word	0x00401b95
  400be0:	00401b25 	.word	0x00401b25
  400be4:	00401ae9 	.word	0x00401ae9
  400be8:	00401b07 	.word	0x00401b07
  400bec:	00401bbd 	.word	0x00401bbd

00400bf0 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  400bf0:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  400bf2:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  400bf4:	f013 0f04 	tst.w	r3, #4
  400bf8:	d006      	beq.n	400c08 <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  400bfa:	6809      	ldr	r1, [r1, #0]
  400bfc:	290f      	cmp	r1, #15
  400bfe:	d900      	bls.n	400c02 <spi_select_device+0x12>
  400c00:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  400c02:	4b06      	ldr	r3, [pc, #24]	; (400c1c <spi_select_device+0x2c>)
  400c04:	4798      	blx	r3
  400c06:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  400c08:	6809      	ldr	r1, [r1, #0]
  400c0a:	2903      	cmp	r1, #3
  400c0c:	d8f8      	bhi.n	400c00 <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  400c0e:	2301      	movs	r3, #1
  400c10:	fa03 f101 	lsl.w	r1, r3, r1
  400c14:	43c9      	mvns	r1, r1
  400c16:	4b01      	ldr	r3, [pc, #4]	; (400c1c <spi_select_device+0x2c>)
  400c18:	4798      	blx	r3
		}
	}
}
  400c1a:	e7f1      	b.n	400c00 <spi_select_device+0x10>
  400c1c:	00401a8d 	.word	0x00401a8d

00400c20 <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  400c20:	b11a      	cbz	r2, 400c2a <spi_write_packet+0xa>
{
  400c22:	b410      	push	{r4}
  400c24:	460c      	mov	r4, r1
  400c26:	4411      	add	r1, r2
  400c28:	e006      	b.n	400c38 <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  400c2a:	2000      	movs	r0, #0
  400c2c:	4770      	bx	lr
		val = data[i];
  400c2e:	f814 3b01 	ldrb.w	r3, [r4], #1
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400c32:	60c3      	str	r3, [r0, #12]
	while (len) {
  400c34:	42a1      	cmp	r1, r4
  400c36:	d00c      	beq.n	400c52 <spi_write_packet+0x32>
{
  400c38:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  400c3c:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  400c3e:	f012 0f02 	tst.w	r2, #2
  400c42:	d1f4      	bne.n	400c2e <spi_write_packet+0xe>
			if (!timeout--) {
  400c44:	3b01      	subs	r3, #1
  400c46:	d1f9      	bne.n	400c3c <spi_write_packet+0x1c>
				return ERR_TIMEOUT;
  400c48:	f06f 0002 	mvn.w	r0, #2
}
  400c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c50:	4770      	bx	lr
	return STATUS_OK;
  400c52:	2000      	movs	r0, #0
  400c54:	e7fa      	b.n	400c4c <spi_write_packet+0x2c>

00400c56 <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  400c56:	b13a      	cbz	r2, 400c68 <spi_read_packet+0x12>
{
  400c58:	b470      	push	{r4, r5, r6}
  400c5a:	4615      	mov	r5, r2
  400c5c:	460c      	mov	r4, r1
  400c5e:	440d      	add	r5, r1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400c60:	26ff      	movs	r6, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400c62:	f240 2101 	movw	r1, #513	; 0x201
  400c66:	e012      	b.n	400c8e <spi_read_packet+0x38>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  400c68:	2000      	movs	r0, #0
  400c6a:	4770      	bx	lr
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400c6c:	60c6      	str	r6, [r0, #12]
		while (!spi_is_rx_ready(p_spi)) {
  400c6e:	f643 2399 	movw	r3, #15001	; 0x3a99
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400c72:	6902      	ldr	r2, [r0, #16]
  400c74:	ea31 0202 	bics.w	r2, r1, r2
  400c78:	d004      	beq.n	400c84 <spi_read_packet+0x2e>
			if (!timeout--) {
  400c7a:	3b01      	subs	r3, #1
  400c7c:	d1f9      	bne.n	400c72 <spi_read_packet+0x1c>
				return ERR_TIMEOUT;
  400c7e:	f06f 0002 	mvn.w	r0, #2
  400c82:	e00e      	b.n	400ca2 <spi_read_packet+0x4c>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  400c84:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  400c86:	f804 3b01 	strb.w	r3, [r4], #1
	while (len) {
  400c8a:	42a5      	cmp	r5, r4
  400c8c:	d00b      	beq.n	400ca6 <spi_read_packet+0x50>
{
  400c8e:	f643 2399 	movw	r3, #15001	; 0x3a99
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  400c92:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  400c94:	f012 0f02 	tst.w	r2, #2
  400c98:	d1e8      	bne.n	400c6c <spi_read_packet+0x16>
			if (!timeout--) {
  400c9a:	3b01      	subs	r3, #1
  400c9c:	d1f9      	bne.n	400c92 <spi_read_packet+0x3c>
				return ERR_TIMEOUT;
  400c9e:	f06f 0002 	mvn.w	r0, #2
}
  400ca2:	bc70      	pop	{r4, r5, r6}
  400ca4:	4770      	bx	lr
	return STATUS_OK;
  400ca6:	2000      	movs	r0, #0
  400ca8:	e7fb      	b.n	400ca2 <spi_read_packet+0x4c>
	...

00400cac <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400cb0:	b980      	cbnz	r0, 400cd4 <_read+0x28>
  400cb2:	460c      	mov	r4, r1
  400cb4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400cb6:	2a00      	cmp	r2, #0
  400cb8:	dd0f      	ble.n	400cda <_read+0x2e>
  400cba:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400cbc:	4e08      	ldr	r6, [pc, #32]	; (400ce0 <_read+0x34>)
  400cbe:	4d09      	ldr	r5, [pc, #36]	; (400ce4 <_read+0x38>)
  400cc0:	6830      	ldr	r0, [r6, #0]
  400cc2:	4621      	mov	r1, r4
  400cc4:	682b      	ldr	r3, [r5, #0]
  400cc6:	4798      	blx	r3
		ptr++;
  400cc8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400cca:	42bc      	cmp	r4, r7
  400ccc:	d1f8      	bne.n	400cc0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400cce:	4640      	mov	r0, r8
  400cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400cd4:	f04f 38ff 	mov.w	r8, #4294967295
  400cd8:	e7f9      	b.n	400cce <_read+0x22>
	for (; len > 0; --len) {
  400cda:	4680      	mov	r8, r0
  400cdc:	e7f7      	b.n	400cce <_read+0x22>
  400cde:	bf00      	nop
  400ce0:	2040c824 	.word	0x2040c824
  400ce4:	2040c81c 	.word	0x2040c81c

00400ce8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400ce8:	3801      	subs	r0, #1
  400cea:	2802      	cmp	r0, #2
  400cec:	d815      	bhi.n	400d1a <_write+0x32>
{
  400cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400cf2:	460e      	mov	r6, r1
  400cf4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400cf6:	b19a      	cbz	r2, 400d20 <_write+0x38>
  400cf8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400cfa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400d34 <_write+0x4c>
  400cfe:	4f0c      	ldr	r7, [pc, #48]	; (400d30 <_write+0x48>)
  400d00:	f8d8 0000 	ldr.w	r0, [r8]
  400d04:	f815 1b01 	ldrb.w	r1, [r5], #1
  400d08:	683b      	ldr	r3, [r7, #0]
  400d0a:	4798      	blx	r3
  400d0c:	2800      	cmp	r0, #0
  400d0e:	db0a      	blt.n	400d26 <_write+0x3e>
  400d10:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400d12:	3c01      	subs	r4, #1
  400d14:	d1f4      	bne.n	400d00 <_write+0x18>
  400d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400d1a:	f04f 30ff 	mov.w	r0, #4294967295
  400d1e:	4770      	bx	lr
	for (; len != 0; --len) {
  400d20:	4610      	mov	r0, r2
  400d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400d26:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400d2e:	bf00      	nop
  400d30:	2040c820 	.word	0x2040c820
  400d34:	2040c824 	.word	0x2040c824

00400d38 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400d3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400d40:	4b9e      	ldr	r3, [pc, #632]	; (400fbc <board_init+0x284>)
  400d42:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  400d44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d48:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400d4c:	4b9c      	ldr	r3, [pc, #624]	; (400fc0 <board_init+0x288>)
  400d4e:	2200      	movs	r2, #0
  400d50:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400d54:	695a      	ldr	r2, [r3, #20]
  400d56:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400d5a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400d5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d60:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400d64:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400d68:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400d6c:	f007 0007 	and.w	r0, r7, #7
  400d70:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400d72:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400d76:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400d7a:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400d7e:	f3bf 8f4f 	dsb	sy
  400d82:	f04f 34ff 	mov.w	r4, #4294967295
  400d86:	fa04 fc00 	lsl.w	ip, r4, r0
  400d8a:	fa06 f000 	lsl.w	r0, r6, r0
  400d8e:	fa04 f40e 	lsl.w	r4, r4, lr
  400d92:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400d96:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400d98:	463a      	mov	r2, r7
  400d9a:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400d9c:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400da0:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400da4:	3a01      	subs	r2, #1
  400da6:	4423      	add	r3, r4
  400da8:	f1b2 3fff 	cmp.w	r2, #4294967295
  400dac:	d1f6      	bne.n	400d9c <board_init+0x64>
        } while(sets--);
  400dae:	3e01      	subs	r6, #1
  400db0:	4460      	add	r0, ip
  400db2:	f1b6 3fff 	cmp.w	r6, #4294967295
  400db6:	d1ef      	bne.n	400d98 <board_init+0x60>
  400db8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400dbc:	4b80      	ldr	r3, [pc, #512]	; (400fc0 <board_init+0x288>)
  400dbe:	695a      	ldr	r2, [r3, #20]
  400dc0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400dc4:	615a      	str	r2, [r3, #20]
  400dc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400dca:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400dce:	4a7d      	ldr	r2, [pc, #500]	; (400fc4 <board_init+0x28c>)
  400dd0:	497d      	ldr	r1, [pc, #500]	; (400fc8 <board_init+0x290>)
  400dd2:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400dd4:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400dd8:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400dda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400dde:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400de2:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400de6:	f022 0201 	bic.w	r2, r2, #1
  400dea:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400dee:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400df2:	f022 0201 	bic.w	r2, r2, #1
  400df6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400dfa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400dfe:	f3bf 8f6f 	isb	sy
  400e02:	200a      	movs	r0, #10
  400e04:	4c71      	ldr	r4, [pc, #452]	; (400fcc <board_init+0x294>)
  400e06:	47a0      	blx	r4
  400e08:	200b      	movs	r0, #11
  400e0a:	47a0      	blx	r4
  400e0c:	200c      	movs	r0, #12
  400e0e:	47a0      	blx	r4
  400e10:	2010      	movs	r0, #16
  400e12:	47a0      	blx	r4
  400e14:	2011      	movs	r0, #17
  400e16:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400e18:	4e6d      	ldr	r6, [pc, #436]	; (400fd0 <board_init+0x298>)
  400e1a:	f44f 7880 	mov.w	r8, #256	; 0x100
  400e1e:	f8c6 8010 	str.w	r8, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400e22:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400e26:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400e2a:	4c6a      	ldr	r4, [pc, #424]	; (400fd4 <board_init+0x29c>)
  400e2c:	f44f 6500 	mov.w	r5, #2048	; 0x800
  400e30:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400e32:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  400e36:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400e38:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e3c:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  400e3e:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  400e40:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400e44:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400e46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400e4a:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400e4c:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400e4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400e52:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400e54:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400e58:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400e5c:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400e60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400e64:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400e66:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e6a:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400e6c:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400e6e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400e72:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400e74:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400e78:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400e7a:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400e7c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400e80:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400e82:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400e84:	4a54      	ldr	r2, [pc, #336]	; (400fd8 <board_init+0x2a0>)
  400e86:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400e8a:	f043 0310 	orr.w	r3, r3, #16
  400e8e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400e92:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  400e96:	2310      	movs	r3, #16
  400e98:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e9e:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400ea0:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400ea2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400ea6:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400ea8:	4319      	orrs	r1, r3
  400eaa:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400eac:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400eae:	4319      	orrs	r1, r3
  400eb0:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400eb2:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  400eb4:	2208      	movs	r2, #8
  400eb6:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400eb8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ebc:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400ebe:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400ec0:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400ec4:	6f21      	ldr	r1, [r4, #112]	; 0x70
  400ec6:	f021 0108 	bic.w	r1, r1, #8
  400eca:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400ecc:	6f61      	ldr	r1, [r4, #116]	; 0x74
  400ece:	f021 0108 	bic.w	r1, r1, #8
  400ed2:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400ed4:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  400ed6:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400ed8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400edc:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400ede:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400ee0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400ee4:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400ee6:	f022 0210 	bic.w	r2, r2, #16
  400eea:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400eec:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400eee:	f022 0210 	bic.w	r2, r2, #16
  400ef2:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400ef4:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  400ef6:	2300      	movs	r3, #0
  400ef8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400efc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400f00:	4630      	mov	r0, r6
  400f02:	4f36      	ldr	r7, [pc, #216]	; (400fdc <board_init+0x2a4>)
  400f04:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  400f06:	2300      	movs	r3, #0
  400f08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400f0c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400f10:	4630      	mov	r0, r6
  400f12:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  400f14:	2301      	movs	r3, #1
  400f16:	22ff      	movs	r2, #255	; 0xff
  400f18:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f1c:	4630      	mov	r0, r6
  400f1e:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  400f20:	2301      	movs	r3, #1
  400f22:	223f      	movs	r2, #63	; 0x3f
  400f24:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f28:	482d      	ldr	r0, [pc, #180]	; (400fe0 <board_init+0x2a8>)
  400f2a:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  400f2c:	2301      	movs	r3, #1
  400f2e:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  400f32:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f36:	4620      	mov	r0, r4
  400f38:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  400f3a:	2301      	movs	r3, #1
  400f3c:	4642      	mov	r2, r8
  400f3e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f42:	4630      	mov	r0, r6
  400f44:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  400f46:	2301      	movs	r3, #1
  400f48:	462a      	mov	r2, r5
  400f4a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f4e:	4630      	mov	r0, r6
  400f50:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  400f52:	2301      	movs	r3, #1
  400f54:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400f58:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f5c:	4821      	ldr	r0, [pc, #132]	; (400fe4 <board_init+0x2ac>)
  400f5e:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  400f60:	2300      	movs	r3, #0
  400f62:	f44f 7200 	mov.w	r2, #512	; 0x200
  400f66:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400f6a:	4630      	mov	r0, r6
  400f6c:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  400f6e:	f44f 7100 	mov.w	r1, #512	; 0x200
  400f72:	4630      	mov	r0, r6
  400f74:	4b1c      	ldr	r3, [pc, #112]	; (400fe8 <board_init+0x2b0>)
  400f76:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  400f78:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400f7c:	2074      	movs	r0, #116	; 0x74
  400f7e:	4c1b      	ldr	r4, [pc, #108]	; (400fec <board_init+0x2b4>)
  400f80:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  400f82:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400f86:	2075      	movs	r0, #117	; 0x75
  400f88:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  400f8a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400f8e:	2076      	movs	r0, #118	; 0x76
  400f90:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  400f92:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400f96:	207b      	movs	r0, #123	; 0x7b
  400f98:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  400f9a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400f9e:	2018      	movs	r0, #24
  400fa0:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  400fa2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400fa6:	2006      	movs	r0, #6
  400fa8:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  400faa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400fae:	2053      	movs	r0, #83	; 0x53
  400fb0:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  400fb2:	2053      	movs	r0, #83	; 0x53
  400fb4:	4b0e      	ldr	r3, [pc, #56]	; (400ff0 <board_init+0x2b8>)
  400fb6:	4798      	blx	r3
  400fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400fbc:	400e1850 	.word	0x400e1850
  400fc0:	e000ed00 	.word	0xe000ed00
  400fc4:	400e0c00 	.word	0x400e0c00
  400fc8:	5a00080c 	.word	0x5a00080c
  400fcc:	00401a41 	.word	0x00401a41
  400fd0:	400e1200 	.word	0x400e1200
  400fd4:	400e0e00 	.word	0x400e0e00
  400fd8:	40088000 	.word	0x40088000
  400fdc:	0040166d 	.word	0x0040166d
  400fe0:	400e1600 	.word	0x400e1600
  400fe4:	400e1400 	.word	0x400e1400
  400fe8:	00401579 	.word	0x00401579
  400fec:	0040173d 	.word	0x0040173d
  400ff0:	00401705 	.word	0x00401705

00400ff4 <ili9488_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili9488_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  400ff4:	b430      	push	{r4, r5}
	uint32_t dw;

	if (*p_ul_x1 >= ILI9488_LCD_WIDTH) {
  400ff6:	6804      	ldr	r4, [r0, #0]
  400ff8:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400ffc:	d302      	bcc.n	401004 <ili9488_check_box_coordinates+0x10>
		*p_ul_x1 = ILI9488_LCD_WIDTH - 1;
  400ffe:	f240 143f 	movw	r4, #319	; 0x13f
  401002:	6004      	str	r4, [r0, #0]
	}

	if (*p_ul_x2 >= ILI9488_LCD_WIDTH) {
  401004:	6814      	ldr	r4, [r2, #0]
  401006:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  40100a:	d302      	bcc.n	401012 <ili9488_check_box_coordinates+0x1e>
		*p_ul_x2 = ILI9488_LCD_WIDTH - 1;
  40100c:	f240 143f 	movw	r4, #319	; 0x13f
  401010:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 >= ILI9488_LCD_HEIGHT) {
  401012:	680c      	ldr	r4, [r1, #0]
  401014:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  401018:	d302      	bcc.n	401020 <ili9488_check_box_coordinates+0x2c>
		*p_ul_y1 = ILI9488_LCD_HEIGHT - 1;
  40101a:	f240 14df 	movw	r4, #479	; 0x1df
  40101e:	600c      	str	r4, [r1, #0]
	}

	if (*p_ul_y2 >= ILI9488_LCD_HEIGHT) {
  401020:	681c      	ldr	r4, [r3, #0]
  401022:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  401026:	d302      	bcc.n	40102e <ili9488_check_box_coordinates+0x3a>
		*p_ul_y2 = ILI9488_LCD_HEIGHT - 1;
  401028:	f240 14df 	movw	r4, #479	; 0x1df
  40102c:	601c      	str	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  40102e:	6804      	ldr	r4, [r0, #0]
  401030:	6815      	ldr	r5, [r2, #0]
  401032:	42ac      	cmp	r4, r5
  401034:	d901      	bls.n	40103a <ili9488_check_box_coordinates+0x46>
		dw = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
  401036:	6005      	str	r5, [r0, #0]
		*p_ul_x2 = dw;
  401038:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  40103a:	680a      	ldr	r2, [r1, #0]
  40103c:	6818      	ldr	r0, [r3, #0]
  40103e:	4282      	cmp	r2, r0
  401040:	d901      	bls.n	401046 <ili9488_check_box_coordinates+0x52>
		dw = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
  401042:	6008      	str	r0, [r1, #0]
		*p_ul_y2 = dw;
  401044:	601a      	str	r2, [r3, #0]
	}
}
  401046:	bc30      	pop	{r4, r5}
  401048:	4770      	bx	lr
	...

0040104c <ili9488_write_ram_prepare>:
{
  40104c:	b510      	push	{r4, lr}
  40104e:	b082      	sub	sp, #8
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  401050:	2006      	movs	r0, #6
  401052:	4b0a      	ldr	r3, [pc, #40]	; (40107c <ili9488_write_ram_prepare+0x30>)
  401054:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, ILI9488_CMD_MEMORY_WRITE, BOARD_ILI9488_SPI_NPCS, 0);
  401056:	2300      	movs	r3, #0
  401058:	2203      	movs	r2, #3
  40105a:	212c      	movs	r1, #44	; 0x2c
  40105c:	4808      	ldr	r0, [pc, #32]	; (401080 <ili9488_write_ram_prepare+0x34>)
  40105e:	4c09      	ldr	r4, [pc, #36]	; (401084 <ili9488_write_ram_prepare+0x38>)
  401060:	47a0      	blx	r4
	for(i = 0; i < 0xFF; i++);
  401062:	2300      	movs	r3, #0
  401064:	9301      	str	r3, [sp, #4]
  401066:	9b01      	ldr	r3, [sp, #4]
  401068:	2bfe      	cmp	r3, #254	; 0xfe
  40106a:	d805      	bhi.n	401078 <ili9488_write_ram_prepare+0x2c>
  40106c:	9b01      	ldr	r3, [sp, #4]
  40106e:	3301      	adds	r3, #1
  401070:	9301      	str	r3, [sp, #4]
  401072:	9b01      	ldr	r3, [sp, #4]
  401074:	2bfe      	cmp	r3, #254	; 0xfe
  401076:	d9f9      	bls.n	40106c <ili9488_write_ram_prepare+0x20>
}
  401078:	b002      	add	sp, #8
  40107a:	bd10      	pop	{r4, pc}
  40107c:	00401721 	.word	0x00401721
  401080:	40008000 	.word	0x40008000
  401084:	00401ab5 	.word	0x00401ab5

00401088 <ili9488_write_register>:
{
  401088:	b570      	push	{r4, r5, r6, lr}
  40108a:	b082      	sub	sp, #8
  40108c:	4605      	mov	r5, r0
  40108e:	460e      	mov	r6, r1
  401090:	4614      	mov	r4, r2
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  401092:	2006      	movs	r0, #6
  401094:	4b14      	ldr	r3, [pc, #80]	; (4010e8 <ili9488_write_register+0x60>)
  401096:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, uc_reg, BOARD_ILI9488_SPI_NPCS, 0);
  401098:	2300      	movs	r3, #0
  40109a:	2203      	movs	r2, #3
  40109c:	4629      	mov	r1, r5
  40109e:	4813      	ldr	r0, [pc, #76]	; (4010ec <ili9488_write_register+0x64>)
  4010a0:	4d13      	ldr	r5, [pc, #76]	; (4010f0 <ili9488_write_register+0x68>)
  4010a2:	47a8      	blx	r5
	for(i = 0; i < 0xFF; i++);
  4010a4:	2300      	movs	r3, #0
  4010a6:	9301      	str	r3, [sp, #4]
  4010a8:	9b01      	ldr	r3, [sp, #4]
  4010aa:	2bfe      	cmp	r3, #254	; 0xfe
  4010ac:	d805      	bhi.n	4010ba <ili9488_write_register+0x32>
  4010ae:	9b01      	ldr	r3, [sp, #4]
  4010b0:	3301      	adds	r3, #1
  4010b2:	9301      	str	r3, [sp, #4]
  4010b4:	9b01      	ldr	r3, [sp, #4]
  4010b6:	2bfe      	cmp	r3, #254	; 0xfe
  4010b8:	d9f9      	bls.n	4010ae <ili9488_write_register+0x26>
	if(size > 0) {
  4010ba:	b90c      	cbnz	r4, 4010c0 <ili9488_write_register+0x38>
}
  4010bc:	b002      	add	sp, #8
  4010be:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_pin_high(LCD_SPI_CDS_PIO);
  4010c0:	2006      	movs	r0, #6
  4010c2:	4b0c      	ldr	r3, [pc, #48]	; (4010f4 <ili9488_write_register+0x6c>)
  4010c4:	4798      	blx	r3
		spi_write_packet(BOARD_ILI9488_SPI, us_data, size);
  4010c6:	4622      	mov	r2, r4
  4010c8:	4631      	mov	r1, r6
  4010ca:	4808      	ldr	r0, [pc, #32]	; (4010ec <ili9488_write_register+0x64>)
  4010cc:	4b0a      	ldr	r3, [pc, #40]	; (4010f8 <ili9488_write_register+0x70>)
  4010ce:	4798      	blx	r3
		for(i = 0; i < 0x5F; i++);
  4010d0:	2300      	movs	r3, #0
  4010d2:	9301      	str	r3, [sp, #4]
  4010d4:	9b01      	ldr	r3, [sp, #4]
  4010d6:	2b5e      	cmp	r3, #94	; 0x5e
  4010d8:	d8f0      	bhi.n	4010bc <ili9488_write_register+0x34>
  4010da:	9b01      	ldr	r3, [sp, #4]
  4010dc:	3301      	adds	r3, #1
  4010de:	9301      	str	r3, [sp, #4]
  4010e0:	9b01      	ldr	r3, [sp, #4]
  4010e2:	2b5e      	cmp	r3, #94	; 0x5e
  4010e4:	d9f9      	bls.n	4010da <ili9488_write_register+0x52>
  4010e6:	e7e9      	b.n	4010bc <ili9488_write_register+0x34>
  4010e8:	00401721 	.word	0x00401721
  4010ec:	40008000 	.word	0x40008000
  4010f0:	00401ab5 	.word	0x00401ab5
  4010f4:	00401705 	.word	0x00401705
  4010f8:	00400c21 	.word	0x00400c21

004010fc <ili9488_write_ram_buffer>:
{
  4010fc:	b530      	push	{r4, r5, lr}
  4010fe:	b083      	sub	sp, #12
  401100:	4604      	mov	r4, r0
  401102:	460d      	mov	r5, r1
	pio_set_pin_high(LCD_SPI_CDS_PIO);
  401104:	2006      	movs	r0, #6
  401106:	4b0a      	ldr	r3, [pc, #40]	; (401130 <ili9488_write_ram_buffer+0x34>)
  401108:	4798      	blx	r3
	spi_write_packet(BOARD_ILI9488_SPI, p_ul_buf, ul_size);
  40110a:	462a      	mov	r2, r5
  40110c:	4621      	mov	r1, r4
  40110e:	4809      	ldr	r0, [pc, #36]	; (401134 <ili9488_write_ram_buffer+0x38>)
  401110:	4b09      	ldr	r3, [pc, #36]	; (401138 <ili9488_write_ram_buffer+0x3c>)
  401112:	4798      	blx	r3
	for(i = 0; i < 0xFF; i++);
  401114:	2300      	movs	r3, #0
  401116:	9301      	str	r3, [sp, #4]
  401118:	9b01      	ldr	r3, [sp, #4]
  40111a:	2bfe      	cmp	r3, #254	; 0xfe
  40111c:	d805      	bhi.n	40112a <ili9488_write_ram_buffer+0x2e>
  40111e:	9b01      	ldr	r3, [sp, #4]
  401120:	3301      	adds	r3, #1
  401122:	9301      	str	r3, [sp, #4]
  401124:	9b01      	ldr	r3, [sp, #4]
  401126:	2bfe      	cmp	r3, #254	; 0xfe
  401128:	d9f9      	bls.n	40111e <ili9488_write_ram_buffer+0x22>
}
  40112a:	b003      	add	sp, #12
  40112c:	bd30      	pop	{r4, r5, pc}
  40112e:	bf00      	nop
  401130:	00401705 	.word	0x00401705
  401134:	40008000 	.word	0x40008000
  401138:	00400c21 	.word	0x00400c21

0040113c <ili9488_delay>:
	for(i = 0; i < ul_ms; i++) {
  40113c:	4601      	mov	r1, r0
  40113e:	b130      	cbz	r0, 40114e <ili9488_delay+0x12>
  401140:	4a03      	ldr	r2, [pc, #12]	; (401150 <ili9488_delay+0x14>)
{
  401142:	4b04      	ldr	r3, [pc, #16]	; (401154 <ili9488_delay+0x18>)
		for(i = 0; i < 100000; i++) {
  401144:	3b01      	subs	r3, #1
  401146:	d1fd      	bne.n	401144 <ili9488_delay+0x8>
	for(i = 0; i < ul_ms; i++) {
  401148:	4291      	cmp	r1, r2
  40114a:	d8fa      	bhi.n	401142 <ili9488_delay+0x6>
  40114c:	4770      	bx	lr
  40114e:	4770      	bx	lr
  401150:	000186a1 	.word	0x000186a1
  401154:	000186a0 	.word	0x000186a0

00401158 <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  401158:	b500      	push	{lr}
  40115a:	b083      	sub	sp, #12
	ili9488_color_t value;
	if(direction) {
  40115c:	b958      	cbnz	r0, 401176 <ili9488_set_display_direction+0x1e>
		value = 0xE8;
	} else {
		value = 0x48;
  40115e:	2348      	movs	r3, #72	; 0x48
  401160:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  401164:	2201      	movs	r2, #1
  401166:	f10d 0107 	add.w	r1, sp, #7
  40116a:	2036      	movs	r0, #54	; 0x36
  40116c:	4b04      	ldr	r3, [pc, #16]	; (401180 <ili9488_set_display_direction+0x28>)
  40116e:	4798      	blx	r3
}
  401170:	b003      	add	sp, #12
  401172:	f85d fb04 	ldr.w	pc, [sp], #4
		value = 0xE8;
  401176:	23e8      	movs	r3, #232	; 0xe8
  401178:	f88d 3007 	strb.w	r3, [sp, #7]
  40117c:	e7f2      	b.n	401164 <ili9488_set_display_direction+0xc>
  40117e:	bf00      	nop
  401180:	00401089 	.word	0x00401089

00401184 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  401184:	b510      	push	{r4, lr}
  401186:	b084      	sub	sp, #16
	uint32_t cnt = 0;
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
  401188:	f8ad 000e 	strh.w	r0, [sp, #14]
	col_end    =  width + x - 1;
  40118c:	3a01      	subs	r2, #1
  40118e:	4402      	add	r2, r0
  401190:	f8ad 200c 	strh.w	r2, [sp, #12]

	row_start = y ;
  401194:	f8ad 100a 	strh.w	r1, [sp, #10]
	row_end   = height + y - 1;
  401198:	3b01      	subs	r3, #1
  40119a:	4419      	add	r1, r3
  40119c:	f8ad 1008 	strh.w	r1, [sp, #8]

	buf[0] = get_8b_to_16b(col_start);
  4011a0:	0a03      	lsrs	r3, r0, #8
  4011a2:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(col_start);
  4011a6:	f88d 0005 	strb.w	r0, [sp, #5]
	buf[2] = get_8b_to_16b(col_end);
  4011aa:	f3c2 2307 	ubfx	r3, r2, #8, #8
  4011ae:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(col_end);
  4011b2:	f88d 2007 	strb.w	r2, [sp, #7]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  4011b6:	2204      	movs	r2, #4
  4011b8:	eb0d 0102 	add.w	r1, sp, r2
  4011bc:	202a      	movs	r0, #42	; 0x2a
  4011be:	4c10      	ldr	r4, [pc, #64]	; (401200 <ili9488_set_window+0x7c>)
  4011c0:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  4011c2:	2200      	movs	r2, #0
  4011c4:	4611      	mov	r1, r2
  4011c6:	4610      	mov	r0, r2
  4011c8:	47a0      	blx	r4

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  4011ca:	f89d 300b 	ldrb.w	r3, [sp, #11]
  4011ce:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(row_start);
  4011d2:	f89d 300a 	ldrb.w	r3, [sp, #10]
  4011d6:	f88d 3005 	strb.w	r3, [sp, #5]
	buf[2] = get_8b_to_16b(row_end);
  4011da:	f89d 3009 	ldrb.w	r3, [sp, #9]
  4011de:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(row_end);
  4011e2:	f89d 3008 	ldrb.w	r3, [sp, #8]
  4011e6:	f88d 3007 	strb.w	r3, [sp, #7]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  4011ea:	2204      	movs	r2, #4
  4011ec:	eb0d 0102 	add.w	r1, sp, r2
  4011f0:	202b      	movs	r0, #43	; 0x2b
  4011f2:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  4011f4:	2200      	movs	r2, #0
  4011f6:	4611      	mov	r1, r2
  4011f8:	4610      	mov	r0, r2
  4011fa:	47a0      	blx	r4
}
  4011fc:	b004      	add	sp, #16
  4011fe:	bd10      	pop	{r4, pc}
  401200:	00401089 	.word	0x00401089

00401204 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  401204:	b508      	push	{r3, lr}
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  401206:	2200      	movs	r2, #0
  401208:	4611      	mov	r1, r2
  40120a:	2029      	movs	r0, #41	; 0x29
  40120c:	4b01      	ldr	r3, [pc, #4]	; (401214 <ili9488_display_on+0x10>)
  40120e:	4798      	blx	r3
  401210:	bd08      	pop	{r3, pc}
  401212:	bf00      	nop
  401214:	00401089 	.word	0x00401089

00401218 <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  401218:	b410      	push	{r4}
		g_ul_pixel_cache[i] = ul_color;
	}
#endif
#ifdef ILI9488_SPIMODE
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
		g_ul_pixel_cache[i++] = ul_color>>16;
  40121a:	f3c0 4407 	ubfx	r4, r0, #16, #8
		g_ul_pixel_cache[i++] = ul_color>>8;
  40121e:	f3c0 2107 	ubfx	r1, r0, #8, #8
  401222:	4b06      	ldr	r3, [pc, #24]	; (40123c <ili9488_set_foreground_color+0x24>)
  401224:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
		g_ul_pixel_cache[i++] = ul_color>>16;
  401228:	701c      	strb	r4, [r3, #0]
		g_ul_pixel_cache[i++] = ul_color>>8;
  40122a:	7059      	strb	r1, [r3, #1]
		g_ul_pixel_cache[i++] = ul_color&0xFF;
  40122c:	7098      	strb	r0, [r3, #2]
  40122e:	3303      	adds	r3, #3
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
  401230:	4293      	cmp	r3, r2
  401232:	d1f9      	bne.n	401228 <ili9488_set_foreground_color+0x10>
	}
#endif
}
  401234:	f85d 4b04 	ldr.w	r4, [sp], #4
  401238:	4770      	bx	lr
  40123a:	bf00      	nop
  40123c:	204009dc 	.word	0x204009dc

00401240 <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  401240:	b510      	push	{r4, lr}
  401242:	b084      	sub	sp, #16
  401244:	f8ad 0006 	strh.w	r0, [sp, #6]
  401248:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  40124c:	0a03      	lsrs	r3, r0, #8
  40124e:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[1] = get_0b_to_8b(x);
  401252:	b2c0      	uxtb	r0, r0
  401254:	f88d 000d 	strb.w	r0, [sp, #13]
	buf[2] = get_8b_to_16b(x);
  401258:	f88d 300e 	strb.w	r3, [sp, #14]
	buf[3] = get_0b_to_8b(x);
  40125c:	f88d 000f 	strb.w	r0, [sp, #15]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  401260:	2204      	movs	r2, #4
  401262:	a903      	add	r1, sp, #12
  401264:	202a      	movs	r0, #42	; 0x2a
  401266:	4c0e      	ldr	r4, [pc, #56]	; (4012a0 <ili9488_set_cursor_position+0x60>)
  401268:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  40126a:	2200      	movs	r2, #0
  40126c:	4611      	mov	r1, r2
  40126e:	4610      	mov	r0, r2
  401270:	47a0      	blx	r4


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  401272:	f89d 2005 	ldrb.w	r2, [sp, #5]
  401276:	f88d 200c 	strb.w	r2, [sp, #12]
	buf[1] = get_0b_to_8b(y);
  40127a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  40127e:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[2] = get_8b_to_16b(y);
  401282:	f88d 200e 	strb.w	r2, [sp, #14]
	buf[3] = get_0b_to_8b(y);
  401286:	f88d 300f 	strb.w	r3, [sp, #15]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  40128a:	2204      	movs	r2, #4
  40128c:	a903      	add	r1, sp, #12
  40128e:	202b      	movs	r0, #43	; 0x2b
  401290:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  401292:	2200      	movs	r2, #0
  401294:	4611      	mov	r1, r2
  401296:	4610      	mov	r0, r2
  401298:	47a0      	blx	r4
}
  40129a:	b004      	add	sp, #16
  40129c:	bd10      	pop	{r4, pc}
  40129e:	bf00      	nop
  4012a0:	00401089 	.word	0x00401089

004012a4 <ili9488_init>:
{
  4012a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4012a8:	b087      	sub	sp, #28
  4012aa:	4681      	mov	r9, r0
	struct spi_device ILI9488_SPI_DEVICE = {
  4012ac:	2703      	movs	r7, #3
  4012ae:	ae06      	add	r6, sp, #24
  4012b0:	f846 7d08 	str.w	r7, [r6, #-8]!
	spi_master_init(BOARD_ILI9488_SPI);
  4012b4:	4d5d      	ldr	r5, [pc, #372]	; (40142c <ili9488_init+0x188>)
  4012b6:	4628      	mov	r0, r5
  4012b8:	4b5d      	ldr	r3, [pc, #372]	; (401430 <ili9488_init+0x18c>)
  4012ba:	4798      	blx	r3
	spi_master_setup_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE, SPI_MODE_3, ILI9488_SPI_BAUDRATE, 0);
  4012bc:	2400      	movs	r4, #0
  4012be:	9400      	str	r4, [sp, #0]
  4012c0:	4b5c      	ldr	r3, [pc, #368]	; (401434 <ili9488_init+0x190>)
  4012c2:	463a      	mov	r2, r7
  4012c4:	4631      	mov	r1, r6
  4012c6:	4628      	mov	r0, r5
  4012c8:	f8df 8198 	ldr.w	r8, [pc, #408]	; 401464 <ili9488_init+0x1c0>
  4012cc:	47c0      	blx	r8
	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  4012ce:	4622      	mov	r2, r4
  4012d0:	4639      	mov	r1, r7
  4012d2:	4628      	mov	r0, r5
  4012d4:	4b58      	ldr	r3, [pc, #352]	; (401438 <ili9488_init+0x194>)
  4012d6:	4798      	blx	r3
	spi_select_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE);
  4012d8:	4631      	mov	r1, r6
  4012da:	4628      	mov	r0, r5
  4012dc:	4b57      	ldr	r3, [pc, #348]	; (40143c <ili9488_init+0x198>)
  4012de:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4012e0:	2001      	movs	r0, #1
  4012e2:	6028      	str	r0, [r5, #0]
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  4012e4:	6168      	str	r0, [r5, #20]
	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  4012e6:	4622      	mov	r2, r4
  4012e8:	4621      	mov	r1, r4
  4012ea:	4e55      	ldr	r6, [pc, #340]	; (401440 <ili9488_init+0x19c>)
  4012ec:	47b0      	blx	r6
	ili9488_delay(200);
  4012ee:	20c8      	movs	r0, #200	; 0xc8
  4012f0:	4d54      	ldr	r5, [pc, #336]	; (401444 <ili9488_init+0x1a0>)
  4012f2:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  4012f4:	4622      	mov	r2, r4
  4012f6:	4621      	mov	r1, r4
  4012f8:	2011      	movs	r0, #17
  4012fa:	47b0      	blx	r6
	ili9488_delay(200);
  4012fc:	20c8      	movs	r0, #200	; 0xc8
  4012fe:	47a8      	blx	r5
	reg = 0x81;
  401300:	2381      	movs	r3, #129	; 0x81
  401302:	f88d 300a 	strb.w	r3, [sp, #10]
	param = 0x0;
  401306:	f88d 400b 	strb.w	r4, [sp, #11]
  40130a:	2610      	movs	r6, #16
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  40130c:	f04f 0801 	mov.w	r8, #1
  401310:	4f4b      	ldr	r7, [pc, #300]	; (401440 <ili9488_init+0x19c>)
		for(j = 0; j < 0xFF; j++);
  401312:	4625      	mov	r5, r4
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  401314:	4642      	mov	r2, r8
  401316:	f10d 010a 	add.w	r1, sp, #10
  40131a:	20fb      	movs	r0, #251	; 0xfb
  40131c:	47b8      	blx	r7
		reg++;
  40131e:	f89d 300a 	ldrb.w	r3, [sp, #10]
  401322:	3301      	adds	r3, #1
  401324:	f88d 300a 	strb.w	r3, [sp, #10]
		for(j = 0; j < 0xFF; j++);
  401328:	9503      	str	r5, [sp, #12]
  40132a:	9b03      	ldr	r3, [sp, #12]
  40132c:	2bfe      	cmp	r3, #254	; 0xfe
  40132e:	d805      	bhi.n	40133c <ili9488_init+0x98>
  401330:	9b03      	ldr	r3, [sp, #12]
  401332:	3301      	adds	r3, #1
  401334:	9303      	str	r3, [sp, #12]
  401336:	9b03      	ldr	r3, [sp, #12]
  401338:	2bfe      	cmp	r3, #254	; 0xfe
  40133a:	d9f9      	bls.n	401330 <ili9488_init+0x8c>
		ili9488_write_register(ILI9488_CMD_READ_ID4, 0, 0);
  40133c:	462a      	mov	r2, r5
  40133e:	4629      	mov	r1, r5
  401340:	20d3      	movs	r0, #211	; 0xd3
  401342:	47b8      	blx	r7
			pio_set_pin_high(LCD_SPI_CDS_PIO);
  401344:	2006      	movs	r0, #6
  401346:	4b40      	ldr	r3, [pc, #256]	; (401448 <ili9488_init+0x1a4>)
  401348:	4798      	blx	r3
			spi_read_packet(BOARD_ILI9488_SPI, &chipidBuf, 1);
  40134a:	4642      	mov	r2, r8
  40134c:	f10d 0109 	add.w	r1, sp, #9
  401350:	4836      	ldr	r0, [pc, #216]	; (40142c <ili9488_init+0x188>)
  401352:	4b3e      	ldr	r3, [pc, #248]	; (40144c <ili9488_init+0x1a8>)
  401354:	4798      	blx	r3
			for(j = 0; j < 0xFF; j++);
  401356:	9503      	str	r5, [sp, #12]
  401358:	9b03      	ldr	r3, [sp, #12]
  40135a:	2bfe      	cmp	r3, #254	; 0xfe
  40135c:	d805      	bhi.n	40136a <ili9488_init+0xc6>
  40135e:	9b03      	ldr	r3, [sp, #12]
  401360:	3301      	adds	r3, #1
  401362:	9303      	str	r3, [sp, #12]
  401364:	9b03      	ldr	r3, [sp, #12]
  401366:	2bfe      	cmp	r3, #254	; 0xfe
  401368:	d9f9      	bls.n	40135e <ili9488_init+0xba>
		chipid |= (chipidBuf & 0xFF) << ((i - 1) << 3);
  40136a:	f89d 3009 	ldrb.w	r3, [sp, #9]
  40136e:	40b3      	lsls	r3, r6
  401370:	431c      	orrs	r4, r3
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &param, 1);
  401372:	4642      	mov	r2, r8
  401374:	f10d 010b 	add.w	r1, sp, #11
  401378:	20fb      	movs	r0, #251	; 0xfb
  40137a:	47b8      	blx	r7
		for(j = 0; j < 0xFFF; j++);
  40137c:	9503      	str	r5, [sp, #12]
  40137e:	9a03      	ldr	r2, [sp, #12]
  401380:	f640 73fe 	movw	r3, #4094	; 0xffe
  401384:	429a      	cmp	r2, r3
  401386:	d806      	bhi.n	401396 <ili9488_init+0xf2>
  401388:	461a      	mov	r2, r3
  40138a:	9b03      	ldr	r3, [sp, #12]
  40138c:	3301      	adds	r3, #1
  40138e:	9303      	str	r3, [sp, #12]
  401390:	9b03      	ldr	r3, [sp, #12]
  401392:	4293      	cmp	r3, r2
  401394:	d9f9      	bls.n	40138a <ili9488_init+0xe6>
  401396:	3e08      	subs	r6, #8
	for (i = 3; i > 0; i--) {
  401398:	f116 0f08 	cmn.w	r6, #8
  40139c:	d1ba      	bne.n	401314 <ili9488_init+0x70>
	if (chipid != ILI9488_DEVICE_CODE) {
  40139e:	f249 4388 	movw	r3, #38024	; 0x9488
  4013a2:	429c      	cmp	r4, r3
  4013a4:	d003      	beq.n	4013ae <ili9488_init+0x10a>
		return 1;
  4013a6:	2001      	movs	r0, #1
}
  4013a8:	b007      	add	sp, #28
  4013aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	param = 0x48;
  4013ae:	ad06      	add	r5, sp, #24
  4013b0:	2348      	movs	r3, #72	; 0x48
  4013b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  4013b6:	2201      	movs	r2, #1
  4013b8:	4629      	mov	r1, r5
  4013ba:	2036      	movs	r0, #54	; 0x36
  4013bc:	4e20      	ldr	r6, [pc, #128]	; (401440 <ili9488_init+0x19c>)
  4013be:	47b0      	blx	r6
	ili9488_delay(100);
  4013c0:	2064      	movs	r0, #100	; 0x64
  4013c2:	4c20      	ldr	r4, [pc, #128]	; (401444 <ili9488_init+0x1a0>)
  4013c4:	47a0      	blx	r4
	param = 0x04;
  4013c6:	2304      	movs	r3, #4
  4013c8:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  4013cc:	2201      	movs	r2, #1
  4013ce:	4629      	mov	r1, r5
  4013d0:	20cf      	movs	r0, #207	; 0xcf
  4013d2:	47b0      	blx	r6
	ili9488_delay(100);
  4013d4:	2064      	movs	r0, #100	; 0x64
  4013d6:	47a0      	blx	r4
	param = 0x06;
  4013d8:	2306      	movs	r3, #6
  4013da:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  4013de:	2201      	movs	r2, #1
  4013e0:	4629      	mov	r1, r5
  4013e2:	203a      	movs	r0, #58	; 0x3a
  4013e4:	47b0      	blx	r6
	ili9488_delay(100);
  4013e6:	2064      	movs	r0, #100	; 0x64
  4013e8:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NORMAL_DISP_MODE_ON, 0, 0);
  4013ea:	2200      	movs	r2, #0
  4013ec:	4611      	mov	r1, r2
  4013ee:	2013      	movs	r0, #19
  4013f0:	47b0      	blx	r6
	ili9488_delay(100);
  4013f2:	2064      	movs	r0, #100	; 0x64
  4013f4:	47a0      	blx	r4
	ili9488_display_on();
  4013f6:	4b16      	ldr	r3, [pc, #88]	; (401450 <ili9488_init+0x1ac>)
  4013f8:	4798      	blx	r3
	ili9488_delay(100);
  4013fa:	2064      	movs	r0, #100	; 0x64
  4013fc:	47a0      	blx	r4
	ili9488_set_display_direction(LANDSCAPE);
  4013fe:	2000      	movs	r0, #0
  401400:	4b14      	ldr	r3, [pc, #80]	; (401454 <ili9488_init+0x1b0>)
  401402:	4798      	blx	r3
	ili9488_delay(100);
  401404:	2064      	movs	r0, #100	; 0x64
  401406:	47a0      	blx	r4
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  401408:	f8b9 3004 	ldrh.w	r3, [r9, #4]
  40140c:	f8b9 2000 	ldrh.w	r2, [r9]
  401410:	2100      	movs	r1, #0
  401412:	4608      	mov	r0, r1
  401414:	4c10      	ldr	r4, [pc, #64]	; (401458 <ili9488_init+0x1b4>)
  401416:	47a0      	blx	r4
	ili9488_set_foreground_color(p_opt->foreground_color);
  401418:	f8d9 0008 	ldr.w	r0, [r9, #8]
  40141c:	4b0f      	ldr	r3, [pc, #60]	; (40145c <ili9488_init+0x1b8>)
  40141e:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  401420:	2100      	movs	r1, #0
  401422:	4608      	mov	r0, r1
  401424:	4b0e      	ldr	r3, [pc, #56]	; (401460 <ili9488_init+0x1bc>)
  401426:	4798      	blx	r3
	return 0;
  401428:	2000      	movs	r0, #0
  40142a:	e7bd      	b.n	4013a8 <ili9488_init+0x104>
  40142c:	40008000 	.word	0x40008000
  401430:	00400b1d 	.word	0x00400b1d
  401434:	01312d00 	.word	0x01312d00
  401438:	00401b25 	.word	0x00401b25
  40143c:	00400bf1 	.word	0x00400bf1
  401440:	00401089 	.word	0x00401089
  401444:	0040113d 	.word	0x0040113d
  401448:	00401705 	.word	0x00401705
  40144c:	00400c57 	.word	0x00400c57
  401450:	00401205 	.word	0x00401205
  401454:	00401159 	.word	0x00401159
  401458:	00401185 	.word	0x00401185
  40145c:	00401219 	.word	0x00401219
  401460:	00401241 	.word	0x00401241
  401464:	00400b71 	.word	0x00400b71

00401468 <ili9488_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili9488_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  401468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40146c:	b084      	sub	sp, #16
  40146e:	9003      	str	r0, [sp, #12]
  401470:	9102      	str	r1, [sp, #8]
  401472:	9201      	str	r2, [sp, #4]
  401474:	aa04      	add	r2, sp, #16
  401476:	f842 3d10 	str.w	r3, [r2, #-16]!
	uint32_t size, blocks;

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  40147a:	4613      	mov	r3, r2
  40147c:	aa01      	add	r2, sp, #4
  40147e:	a902      	add	r1, sp, #8
  401480:	a803      	add	r0, sp, #12
  401482:	4c22      	ldr	r4, [pc, #136]	; (40150c <ili9488_draw_filled_rectangle+0xa4>)
  401484:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1, (ul_y2 - ul_y1) + 1);
  401486:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  40148a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  40148e:	9b00      	ldr	r3, [sp, #0]
  401490:	3301      	adds	r3, #1
  401492:	1a5b      	subs	r3, r3, r1
  401494:	9a01      	ldr	r2, [sp, #4]
  401496:	3201      	adds	r2, #1
  401498:	1a12      	subs	r2, r2, r0
  40149a:	b29b      	uxth	r3, r3
  40149c:	b292      	uxth	r2, r2
  40149e:	4c1c      	ldr	r4, [pc, #112]	; (401510 <ili9488_draw_filled_rectangle+0xa8>)
  4014a0:	47a0      	blx	r4

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  4014a2:	4b1c      	ldr	r3, [pc, #112]	; (401514 <ili9488_draw_filled_rectangle+0xac>)
  4014a4:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  4014a6:	9903      	ldr	r1, [sp, #12]
  4014a8:	9d01      	ldr	r5, [sp, #4]
  4014aa:	1a69      	subs	r1, r5, r1
  4014ac:	9d00      	ldr	r5, [sp, #0]
  4014ae:	3501      	adds	r5, #1
  4014b0:	9b02      	ldr	r3, [sp, #8]
  4014b2:	1aed      	subs	r5, r5, r3
  4014b4:	fb01 5505 	mla	r5, r1, r5, r5
	/* Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  4014b8:	4b17      	ldr	r3, [pc, #92]	; (401518 <ili9488_draw_filled_rectangle+0xb0>)
  4014ba:	fba3 2305 	umull	r2, r3, r3, r5
  4014be:	0a1b      	lsrs	r3, r3, #8
	while (blocks--) {
  4014c0:	b163      	cbz	r3, 4014dc <ili9488_draw_filled_rectangle+0x74>
  4014c2:	1e5c      	subs	r4, r3, #1
		ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT);
  4014c4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 401520 <ili9488_draw_filled_rectangle+0xb8>
  4014c8:	f44f 7770 	mov.w	r7, #960	; 0x3c0
  4014cc:	4e13      	ldr	r6, [pc, #76]	; (40151c <ili9488_draw_filled_rectangle+0xb4>)
  4014ce:	4639      	mov	r1, r7
  4014d0:	4640      	mov	r0, r8
  4014d2:	47b0      	blx	r6
	while (blocks--) {
  4014d4:	3c01      	subs	r4, #1
  4014d6:	f1b4 3fff 	cmp.w	r4, #4294967295
  4014da:	d1f8      	bne.n	4014ce <ili9488_draw_filled_rectangle+0x66>
	}

	/* Send remaining pixels */
	ili9488_write_ram_buffer(g_ul_pixel_cache, (size % LCD_DATA_CACHE_SIZE) * LCD_DATA_COLOR_UNIT);
  4014dc:	490e      	ldr	r1, [pc, #56]	; (401518 <ili9488_draw_filled_rectangle+0xb0>)
  4014de:	fba1 3105 	umull	r3, r1, r1, r5
  4014e2:	0a09      	lsrs	r1, r1, #8
  4014e4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4014e8:	eba5 1181 	sub.w	r1, r5, r1, lsl #6
  4014ec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4014f0:	480b      	ldr	r0, [pc, #44]	; (401520 <ili9488_draw_filled_rectangle+0xb8>)
  4014f2:	4b0a      	ldr	r3, [pc, #40]	; (40151c <ili9488_draw_filled_rectangle+0xb4>)
  4014f4:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  4014f6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4014fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4014fe:	2100      	movs	r1, #0
  401500:	4608      	mov	r0, r1
  401502:	4c03      	ldr	r4, [pc, #12]	; (401510 <ili9488_draw_filled_rectangle+0xa8>)
  401504:	47a0      	blx	r4

}
  401506:	b004      	add	sp, #16
  401508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40150c:	00400ff5 	.word	0x00400ff5
  401510:	00401185 	.word	0x00401185
  401514:	0040104d 	.word	0x0040104d
  401518:	cccccccd 	.word	0xcccccccd
  40151c:	004010fd 	.word	0x004010fd
  401520:	204009dc 	.word	0x204009dc

00401524 <ili9488_draw_rectangle>:
{
  401524:	b510      	push	{r4, lr}
  401526:	b084      	sub	sp, #16
  401528:	9003      	str	r0, [sp, #12]
  40152a:	9102      	str	r1, [sp, #8]
  40152c:	9201      	str	r2, [sp, #4]
  40152e:	aa04      	add	r2, sp, #16
  401530:	f842 3d10 	str.w	r3, [r2, #-16]!
	ili9488_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  401534:	4613      	mov	r3, r2
  401536:	aa01      	add	r2, sp, #4
  401538:	a902      	add	r1, sp, #8
  40153a:	a803      	add	r0, sp, #12
  40153c:	4c0c      	ldr	r4, [pc, #48]	; (401570 <ili9488_draw_rectangle+0x4c>)
  40153e:	47a0      	blx	r4
	ili9488_draw_filled_rectangle(ul_x1, ul_y1, ul_x2, ul_y1);
  401540:	9b02      	ldr	r3, [sp, #8]
  401542:	9a01      	ldr	r2, [sp, #4]
  401544:	4619      	mov	r1, r3
  401546:	9803      	ldr	r0, [sp, #12]
  401548:	4c0a      	ldr	r4, [pc, #40]	; (401574 <ili9488_draw_rectangle+0x50>)
  40154a:	47a0      	blx	r4
	ili9488_draw_filled_rectangle(ul_x1, ul_y2, ul_x2, ul_y2);
  40154c:	9b00      	ldr	r3, [sp, #0]
  40154e:	9a01      	ldr	r2, [sp, #4]
  401550:	4619      	mov	r1, r3
  401552:	9803      	ldr	r0, [sp, #12]
  401554:	47a0      	blx	r4
	ili9488_draw_filled_rectangle(ul_x1, ul_y1, ul_x1, ul_y2);
  401556:	9b00      	ldr	r3, [sp, #0]
  401558:	9a03      	ldr	r2, [sp, #12]
  40155a:	9902      	ldr	r1, [sp, #8]
  40155c:	4610      	mov	r0, r2
  40155e:	47a0      	blx	r4
	ili9488_draw_filled_rectangle(ul_x2, ul_y1, ul_x2, ul_y2);
  401560:	9b00      	ldr	r3, [sp, #0]
  401562:	9a01      	ldr	r2, [sp, #4]
  401564:	9902      	ldr	r1, [sp, #8]
  401566:	4610      	mov	r0, r2
  401568:	47a0      	blx	r4
}
  40156a:	b004      	add	sp, #16
  40156c:	bd10      	pop	{r4, pc}
  40156e:	bf00      	nop
  401570:	00400ff5 	.word	0x00400ff5
  401574:	00401469 	.word	0x00401469

00401578 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401578:	6301      	str	r1, [r0, #48]	; 0x30
  40157a:	4770      	bx	lr

0040157c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40157c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40157e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401582:	d03a      	beq.n	4015fa <pio_set_peripheral+0x7e>
  401584:	d813      	bhi.n	4015ae <pio_set_peripheral+0x32>
  401586:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40158a:	d025      	beq.n	4015d8 <pio_set_peripheral+0x5c>
  40158c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401590:	d10a      	bne.n	4015a8 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401592:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401594:	4313      	orrs	r3, r2
  401596:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401598:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40159a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40159c:	400b      	ands	r3, r1
  40159e:	ea23 0302 	bic.w	r3, r3, r2
  4015a2:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4015a4:	6042      	str	r2, [r0, #4]
  4015a6:	4770      	bx	lr
	switch (ul_type) {
  4015a8:	2900      	cmp	r1, #0
  4015aa:	d1fb      	bne.n	4015a4 <pio_set_peripheral+0x28>
  4015ac:	4770      	bx	lr
  4015ae:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4015b2:	d021      	beq.n	4015f8 <pio_set_peripheral+0x7c>
  4015b4:	d809      	bhi.n	4015ca <pio_set_peripheral+0x4e>
  4015b6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4015ba:	d1f3      	bne.n	4015a4 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4015bc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4015be:	4313      	orrs	r3, r2
  4015c0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4015c2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4015c4:	4313      	orrs	r3, r2
  4015c6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4015c8:	e7ec      	b.n	4015a4 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4015ca:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4015ce:	d013      	beq.n	4015f8 <pio_set_peripheral+0x7c>
  4015d0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4015d4:	d010      	beq.n	4015f8 <pio_set_peripheral+0x7c>
  4015d6:	e7e5      	b.n	4015a4 <pio_set_peripheral+0x28>
{
  4015d8:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4015da:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4015dc:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4015de:	43d3      	mvns	r3, r2
  4015e0:	4021      	ands	r1, r4
  4015e2:	461c      	mov	r4, r3
  4015e4:	4019      	ands	r1, r3
  4015e6:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4015e8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4015ea:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4015ec:	400b      	ands	r3, r1
  4015ee:	4023      	ands	r3, r4
  4015f0:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4015f2:	6042      	str	r2, [r0, #4]
}
  4015f4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4015f8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4015fa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4015fc:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4015fe:	400b      	ands	r3, r1
  401600:	ea23 0302 	bic.w	r3, r3, r2
  401604:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401606:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401608:	4313      	orrs	r3, r2
  40160a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40160c:	e7ca      	b.n	4015a4 <pio_set_peripheral+0x28>

0040160e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40160e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401610:	f012 0f01 	tst.w	r2, #1
  401614:	d10d      	bne.n	401632 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  401616:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401618:	f012 0f0a 	tst.w	r2, #10
  40161c:	d00b      	beq.n	401636 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40161e:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401620:	f012 0f02 	tst.w	r2, #2
  401624:	d109      	bne.n	40163a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  401626:	f012 0f08 	tst.w	r2, #8
  40162a:	d008      	beq.n	40163e <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40162c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  401630:	e005      	b.n	40163e <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  401632:	6641      	str	r1, [r0, #100]	; 0x64
  401634:	e7f0      	b.n	401618 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  401636:	6241      	str	r1, [r0, #36]	; 0x24
  401638:	e7f2      	b.n	401620 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  40163a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40163e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401640:	6001      	str	r1, [r0, #0]
  401642:	4770      	bx	lr

00401644 <pio_set_output>:
{
  401644:	b410      	push	{r4}
  401646:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401648:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40164a:	b94c      	cbnz	r4, 401660 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  40164c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40164e:	b14b      	cbz	r3, 401664 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401650:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  401652:	b94a      	cbnz	r2, 401668 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  401654:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401656:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401658:	6001      	str	r1, [r0, #0]
}
  40165a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40165e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401660:	6641      	str	r1, [r0, #100]	; 0x64
  401662:	e7f4      	b.n	40164e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401664:	6541      	str	r1, [r0, #84]	; 0x54
  401666:	e7f4      	b.n	401652 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401668:	6301      	str	r1, [r0, #48]	; 0x30
  40166a:	e7f4      	b.n	401656 <pio_set_output+0x12>

0040166c <pio_configure>:
{
  40166c:	b570      	push	{r4, r5, r6, lr}
  40166e:	b082      	sub	sp, #8
  401670:	4605      	mov	r5, r0
  401672:	4616      	mov	r6, r2
  401674:	461c      	mov	r4, r3
	switch (ul_type) {
  401676:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40167a:	d014      	beq.n	4016a6 <pio_configure+0x3a>
  40167c:	d90a      	bls.n	401694 <pio_configure+0x28>
  40167e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401682:	d024      	beq.n	4016ce <pio_configure+0x62>
  401684:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401688:	d021      	beq.n	4016ce <pio_configure+0x62>
  40168a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40168e:	d017      	beq.n	4016c0 <pio_configure+0x54>
		return 0;
  401690:	2000      	movs	r0, #0
  401692:	e01a      	b.n	4016ca <pio_configure+0x5e>
	switch (ul_type) {
  401694:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401698:	d005      	beq.n	4016a6 <pio_configure+0x3a>
  40169a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40169e:	d002      	beq.n	4016a6 <pio_configure+0x3a>
  4016a0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4016a4:	d1f4      	bne.n	401690 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4016a6:	4632      	mov	r2, r6
  4016a8:	4628      	mov	r0, r5
  4016aa:	4b11      	ldr	r3, [pc, #68]	; (4016f0 <pio_configure+0x84>)
  4016ac:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4016ae:	f014 0f01 	tst.w	r4, #1
  4016b2:	d102      	bne.n	4016ba <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  4016b4:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  4016b6:	2001      	movs	r0, #1
  4016b8:	e007      	b.n	4016ca <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  4016ba:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  4016bc:	2001      	movs	r0, #1
  4016be:	e004      	b.n	4016ca <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4016c0:	461a      	mov	r2, r3
  4016c2:	4631      	mov	r1, r6
  4016c4:	4b0b      	ldr	r3, [pc, #44]	; (4016f4 <pio_configure+0x88>)
  4016c6:	4798      	blx	r3
	return 1;
  4016c8:	2001      	movs	r0, #1
}
  4016ca:	b002      	add	sp, #8
  4016cc:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4016ce:	f004 0301 	and.w	r3, r4, #1
  4016d2:	9300      	str	r3, [sp, #0]
  4016d4:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4016d8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4016dc:	bf14      	ite	ne
  4016de:	2200      	movne	r2, #0
  4016e0:	2201      	moveq	r2, #1
  4016e2:	4631      	mov	r1, r6
  4016e4:	4628      	mov	r0, r5
  4016e6:	4c04      	ldr	r4, [pc, #16]	; (4016f8 <pio_configure+0x8c>)
  4016e8:	47a0      	blx	r4
	return 1;
  4016ea:	2001      	movs	r0, #1
		break;
  4016ec:	e7ed      	b.n	4016ca <pio_configure+0x5e>
  4016ee:	bf00      	nop
  4016f0:	0040157d 	.word	0x0040157d
  4016f4:	0040160f 	.word	0x0040160f
  4016f8:	00401645 	.word	0x00401645

004016fc <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4016fc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4016fe:	4770      	bx	lr

00401700 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401700:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401702:	4770      	bx	lr

00401704 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401704:	4b05      	ldr	r3, [pc, #20]	; (40171c <pio_set_pin_high+0x18>)
  401706:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  40170a:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  40170c:	f000 001f 	and.w	r0, r0, #31
  401710:	2201      	movs	r2, #1
  401712:	fa02 f000 	lsl.w	r0, r2, r0
  401716:	6318      	str	r0, [r3, #48]	; 0x30
  401718:	4770      	bx	lr
  40171a:	bf00      	nop
  40171c:	00200707 	.word	0x00200707

00401720 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401720:	4b05      	ldr	r3, [pc, #20]	; (401738 <pio_set_pin_low+0x18>)
  401722:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  401726:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  401728:	f000 001f 	and.w	r0, r0, #31
  40172c:	2201      	movs	r2, #1
  40172e:	fa02 f000 	lsl.w	r0, r2, r0
  401732:	6358      	str	r0, [r3, #52]	; 0x34
  401734:	4770      	bx	lr
  401736:	bf00      	nop
  401738:	00200707 	.word	0x00200707

0040173c <pio_configure_pin>:
{
  40173c:	b570      	push	{r4, r5, r6, lr}
  40173e:	b082      	sub	sp, #8
  401740:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401742:	4c46      	ldr	r4, [pc, #280]	; (40185c <pio_configure_pin+0x120>)
  401744:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  401748:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  40174a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40174e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401752:	d059      	beq.n	401808 <pio_configure_pin+0xcc>
  401754:	d80a      	bhi.n	40176c <pio_configure_pin+0x30>
  401756:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40175a:	d02f      	beq.n	4017bc <pio_configure_pin+0x80>
  40175c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401760:	d03f      	beq.n	4017e2 <pio_configure_pin+0xa6>
  401762:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401766:	d016      	beq.n	401796 <pio_configure_pin+0x5a>
		return 0;
  401768:	2000      	movs	r0, #0
  40176a:	e012      	b.n	401792 <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  40176c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401770:	d05d      	beq.n	40182e <pio_configure_pin+0xf2>
  401772:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401776:	d05a      	beq.n	40182e <pio_configure_pin+0xf2>
  401778:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40177c:	d1f4      	bne.n	401768 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40177e:	f000 011f 	and.w	r1, r0, #31
  401782:	2601      	movs	r6, #1
  401784:	462a      	mov	r2, r5
  401786:	fa06 f101 	lsl.w	r1, r6, r1
  40178a:	4620      	mov	r0, r4
  40178c:	4b34      	ldr	r3, [pc, #208]	; (401860 <pio_configure_pin+0x124>)
  40178e:	4798      	blx	r3
	return 1;
  401790:	4630      	mov	r0, r6
}
  401792:	b002      	add	sp, #8
  401794:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401796:	f000 001f 	and.w	r0, r0, #31
  40179a:	2601      	movs	r6, #1
  40179c:	4086      	lsls	r6, r0
  40179e:	4632      	mov	r2, r6
  4017a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4017a4:	4620      	mov	r0, r4
  4017a6:	4b2f      	ldr	r3, [pc, #188]	; (401864 <pio_configure_pin+0x128>)
  4017a8:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4017aa:	f015 0f01 	tst.w	r5, #1
  4017ae:	d102      	bne.n	4017b6 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  4017b0:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4017b2:	2001      	movs	r0, #1
  4017b4:	e7ed      	b.n	401792 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4017b6:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4017b8:	2001      	movs	r0, #1
  4017ba:	e7ea      	b.n	401792 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4017bc:	f000 001f 	and.w	r0, r0, #31
  4017c0:	2601      	movs	r6, #1
  4017c2:	4086      	lsls	r6, r0
  4017c4:	4632      	mov	r2, r6
  4017c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4017ca:	4620      	mov	r0, r4
  4017cc:	4b25      	ldr	r3, [pc, #148]	; (401864 <pio_configure_pin+0x128>)
  4017ce:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4017d0:	f015 0f01 	tst.w	r5, #1
  4017d4:	d102      	bne.n	4017dc <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  4017d6:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4017d8:	2001      	movs	r0, #1
  4017da:	e7da      	b.n	401792 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4017dc:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4017de:	2001      	movs	r0, #1
  4017e0:	e7d7      	b.n	401792 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4017e2:	f000 001f 	and.w	r0, r0, #31
  4017e6:	2601      	movs	r6, #1
  4017e8:	4086      	lsls	r6, r0
  4017ea:	4632      	mov	r2, r6
  4017ec:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4017f0:	4620      	mov	r0, r4
  4017f2:	4b1c      	ldr	r3, [pc, #112]	; (401864 <pio_configure_pin+0x128>)
  4017f4:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4017f6:	f015 0f01 	tst.w	r5, #1
  4017fa:	d102      	bne.n	401802 <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  4017fc:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4017fe:	2001      	movs	r0, #1
  401800:	e7c7      	b.n	401792 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401802:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401804:	2001      	movs	r0, #1
  401806:	e7c4      	b.n	401792 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401808:	f000 001f 	and.w	r0, r0, #31
  40180c:	2601      	movs	r6, #1
  40180e:	4086      	lsls	r6, r0
  401810:	4632      	mov	r2, r6
  401812:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401816:	4620      	mov	r0, r4
  401818:	4b12      	ldr	r3, [pc, #72]	; (401864 <pio_configure_pin+0x128>)
  40181a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40181c:	f015 0f01 	tst.w	r5, #1
  401820:	d102      	bne.n	401828 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  401822:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401824:	2001      	movs	r0, #1
  401826:	e7b4      	b.n	401792 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401828:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40182a:	2001      	movs	r0, #1
  40182c:	e7b1      	b.n	401792 <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40182e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401832:	f000 011f 	and.w	r1, r0, #31
  401836:	2601      	movs	r6, #1
  401838:	ea05 0306 	and.w	r3, r5, r6
  40183c:	9300      	str	r3, [sp, #0]
  40183e:	f3c5 0380 	ubfx	r3, r5, #2, #1
  401842:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401846:	bf14      	ite	ne
  401848:	2200      	movne	r2, #0
  40184a:	2201      	moveq	r2, #1
  40184c:	fa06 f101 	lsl.w	r1, r6, r1
  401850:	4620      	mov	r0, r4
  401852:	4c05      	ldr	r4, [pc, #20]	; (401868 <pio_configure_pin+0x12c>)
  401854:	47a0      	blx	r4
	return 1;
  401856:	4630      	mov	r0, r6
		break;
  401858:	e79b      	b.n	401792 <pio_configure_pin+0x56>
  40185a:	bf00      	nop
  40185c:	00200707 	.word	0x00200707
  401860:	0040160f 	.word	0x0040160f
  401864:	0040157d 	.word	0x0040157d
  401868:	00401645 	.word	0x00401645

0040186c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40186c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401870:	4604      	mov	r4, r0
  401872:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401874:	4b0e      	ldr	r3, [pc, #56]	; (4018b0 <pio_handler_process+0x44>)
  401876:	4798      	blx	r3
  401878:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40187a:	4620      	mov	r0, r4
  40187c:	4b0d      	ldr	r3, [pc, #52]	; (4018b4 <pio_handler_process+0x48>)
  40187e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401880:	4005      	ands	r5, r0
  401882:	d013      	beq.n	4018ac <pio_handler_process+0x40>
  401884:	4c0c      	ldr	r4, [pc, #48]	; (4018b8 <pio_handler_process+0x4c>)
  401886:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40188a:	e003      	b.n	401894 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40188c:	42b4      	cmp	r4, r6
  40188e:	d00d      	beq.n	4018ac <pio_handler_process+0x40>
  401890:	3410      	adds	r4, #16
		while (status != 0) {
  401892:	b15d      	cbz	r5, 4018ac <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401894:	6820      	ldr	r0, [r4, #0]
  401896:	4540      	cmp	r0, r8
  401898:	d1f8      	bne.n	40188c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40189a:	6861      	ldr	r1, [r4, #4]
  40189c:	4229      	tst	r1, r5
  40189e:	d0f5      	beq.n	40188c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4018a0:	68e3      	ldr	r3, [r4, #12]
  4018a2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4018a4:	6863      	ldr	r3, [r4, #4]
  4018a6:	ea25 0503 	bic.w	r5, r5, r3
  4018aa:	e7ef      	b.n	40188c <pio_handler_process+0x20>
  4018ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4018b0:	004016fd 	.word	0x004016fd
  4018b4:	00401701 	.word	0x00401701
  4018b8:	20400d9c 	.word	0x20400d9c

004018bc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4018bc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4018be:	210a      	movs	r1, #10
  4018c0:	4801      	ldr	r0, [pc, #4]	; (4018c8 <PIOA_Handler+0xc>)
  4018c2:	4b02      	ldr	r3, [pc, #8]	; (4018cc <PIOA_Handler+0x10>)
  4018c4:	4798      	blx	r3
  4018c6:	bd08      	pop	{r3, pc}
  4018c8:	400e0e00 	.word	0x400e0e00
  4018cc:	0040186d 	.word	0x0040186d

004018d0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4018d0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4018d2:	210b      	movs	r1, #11
  4018d4:	4801      	ldr	r0, [pc, #4]	; (4018dc <PIOB_Handler+0xc>)
  4018d6:	4b02      	ldr	r3, [pc, #8]	; (4018e0 <PIOB_Handler+0x10>)
  4018d8:	4798      	blx	r3
  4018da:	bd08      	pop	{r3, pc}
  4018dc:	400e1000 	.word	0x400e1000
  4018e0:	0040186d 	.word	0x0040186d

004018e4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4018e4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4018e6:	210c      	movs	r1, #12
  4018e8:	4801      	ldr	r0, [pc, #4]	; (4018f0 <PIOC_Handler+0xc>)
  4018ea:	4b02      	ldr	r3, [pc, #8]	; (4018f4 <PIOC_Handler+0x10>)
  4018ec:	4798      	blx	r3
  4018ee:	bd08      	pop	{r3, pc}
  4018f0:	400e1200 	.word	0x400e1200
  4018f4:	0040186d 	.word	0x0040186d

004018f8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4018f8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4018fa:	2110      	movs	r1, #16
  4018fc:	4801      	ldr	r0, [pc, #4]	; (401904 <PIOD_Handler+0xc>)
  4018fe:	4b02      	ldr	r3, [pc, #8]	; (401908 <PIOD_Handler+0x10>)
  401900:	4798      	blx	r3
  401902:	bd08      	pop	{r3, pc}
  401904:	400e1400 	.word	0x400e1400
  401908:	0040186d 	.word	0x0040186d

0040190c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40190c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40190e:	2111      	movs	r1, #17
  401910:	4801      	ldr	r0, [pc, #4]	; (401918 <PIOE_Handler+0xc>)
  401912:	4b02      	ldr	r3, [pc, #8]	; (40191c <PIOE_Handler+0x10>)
  401914:	4798      	blx	r3
  401916:	bd08      	pop	{r3, pc}
  401918:	400e1600 	.word	0x400e1600
  40191c:	0040186d 	.word	0x0040186d

00401920 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401920:	2803      	cmp	r0, #3
  401922:	d011      	beq.n	401948 <pmc_mck_set_division+0x28>
  401924:	2804      	cmp	r0, #4
  401926:	d012      	beq.n	40194e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401928:	2802      	cmp	r0, #2
  40192a:	bf0c      	ite	eq
  40192c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401930:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401932:	4a08      	ldr	r2, [pc, #32]	; (401954 <pmc_mck_set_division+0x34>)
  401934:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40193a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40193c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40193e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401940:	f013 0f08 	tst.w	r3, #8
  401944:	d0fb      	beq.n	40193e <pmc_mck_set_division+0x1e>
}
  401946:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401948:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40194c:	e7f1      	b.n	401932 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40194e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401952:	e7ee      	b.n	401932 <pmc_mck_set_division+0x12>
  401954:	400e0600 	.word	0x400e0600

00401958 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401958:	4a17      	ldr	r2, [pc, #92]	; (4019b8 <pmc_switch_mck_to_pllack+0x60>)
  40195a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40195c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401960:	4318      	orrs	r0, r3
  401962:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401964:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401966:	f013 0f08 	tst.w	r3, #8
  40196a:	d10a      	bne.n	401982 <pmc_switch_mck_to_pllack+0x2a>
  40196c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401970:	4911      	ldr	r1, [pc, #68]	; (4019b8 <pmc_switch_mck_to_pllack+0x60>)
  401972:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401974:	f012 0f08 	tst.w	r2, #8
  401978:	d103      	bne.n	401982 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40197a:	3b01      	subs	r3, #1
  40197c:	d1f9      	bne.n	401972 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40197e:	2001      	movs	r0, #1
  401980:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401982:	4a0d      	ldr	r2, [pc, #52]	; (4019b8 <pmc_switch_mck_to_pllack+0x60>)
  401984:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401986:	f023 0303 	bic.w	r3, r3, #3
  40198a:	f043 0302 	orr.w	r3, r3, #2
  40198e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401990:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401992:	f013 0f08 	tst.w	r3, #8
  401996:	d10a      	bne.n	4019ae <pmc_switch_mck_to_pllack+0x56>
  401998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40199c:	4906      	ldr	r1, [pc, #24]	; (4019b8 <pmc_switch_mck_to_pllack+0x60>)
  40199e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4019a0:	f012 0f08 	tst.w	r2, #8
  4019a4:	d105      	bne.n	4019b2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4019a6:	3b01      	subs	r3, #1
  4019a8:	d1f9      	bne.n	40199e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4019aa:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4019ac:	4770      	bx	lr
	return 0;
  4019ae:	2000      	movs	r0, #0
  4019b0:	4770      	bx	lr
  4019b2:	2000      	movs	r0, #0
  4019b4:	4770      	bx	lr
  4019b6:	bf00      	nop
  4019b8:	400e0600 	.word	0x400e0600

004019bc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4019bc:	b9a0      	cbnz	r0, 4019e8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4019be:	480e      	ldr	r0, [pc, #56]	; (4019f8 <pmc_switch_mainck_to_xtal+0x3c>)
  4019c0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4019c2:	0209      	lsls	r1, r1, #8
  4019c4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4019c6:	4a0d      	ldr	r2, [pc, #52]	; (4019fc <pmc_switch_mainck_to_xtal+0x40>)
  4019c8:	401a      	ands	r2, r3
  4019ca:	4b0d      	ldr	r3, [pc, #52]	; (401a00 <pmc_switch_mainck_to_xtal+0x44>)
  4019cc:	4313      	orrs	r3, r2
  4019ce:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4019d0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4019d2:	4602      	mov	r2, r0
  4019d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4019d6:	f013 0f01 	tst.w	r3, #1
  4019da:	d0fb      	beq.n	4019d4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4019dc:	4a06      	ldr	r2, [pc, #24]	; (4019f8 <pmc_switch_mainck_to_xtal+0x3c>)
  4019de:	6a11      	ldr	r1, [r2, #32]
  4019e0:	4b08      	ldr	r3, [pc, #32]	; (401a04 <pmc_switch_mainck_to_xtal+0x48>)
  4019e2:	430b      	orrs	r3, r1
  4019e4:	6213      	str	r3, [r2, #32]
  4019e6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4019e8:	4903      	ldr	r1, [pc, #12]	; (4019f8 <pmc_switch_mainck_to_xtal+0x3c>)
  4019ea:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4019ec:	4a06      	ldr	r2, [pc, #24]	; (401a08 <pmc_switch_mainck_to_xtal+0x4c>)
  4019ee:	401a      	ands	r2, r3
  4019f0:	4b06      	ldr	r3, [pc, #24]	; (401a0c <pmc_switch_mainck_to_xtal+0x50>)
  4019f2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4019f4:	620b      	str	r3, [r1, #32]
  4019f6:	4770      	bx	lr
  4019f8:	400e0600 	.word	0x400e0600
  4019fc:	ffc8fffc 	.word	0xffc8fffc
  401a00:	00370001 	.word	0x00370001
  401a04:	01370000 	.word	0x01370000
  401a08:	fec8fffc 	.word	0xfec8fffc
  401a0c:	01370002 	.word	0x01370002

00401a10 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401a10:	4b02      	ldr	r3, [pc, #8]	; (401a1c <pmc_osc_is_ready_mainck+0xc>)
  401a12:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401a14:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401a18:	4770      	bx	lr
  401a1a:	bf00      	nop
  401a1c:	400e0600 	.word	0x400e0600

00401a20 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401a20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401a24:	4b01      	ldr	r3, [pc, #4]	; (401a2c <pmc_disable_pllack+0xc>)
  401a26:	629a      	str	r2, [r3, #40]	; 0x28
  401a28:	4770      	bx	lr
  401a2a:	bf00      	nop
  401a2c:	400e0600 	.word	0x400e0600

00401a30 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401a30:	4b02      	ldr	r3, [pc, #8]	; (401a3c <pmc_is_locked_pllack+0xc>)
  401a32:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401a34:	f000 0002 	and.w	r0, r0, #2
  401a38:	4770      	bx	lr
  401a3a:	bf00      	nop
  401a3c:	400e0600 	.word	0x400e0600

00401a40 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  401a40:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  401a44:	4b05      	ldr	r3, [pc, #20]	; (401a5c <pmc_enable_periph_clk+0x1c>)
  401a46:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  401a4a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  401a4e:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  401a52:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401a56:	2000      	movs	r0, #0
  401a58:	4770      	bx	lr
  401a5a:	bf00      	nop
  401a5c:	400e0600 	.word	0x400e0600

00401a60 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  401a60:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  401a62:	4b07      	ldr	r3, [pc, #28]	; (401a80 <spi_enable_clock+0x20>)
  401a64:	4298      	cmp	r0, r3
  401a66:	d003      	beq.n	401a70 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  401a68:	4b06      	ldr	r3, [pc, #24]	; (401a84 <spi_enable_clock+0x24>)
  401a6a:	4298      	cmp	r0, r3
  401a6c:	d004      	beq.n	401a78 <spi_enable_clock+0x18>
  401a6e:	bd08      	pop	{r3, pc}
  401a70:	2015      	movs	r0, #21
  401a72:	4b05      	ldr	r3, [pc, #20]	; (401a88 <spi_enable_clock+0x28>)
  401a74:	4798      	blx	r3
  401a76:	bd08      	pop	{r3, pc}
  401a78:	202a      	movs	r0, #42	; 0x2a
  401a7a:	4b03      	ldr	r3, [pc, #12]	; (401a88 <spi_enable_clock+0x28>)
  401a7c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  401a7e:	e7f6      	b.n	401a6e <spi_enable_clock+0xe>
  401a80:	40008000 	.word	0x40008000
  401a84:	40058000 	.word	0x40058000
  401a88:	00401a41 	.word	0x00401a41

00401a8c <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  401a8c:	6843      	ldr	r3, [r0, #4]
  401a8e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  401a92:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  401a94:	6843      	ldr	r3, [r0, #4]
  401a96:	0409      	lsls	r1, r1, #16
  401a98:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  401a9c:	4319      	orrs	r1, r3
  401a9e:	6041      	str	r1, [r0, #4]
  401aa0:	4770      	bx	lr

00401aa2 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  401aa2:	6843      	ldr	r3, [r0, #4]
  401aa4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401aa8:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  401aaa:	6843      	ldr	r3, [r0, #4]
  401aac:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  401ab0:	6041      	str	r1, [r0, #4]
  401ab2:	4770      	bx	lr

00401ab4 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  401ab4:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  401ab6:	f643 2499 	movw	r4, #15001	; 0x3a99
  401aba:	6905      	ldr	r5, [r0, #16]
  401abc:	f015 0f02 	tst.w	r5, #2
  401ac0:	d103      	bne.n	401aca <spi_write+0x16>
		if (!timeout--) {
  401ac2:	3c01      	subs	r4, #1
  401ac4:	d1f9      	bne.n	401aba <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  401ac6:	2001      	movs	r0, #1
  401ac8:	e00c      	b.n	401ae4 <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
  401aca:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  401acc:	f014 0f02 	tst.w	r4, #2
  401ad0:	d006      	beq.n	401ae0 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  401ad2:	0412      	lsls	r2, r2, #16
  401ad4:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  401ad8:	4311      	orrs	r1, r2
		if (uc_last) {
  401ada:	b10b      	cbz	r3, 401ae0 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  401adc:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  401ae0:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  401ae2:	2000      	movs	r0, #0
}
  401ae4:	bc30      	pop	{r4, r5}
  401ae6:	4770      	bx	lr

00401ae8 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  401ae8:	b932      	cbnz	r2, 401af8 <spi_set_clock_polarity+0x10>
  401aea:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  401aee:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401af0:	f023 0301 	bic.w	r3, r3, #1
  401af4:	6303      	str	r3, [r0, #48]	; 0x30
  401af6:	4770      	bx	lr
  401af8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  401afc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401afe:	f043 0301 	orr.w	r3, r3, #1
  401b02:	6303      	str	r3, [r0, #48]	; 0x30
  401b04:	4770      	bx	lr

00401b06 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  401b06:	b932      	cbnz	r2, 401b16 <spi_set_clock_phase+0x10>
  401b08:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  401b0c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b0e:	f023 0302 	bic.w	r3, r3, #2
  401b12:	6303      	str	r3, [r0, #48]	; 0x30
  401b14:	4770      	bx	lr
  401b16:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  401b1a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b1c:	f043 0302 	orr.w	r3, r3, #2
  401b20:	6303      	str	r3, [r0, #48]	; 0x30
  401b22:	4770      	bx	lr

00401b24 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  401b24:	2a04      	cmp	r2, #4
  401b26:	d003      	beq.n	401b30 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  401b28:	b16a      	cbz	r2, 401b46 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  401b2a:	2a08      	cmp	r2, #8
  401b2c:	d016      	beq.n	401b5c <spi_configure_cs_behavior+0x38>
  401b2e:	4770      	bx	lr
  401b30:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401b34:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b36:	f023 0308 	bic.w	r3, r3, #8
  401b3a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  401b3c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b3e:	f043 0304 	orr.w	r3, r3, #4
  401b42:	6303      	str	r3, [r0, #48]	; 0x30
  401b44:	4770      	bx	lr
  401b46:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401b4a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b4c:	f023 0308 	bic.w	r3, r3, #8
  401b50:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  401b52:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b54:	f023 0304 	bic.w	r3, r3, #4
  401b58:	6303      	str	r3, [r0, #48]	; 0x30
  401b5a:	4770      	bx	lr
  401b5c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  401b60:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b62:	f043 0308 	orr.w	r3, r3, #8
  401b66:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  401b68:	e7e1      	b.n	401b2e <spi_configure_cs_behavior+0xa>

00401b6a <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  401b6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  401b6e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401b70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  401b74:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  401b76:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401b78:	431a      	orrs	r2, r3
  401b7a:	630a      	str	r2, [r1, #48]	; 0x30
  401b7c:	4770      	bx	lr

00401b7e <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  401b7e:	1e43      	subs	r3, r0, #1
  401b80:	4419      	add	r1, r3
  401b82:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  401b86:	1e43      	subs	r3, r0, #1
  401b88:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  401b8a:	bf94      	ite	ls
  401b8c:	b200      	sxthls	r0, r0
		return -1;
  401b8e:	f04f 30ff 	movhi.w	r0, #4294967295
}
  401b92:	4770      	bx	lr

00401b94 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  401b94:	b17a      	cbz	r2, 401bb6 <spi_set_baudrate_div+0x22>
{
  401b96:	b410      	push	{r4}
  401b98:	4614      	mov	r4, r2
  401b9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  401b9e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401ba0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  401ba4:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  401ba6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  401ba8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  401bac:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  401bae:	2000      	movs	r0, #0
}
  401bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
  401bb4:	4770      	bx	lr
        return -1;
  401bb6:	f04f 30ff 	mov.w	r0, #4294967295
  401bba:	4770      	bx	lr

00401bbc <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  401bbc:	b410      	push	{r4}
  401bbe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  401bc2:	6b08      	ldr	r0, [r1, #48]	; 0x30
  401bc4:	b280      	uxth	r0, r0
  401bc6:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401bc8:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  401bca:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  401bce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  401bd2:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  401bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
  401bd8:	4770      	bx	lr
	...

00401bdc <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401bdc:	4b28      	ldr	r3, [pc, #160]	; (401c80 <twihs_set_speed+0xa4>)
  401bde:	4299      	cmp	r1, r3
  401be0:	d84b      	bhi.n	401c7a <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401be2:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  401be6:	4299      	cmp	r1, r3
  401be8:	d92d      	bls.n	401c46 <twihs_set_speed+0x6a>
{
  401bea:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401bec:	4c25      	ldr	r4, [pc, #148]	; (401c84 <twihs_set_speed+0xa8>)
  401bee:	fba4 3402 	umull	r3, r4, r4, r2
  401bf2:	0ba4      	lsrs	r4, r4, #14
  401bf4:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401bf6:	4b24      	ldr	r3, [pc, #144]	; (401c88 <twihs_set_speed+0xac>)
  401bf8:	440b      	add	r3, r1
  401bfa:	009b      	lsls	r3, r3, #2
  401bfc:	fbb2 f2f3 	udiv	r2, r2, r3
  401c00:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c02:	2cff      	cmp	r4, #255	; 0xff
  401c04:	d91d      	bls.n	401c42 <twihs_set_speed+0x66>
  401c06:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  401c08:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  401c0a:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c0c:	2cff      	cmp	r4, #255	; 0xff
  401c0e:	d901      	bls.n	401c14 <twihs_set_speed+0x38>
  401c10:	2906      	cmp	r1, #6
  401c12:	d9f9      	bls.n	401c08 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c14:	2aff      	cmp	r2, #255	; 0xff
  401c16:	d907      	bls.n	401c28 <twihs_set_speed+0x4c>
  401c18:	2906      	cmp	r1, #6
  401c1a:	d805      	bhi.n	401c28 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  401c1c:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  401c1e:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c20:	2aff      	cmp	r2, #255	; 0xff
  401c22:	d901      	bls.n	401c28 <twihs_set_speed+0x4c>
  401c24:	2906      	cmp	r1, #6
  401c26:	d9f9      	bls.n	401c1c <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401c28:	0213      	lsls	r3, r2, #8
  401c2a:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  401c2c:	0409      	lsls	r1, r1, #16
  401c2e:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401c32:	430b      	orrs	r3, r1
  401c34:	b2e4      	uxtb	r4, r4
  401c36:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  401c38:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401c3a:	2000      	movs	r0, #0
}
  401c3c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c40:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401c42:	2100      	movs	r1, #0
  401c44:	e7e6      	b.n	401c14 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401c46:	0049      	lsls	r1, r1, #1
  401c48:	fbb2 f2f1 	udiv	r2, r2, r1
  401c4c:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c4e:	2aff      	cmp	r2, #255	; 0xff
  401c50:	d911      	bls.n	401c76 <twihs_set_speed+0x9a>
  401c52:	2300      	movs	r3, #0
			ckdiv++;
  401c54:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  401c56:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c58:	2aff      	cmp	r2, #255	; 0xff
  401c5a:	d901      	bls.n	401c60 <twihs_set_speed+0x84>
  401c5c:	2b06      	cmp	r3, #6
  401c5e:	d9f9      	bls.n	401c54 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401c60:	0211      	lsls	r1, r2, #8
  401c62:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  401c64:	041b      	lsls	r3, r3, #16
  401c66:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401c6a:	430b      	orrs	r3, r1
  401c6c:	b2d2      	uxtb	r2, r2
  401c6e:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  401c70:	6102      	str	r2, [r0, #16]
	return PASS;
  401c72:	2000      	movs	r0, #0
  401c74:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401c76:	2300      	movs	r3, #0
  401c78:	e7f2      	b.n	401c60 <twihs_set_speed+0x84>
		return FAIL;
  401c7a:	2001      	movs	r0, #1
  401c7c:	4770      	bx	lr
  401c7e:	bf00      	nop
  401c80:	00061a80 	.word	0x00061a80
  401c84:	057619f1 	.word	0x057619f1
  401c88:	3ffd1200 	.word	0x3ffd1200

00401c8c <twihs_master_init>:
{
  401c8c:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  401c8e:	f04f 32ff 	mov.w	r2, #4294967295
  401c92:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  401c94:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401c96:	2280      	movs	r2, #128	; 0x80
  401c98:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  401c9a:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401c9c:	2208      	movs	r2, #8
  401c9e:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401ca0:	2220      	movs	r2, #32
  401ca2:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401ca4:	2204      	movs	r2, #4
  401ca6:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401ca8:	680a      	ldr	r2, [r1, #0]
  401caa:	6849      	ldr	r1, [r1, #4]
  401cac:	4b03      	ldr	r3, [pc, #12]	; (401cbc <twihs_master_init+0x30>)
  401cae:	4798      	blx	r3
}
  401cb0:	2801      	cmp	r0, #1
  401cb2:	bf14      	ite	ne
  401cb4:	2000      	movne	r0, #0
  401cb6:	2001      	moveq	r0, #1
  401cb8:	bd08      	pop	{r3, pc}
  401cba:	bf00      	nop
  401cbc:	00401bdd 	.word	0x00401bdd

00401cc0 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  401cc0:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  401cc2:	2a00      	cmp	r2, #0
  401cc4:	d04c      	beq.n	401d60 <twihs_master_read+0xa0>
{
  401cc6:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401cc8:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401cca:	2600      	movs	r6, #0
  401ccc:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401cce:	684b      	ldr	r3, [r1, #4]
  401cd0:	021b      	lsls	r3, r3, #8
  401cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401cd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401cda:	7c0d      	ldrb	r5, [r1, #16]
  401cdc:	042d      	lsls	r5, r5, #16
  401cde:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  401ce2:	432b      	orrs	r3, r5
  401ce4:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401ce6:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401ce8:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401cea:	b15d      	cbz	r5, 401d04 <twihs_master_read+0x44>
	val = addr[0];
  401cec:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  401cee:	2d01      	cmp	r5, #1
  401cf0:	dd02      	ble.n	401cf8 <twihs_master_read+0x38>
		val |= addr[1];
  401cf2:	784e      	ldrb	r6, [r1, #1]
  401cf4:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  401cf8:	2d02      	cmp	r5, #2
  401cfa:	dd04      	ble.n	401d06 <twihs_master_read+0x46>
		val |= addr[2];
  401cfc:	7889      	ldrb	r1, [r1, #2]
  401cfe:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  401d02:	e000      	b.n	401d06 <twihs_master_read+0x46>
		return 0;
  401d04:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401d06:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401d08:	2301      	movs	r3, #1
  401d0a:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401d0c:	2502      	movs	r5, #2
  401d0e:	e012      	b.n	401d36 <twihs_master_read+0x76>
  401d10:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  401d12:	f013 0f02 	tst.w	r3, #2
  401d16:	d01b      	beq.n	401d50 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  401d18:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401d1a:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401d1c:	6a03      	ldr	r3, [r0, #32]
  401d1e:	f013 0f01 	tst.w	r3, #1
  401d22:	d0fb      	beq.n	401d1c <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  401d24:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  401d26:	2000      	movs	r0, #0
}
  401d28:	bc70      	pop	{r4, r5, r6}
  401d2a:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  401d2c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401d2e:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  401d32:	3a01      	subs	r2, #1
  401d34:	d0f2      	beq.n	401d1c <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401d36:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401d38:	f413 7f80 	tst.w	r3, #256	; 0x100
  401d3c:	d114      	bne.n	401d68 <twihs_master_read+0xa8>
  401d3e:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  401d42:	2a01      	cmp	r2, #1
  401d44:	d0e4      	beq.n	401d10 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  401d46:	f013 0f02 	tst.w	r3, #2
  401d4a:	d1ef      	bne.n	401d2c <twihs_master_read+0x6c>
	while (cnt > 0) {
  401d4c:	2a00      	cmp	r2, #0
  401d4e:	d0e5      	beq.n	401d1c <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401d50:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401d52:	f413 7f80 	tst.w	r3, #256	; 0x100
  401d56:	d105      	bne.n	401d64 <twihs_master_read+0xa4>
		if (!timeout--) {
  401d58:	3901      	subs	r1, #1
  401d5a:	d1f2      	bne.n	401d42 <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  401d5c:	2009      	movs	r0, #9
  401d5e:	e7e3      	b.n	401d28 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  401d60:	2001      	movs	r0, #1
  401d62:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401d64:	2005      	movs	r0, #5
  401d66:	e7df      	b.n	401d28 <twihs_master_read+0x68>
  401d68:	2005      	movs	r0, #5
  401d6a:	e7dd      	b.n	401d28 <twihs_master_read+0x68>

00401d6c <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  401d6c:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  401d6e:	2b00      	cmp	r3, #0
  401d70:	d043      	beq.n	401dfa <twihs_master_write+0x8e>
{
  401d72:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401d74:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401d76:	2600      	movs	r6, #0
  401d78:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401d7a:	7c0a      	ldrb	r2, [r1, #16]
  401d7c:	0412      	lsls	r2, r2, #16
  401d7e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401d82:	684d      	ldr	r5, [r1, #4]
  401d84:	022d      	lsls	r5, r5, #8
  401d86:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401d8a:	432a      	orrs	r2, r5
  401d8c:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401d8e:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401d90:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401d92:	b15d      	cbz	r5, 401dac <twihs_master_write+0x40>
	val = addr[0];
  401d94:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  401d96:	2d01      	cmp	r5, #1
  401d98:	dd02      	ble.n	401da0 <twihs_master_write+0x34>
		val |= addr[1];
  401d9a:	784e      	ldrb	r6, [r1, #1]
  401d9c:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  401da0:	2d02      	cmp	r5, #2
  401da2:	dd04      	ble.n	401dae <twihs_master_write+0x42>
		val |= addr[2];
  401da4:	7889      	ldrb	r1, [r1, #2]
  401da6:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401daa:	e000      	b.n	401dae <twihs_master_write+0x42>
		return 0;
  401dac:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401dae:	60c2      	str	r2, [r0, #12]
  401db0:	e004      	b.n	401dbc <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  401db2:	f814 2b01 	ldrb.w	r2, [r4], #1
  401db6:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401db8:	3b01      	subs	r3, #1
  401dba:	d00f      	beq.n	401ddc <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  401dbc:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401dbe:	f412 7f80 	tst.w	r2, #256	; 0x100
  401dc2:	d11e      	bne.n	401e02 <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  401dc4:	f012 0f04 	tst.w	r2, #4
  401dc8:	d1f3      	bne.n	401db2 <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  401dca:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401dcc:	f412 7f80 	tst.w	r2, #256	; 0x100
  401dd0:	d115      	bne.n	401dfe <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  401dd2:	f012 0f04 	tst.w	r2, #4
  401dd6:	d1ec      	bne.n	401db2 <twihs_master_write+0x46>
	while (cnt > 0) {
  401dd8:	2b00      	cmp	r3, #0
  401dda:	d1f6      	bne.n	401dca <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  401ddc:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401dde:	f413 7f80 	tst.w	r3, #256	; 0x100
  401de2:	d111      	bne.n	401e08 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  401de4:	f013 0f04 	tst.w	r3, #4
  401de8:	d0f8      	beq.n	401ddc <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401dea:	2302      	movs	r3, #2
  401dec:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401dee:	6a03      	ldr	r3, [r0, #32]
  401df0:	f013 0f01 	tst.w	r3, #1
  401df4:	d0fb      	beq.n	401dee <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  401df6:	2000      	movs	r0, #0
  401df8:	e004      	b.n	401e04 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  401dfa:	2001      	movs	r0, #1
  401dfc:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401dfe:	2005      	movs	r0, #5
  401e00:	e000      	b.n	401e04 <twihs_master_write+0x98>
  401e02:	2005      	movs	r0, #5
}
  401e04:	bc70      	pop	{r4, r5, r6}
  401e06:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401e08:	2005      	movs	r0, #5
  401e0a:	e7fb      	b.n	401e04 <twihs_master_write+0x98>

00401e0c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401e0c:	6943      	ldr	r3, [r0, #20]
  401e0e:	f013 0f02 	tst.w	r3, #2
  401e12:	d002      	beq.n	401e1a <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401e14:	61c1      	str	r1, [r0, #28]
	return 0;
  401e16:	2000      	movs	r0, #0
  401e18:	4770      	bx	lr
		return 1;
  401e1a:	2001      	movs	r0, #1
}
  401e1c:	4770      	bx	lr

00401e1e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401e1e:	6943      	ldr	r3, [r0, #20]
  401e20:	f013 0f01 	tst.w	r3, #1
  401e24:	d003      	beq.n	401e2e <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401e26:	6983      	ldr	r3, [r0, #24]
  401e28:	700b      	strb	r3, [r1, #0]
	return 0;
  401e2a:	2000      	movs	r0, #0
  401e2c:	4770      	bx	lr
		return 1;
  401e2e:	2001      	movs	r0, #1
}
  401e30:	4770      	bx	lr

00401e32 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401e32:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401e34:	010b      	lsls	r3, r1, #4
  401e36:	4293      	cmp	r3, r2
  401e38:	d914      	bls.n	401e64 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401e3a:	00c9      	lsls	r1, r1, #3
  401e3c:	084b      	lsrs	r3, r1, #1
  401e3e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401e42:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401e46:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401e48:	1e5c      	subs	r4, r3, #1
  401e4a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401e4e:	428c      	cmp	r4, r1
  401e50:	d901      	bls.n	401e56 <usart_set_async_baudrate+0x24>
		return 1;
  401e52:	2001      	movs	r0, #1
  401e54:	e017      	b.n	401e86 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401e56:	6841      	ldr	r1, [r0, #4]
  401e58:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401e5c:	6041      	str	r1, [r0, #4]
  401e5e:	e00c      	b.n	401e7a <usart_set_async_baudrate+0x48>
		return 1;
  401e60:	2001      	movs	r0, #1
  401e62:	e010      	b.n	401e86 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401e64:	0859      	lsrs	r1, r3, #1
  401e66:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401e6a:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  401e6e:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401e70:	1e5c      	subs	r4, r3, #1
  401e72:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401e76:	428c      	cmp	r4, r1
  401e78:	d8f2      	bhi.n	401e60 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401e7a:	0412      	lsls	r2, r2, #16
  401e7c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401e80:	431a      	orrs	r2, r3
  401e82:	6202      	str	r2, [r0, #32]

	return 0;
  401e84:	2000      	movs	r0, #0
}
  401e86:	f85d 4b04 	ldr.w	r4, [sp], #4
  401e8a:	4770      	bx	lr

00401e8c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401e8c:	4b08      	ldr	r3, [pc, #32]	; (401eb0 <usart_reset+0x24>)
  401e8e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401e92:	2300      	movs	r3, #0
  401e94:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401e96:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401e98:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401e9a:	2388      	movs	r3, #136	; 0x88
  401e9c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401e9e:	2324      	movs	r3, #36	; 0x24
  401ea0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
  401ea6:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401ea8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401eac:	6003      	str	r3, [r0, #0]
  401eae:	4770      	bx	lr
  401eb0:	55534100 	.word	0x55534100

00401eb4 <usart_init_rs232>:
{
  401eb4:	b570      	push	{r4, r5, r6, lr}
  401eb6:	4605      	mov	r5, r0
  401eb8:	460c      	mov	r4, r1
  401eba:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401ebc:	4b0f      	ldr	r3, [pc, #60]	; (401efc <usart_init_rs232+0x48>)
  401ebe:	4798      	blx	r3
	ul_reg_val = 0;
  401ec0:	2200      	movs	r2, #0
  401ec2:	4b0f      	ldr	r3, [pc, #60]	; (401f00 <usart_init_rs232+0x4c>)
  401ec4:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401ec6:	b1a4      	cbz	r4, 401ef2 <usart_init_rs232+0x3e>
  401ec8:	4632      	mov	r2, r6
  401eca:	6821      	ldr	r1, [r4, #0]
  401ecc:	4628      	mov	r0, r5
  401ece:	4b0d      	ldr	r3, [pc, #52]	; (401f04 <usart_init_rs232+0x50>)
  401ed0:	4798      	blx	r3
  401ed2:	4602      	mov	r2, r0
  401ed4:	b978      	cbnz	r0, 401ef6 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401ed6:	6863      	ldr	r3, [r4, #4]
  401ed8:	68a1      	ldr	r1, [r4, #8]
  401eda:	430b      	orrs	r3, r1
  401edc:	6921      	ldr	r1, [r4, #16]
  401ede:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401ee0:	68e1      	ldr	r1, [r4, #12]
  401ee2:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401ee4:	4906      	ldr	r1, [pc, #24]	; (401f00 <usart_init_rs232+0x4c>)
  401ee6:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401ee8:	6869      	ldr	r1, [r5, #4]
  401eea:	430b      	orrs	r3, r1
  401eec:	606b      	str	r3, [r5, #4]
}
  401eee:	4610      	mov	r0, r2
  401ef0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401ef2:	2201      	movs	r2, #1
  401ef4:	e7fb      	b.n	401eee <usart_init_rs232+0x3a>
  401ef6:	2201      	movs	r2, #1
  401ef8:	e7f9      	b.n	401eee <usart_init_rs232+0x3a>
  401efa:	bf00      	nop
  401efc:	00401e8d 	.word	0x00401e8d
  401f00:	20400e0c 	.word	0x20400e0c
  401f04:	00401e33 	.word	0x00401e33

00401f08 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401f08:	2340      	movs	r3, #64	; 0x40
  401f0a:	6003      	str	r3, [r0, #0]
  401f0c:	4770      	bx	lr

00401f0e <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401f0e:	2310      	movs	r3, #16
  401f10:	6003      	str	r3, [r0, #0]
  401f12:	4770      	bx	lr

00401f14 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401f14:	6943      	ldr	r3, [r0, #20]
  401f16:	f013 0f02 	tst.w	r3, #2
  401f1a:	d004      	beq.n	401f26 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401f1c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401f20:	61c1      	str	r1, [r0, #28]
	return 0;
  401f22:	2000      	movs	r0, #0
  401f24:	4770      	bx	lr
		return 1;
  401f26:	2001      	movs	r0, #1
}
  401f28:	4770      	bx	lr

00401f2a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401f2a:	6943      	ldr	r3, [r0, #20]
  401f2c:	f013 0f01 	tst.w	r3, #1
  401f30:	d005      	beq.n	401f3e <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401f32:	6983      	ldr	r3, [r0, #24]
  401f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401f38:	600b      	str	r3, [r1, #0]
	return 0;
  401f3a:	2000      	movs	r0, #0
  401f3c:	4770      	bx	lr
		return 1;
  401f3e:	2001      	movs	r0, #1
}
  401f40:	4770      	bx	lr

00401f42 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401f42:	e7fe      	b.n	401f42 <Dummy_Handler>

00401f44 <Reset_Handler>:
{
  401f44:	b500      	push	{lr}
  401f46:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401f48:	4b25      	ldr	r3, [pc, #148]	; (401fe0 <Reset_Handler+0x9c>)
  401f4a:	4a26      	ldr	r2, [pc, #152]	; (401fe4 <Reset_Handler+0xa0>)
  401f4c:	429a      	cmp	r2, r3
  401f4e:	d010      	beq.n	401f72 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401f50:	4b25      	ldr	r3, [pc, #148]	; (401fe8 <Reset_Handler+0xa4>)
  401f52:	4a23      	ldr	r2, [pc, #140]	; (401fe0 <Reset_Handler+0x9c>)
  401f54:	429a      	cmp	r2, r3
  401f56:	d20c      	bcs.n	401f72 <Reset_Handler+0x2e>
  401f58:	3b01      	subs	r3, #1
  401f5a:	1a9b      	subs	r3, r3, r2
  401f5c:	f023 0303 	bic.w	r3, r3, #3
  401f60:	3304      	adds	r3, #4
  401f62:	4413      	add	r3, r2
  401f64:	491f      	ldr	r1, [pc, #124]	; (401fe4 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401f66:	f851 0b04 	ldr.w	r0, [r1], #4
  401f6a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401f6e:	429a      	cmp	r2, r3
  401f70:	d1f9      	bne.n	401f66 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401f72:	4b1e      	ldr	r3, [pc, #120]	; (401fec <Reset_Handler+0xa8>)
  401f74:	4a1e      	ldr	r2, [pc, #120]	; (401ff0 <Reset_Handler+0xac>)
  401f76:	429a      	cmp	r2, r3
  401f78:	d20a      	bcs.n	401f90 <Reset_Handler+0x4c>
  401f7a:	3b01      	subs	r3, #1
  401f7c:	1a9b      	subs	r3, r3, r2
  401f7e:	f023 0303 	bic.w	r3, r3, #3
  401f82:	3304      	adds	r3, #4
  401f84:	4413      	add	r3, r2
                *pDest++ = 0;
  401f86:	2100      	movs	r1, #0
  401f88:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401f8c:	4293      	cmp	r3, r2
  401f8e:	d1fb      	bne.n	401f88 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401f90:	4a18      	ldr	r2, [pc, #96]	; (401ff4 <Reset_Handler+0xb0>)
  401f92:	4b19      	ldr	r3, [pc, #100]	; (401ff8 <Reset_Handler+0xb4>)
  401f94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401f98:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401f9a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401f9e:	fab3 f383 	clz	r3, r3
  401fa2:	095b      	lsrs	r3, r3, #5
  401fa4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401fa6:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401fa8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401fac:	2200      	movs	r2, #0
  401fae:	4b13      	ldr	r3, [pc, #76]	; (401ffc <Reset_Handler+0xb8>)
  401fb0:	701a      	strb	r2, [r3, #0]
	return flags;
  401fb2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401fb4:	4a12      	ldr	r2, [pc, #72]	; (402000 <Reset_Handler+0xbc>)
  401fb6:	6813      	ldr	r3, [r2, #0]
  401fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401fbc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401fbe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401fc2:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  401fc6:	b129      	cbz	r1, 401fd4 <Reset_Handler+0x90>
		cpu_irq_enable();
  401fc8:	2201      	movs	r2, #1
  401fca:	4b0c      	ldr	r3, [pc, #48]	; (401ffc <Reset_Handler+0xb8>)
  401fcc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401fce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401fd2:	b662      	cpsie	i
        __libc_init_array();
  401fd4:	4b0b      	ldr	r3, [pc, #44]	; (402004 <Reset_Handler+0xc0>)
  401fd6:	4798      	blx	r3
        main();
  401fd8:	4b0b      	ldr	r3, [pc, #44]	; (402008 <Reset_Handler+0xc4>)
  401fda:	4798      	blx	r3
  401fdc:	e7fe      	b.n	401fdc <Reset_Handler+0x98>
  401fde:	bf00      	nop
  401fe0:	20400000 	.word	0x20400000
  401fe4:	00407848 	.word	0x00407848
  401fe8:	204009c0 	.word	0x204009c0
  401fec:	2040c8ac 	.word	0x2040c8ac
  401ff0:	204009c0 	.word	0x204009c0
  401ff4:	e000ed00 	.word	0xe000ed00
  401ff8:	00400000 	.word	0x00400000
  401ffc:	2040000a 	.word	0x2040000a
  402000:	e000ed88 	.word	0xe000ed88
  402004:	00404601 	.word	0x00404601
  402008:	004044cd 	.word	0x004044cd

0040200c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40200c:	4b3b      	ldr	r3, [pc, #236]	; (4020fc <SystemCoreClockUpdate+0xf0>)
  40200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402010:	f003 0303 	and.w	r3, r3, #3
  402014:	2b01      	cmp	r3, #1
  402016:	d01d      	beq.n	402054 <SystemCoreClockUpdate+0x48>
  402018:	b183      	cbz	r3, 40203c <SystemCoreClockUpdate+0x30>
  40201a:	2b02      	cmp	r3, #2
  40201c:	d036      	beq.n	40208c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40201e:	4b37      	ldr	r3, [pc, #220]	; (4020fc <SystemCoreClockUpdate+0xf0>)
  402020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402022:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402026:	2b70      	cmp	r3, #112	; 0x70
  402028:	d05f      	beq.n	4020ea <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40202a:	4b34      	ldr	r3, [pc, #208]	; (4020fc <SystemCoreClockUpdate+0xf0>)
  40202c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40202e:	4934      	ldr	r1, [pc, #208]	; (402100 <SystemCoreClockUpdate+0xf4>)
  402030:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402034:	680b      	ldr	r3, [r1, #0]
  402036:	40d3      	lsrs	r3, r2
  402038:	600b      	str	r3, [r1, #0]
  40203a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40203c:	4b31      	ldr	r3, [pc, #196]	; (402104 <SystemCoreClockUpdate+0xf8>)
  40203e:	695b      	ldr	r3, [r3, #20]
  402040:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402044:	bf14      	ite	ne
  402046:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40204a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40204e:	4b2c      	ldr	r3, [pc, #176]	; (402100 <SystemCoreClockUpdate+0xf4>)
  402050:	601a      	str	r2, [r3, #0]
  402052:	e7e4      	b.n	40201e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402054:	4b29      	ldr	r3, [pc, #164]	; (4020fc <SystemCoreClockUpdate+0xf0>)
  402056:	6a1b      	ldr	r3, [r3, #32]
  402058:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40205c:	d003      	beq.n	402066 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40205e:	4a2a      	ldr	r2, [pc, #168]	; (402108 <SystemCoreClockUpdate+0xfc>)
  402060:	4b27      	ldr	r3, [pc, #156]	; (402100 <SystemCoreClockUpdate+0xf4>)
  402062:	601a      	str	r2, [r3, #0]
  402064:	e7db      	b.n	40201e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402066:	4a29      	ldr	r2, [pc, #164]	; (40210c <SystemCoreClockUpdate+0x100>)
  402068:	4b25      	ldr	r3, [pc, #148]	; (402100 <SystemCoreClockUpdate+0xf4>)
  40206a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40206c:	4b23      	ldr	r3, [pc, #140]	; (4020fc <SystemCoreClockUpdate+0xf0>)
  40206e:	6a1b      	ldr	r3, [r3, #32]
  402070:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402074:	2b10      	cmp	r3, #16
  402076:	d005      	beq.n	402084 <SystemCoreClockUpdate+0x78>
  402078:	2b20      	cmp	r3, #32
  40207a:	d1d0      	bne.n	40201e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  40207c:	4a22      	ldr	r2, [pc, #136]	; (402108 <SystemCoreClockUpdate+0xfc>)
  40207e:	4b20      	ldr	r3, [pc, #128]	; (402100 <SystemCoreClockUpdate+0xf4>)
  402080:	601a      	str	r2, [r3, #0]
          break;
  402082:	e7cc      	b.n	40201e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  402084:	4a22      	ldr	r2, [pc, #136]	; (402110 <SystemCoreClockUpdate+0x104>)
  402086:	4b1e      	ldr	r3, [pc, #120]	; (402100 <SystemCoreClockUpdate+0xf4>)
  402088:	601a      	str	r2, [r3, #0]
          break;
  40208a:	e7c8      	b.n	40201e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40208c:	4b1b      	ldr	r3, [pc, #108]	; (4020fc <SystemCoreClockUpdate+0xf0>)
  40208e:	6a1b      	ldr	r3, [r3, #32]
  402090:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402094:	d016      	beq.n	4020c4 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402096:	4a1c      	ldr	r2, [pc, #112]	; (402108 <SystemCoreClockUpdate+0xfc>)
  402098:	4b19      	ldr	r3, [pc, #100]	; (402100 <SystemCoreClockUpdate+0xf4>)
  40209a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40209c:	4b17      	ldr	r3, [pc, #92]	; (4020fc <SystemCoreClockUpdate+0xf0>)
  40209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4020a0:	f003 0303 	and.w	r3, r3, #3
  4020a4:	2b02      	cmp	r3, #2
  4020a6:	d1ba      	bne.n	40201e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4020a8:	4a14      	ldr	r2, [pc, #80]	; (4020fc <SystemCoreClockUpdate+0xf0>)
  4020aa:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4020ac:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4020ae:	4814      	ldr	r0, [pc, #80]	; (402100 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4020b0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4020b4:	6803      	ldr	r3, [r0, #0]
  4020b6:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4020ba:	b2d2      	uxtb	r2, r2
  4020bc:	fbb3 f3f2 	udiv	r3, r3, r2
  4020c0:	6003      	str	r3, [r0, #0]
  4020c2:	e7ac      	b.n	40201e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4020c4:	4a11      	ldr	r2, [pc, #68]	; (40210c <SystemCoreClockUpdate+0x100>)
  4020c6:	4b0e      	ldr	r3, [pc, #56]	; (402100 <SystemCoreClockUpdate+0xf4>)
  4020c8:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4020ca:	4b0c      	ldr	r3, [pc, #48]	; (4020fc <SystemCoreClockUpdate+0xf0>)
  4020cc:	6a1b      	ldr	r3, [r3, #32]
  4020ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4020d2:	2b10      	cmp	r3, #16
  4020d4:	d005      	beq.n	4020e2 <SystemCoreClockUpdate+0xd6>
  4020d6:	2b20      	cmp	r3, #32
  4020d8:	d1e0      	bne.n	40209c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4020da:	4a0b      	ldr	r2, [pc, #44]	; (402108 <SystemCoreClockUpdate+0xfc>)
  4020dc:	4b08      	ldr	r3, [pc, #32]	; (402100 <SystemCoreClockUpdate+0xf4>)
  4020de:	601a      	str	r2, [r3, #0]
          break;
  4020e0:	e7dc      	b.n	40209c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4020e2:	4a0b      	ldr	r2, [pc, #44]	; (402110 <SystemCoreClockUpdate+0x104>)
  4020e4:	4b06      	ldr	r3, [pc, #24]	; (402100 <SystemCoreClockUpdate+0xf4>)
  4020e6:	601a      	str	r2, [r3, #0]
          break;
  4020e8:	e7d8      	b.n	40209c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4020ea:	4a05      	ldr	r2, [pc, #20]	; (402100 <SystemCoreClockUpdate+0xf4>)
  4020ec:	6813      	ldr	r3, [r2, #0]
  4020ee:	4909      	ldr	r1, [pc, #36]	; (402114 <SystemCoreClockUpdate+0x108>)
  4020f0:	fba1 1303 	umull	r1, r3, r1, r3
  4020f4:	085b      	lsrs	r3, r3, #1
  4020f6:	6013      	str	r3, [r2, #0]
  4020f8:	4770      	bx	lr
  4020fa:	bf00      	nop
  4020fc:	400e0600 	.word	0x400e0600
  402100:	2040000c 	.word	0x2040000c
  402104:	400e1810 	.word	0x400e1810
  402108:	00b71b00 	.word	0x00b71b00
  40210c:	003d0900 	.word	0x003d0900
  402110:	007a1200 	.word	0x007a1200
  402114:	aaaaaaab 	.word	0xaaaaaaab

00402118 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402118:	4b16      	ldr	r3, [pc, #88]	; (402174 <system_init_flash+0x5c>)
  40211a:	4298      	cmp	r0, r3
  40211c:	d913      	bls.n	402146 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40211e:	4b16      	ldr	r3, [pc, #88]	; (402178 <system_init_flash+0x60>)
  402120:	4298      	cmp	r0, r3
  402122:	d915      	bls.n	402150 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  402124:	4b15      	ldr	r3, [pc, #84]	; (40217c <system_init_flash+0x64>)
  402126:	4298      	cmp	r0, r3
  402128:	d916      	bls.n	402158 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40212a:	4b15      	ldr	r3, [pc, #84]	; (402180 <system_init_flash+0x68>)
  40212c:	4298      	cmp	r0, r3
  40212e:	d917      	bls.n	402160 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402130:	4b14      	ldr	r3, [pc, #80]	; (402184 <system_init_flash+0x6c>)
  402132:	4298      	cmp	r0, r3
  402134:	d918      	bls.n	402168 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  402136:	4b14      	ldr	r3, [pc, #80]	; (402188 <system_init_flash+0x70>)
  402138:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40213a:	bf94      	ite	ls
  40213c:	4a13      	ldrls	r2, [pc, #76]	; (40218c <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40213e:	4a14      	ldrhi	r2, [pc, #80]	; (402190 <system_init_flash+0x78>)
  402140:	4b14      	ldr	r3, [pc, #80]	; (402194 <system_init_flash+0x7c>)
  402142:	601a      	str	r2, [r3, #0]
  402144:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402146:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40214a:	4b12      	ldr	r3, [pc, #72]	; (402194 <system_init_flash+0x7c>)
  40214c:	601a      	str	r2, [r3, #0]
  40214e:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402150:	4a11      	ldr	r2, [pc, #68]	; (402198 <system_init_flash+0x80>)
  402152:	4b10      	ldr	r3, [pc, #64]	; (402194 <system_init_flash+0x7c>)
  402154:	601a      	str	r2, [r3, #0]
  402156:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402158:	4a10      	ldr	r2, [pc, #64]	; (40219c <system_init_flash+0x84>)
  40215a:	4b0e      	ldr	r3, [pc, #56]	; (402194 <system_init_flash+0x7c>)
  40215c:	601a      	str	r2, [r3, #0]
  40215e:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402160:	4a0f      	ldr	r2, [pc, #60]	; (4021a0 <system_init_flash+0x88>)
  402162:	4b0c      	ldr	r3, [pc, #48]	; (402194 <system_init_flash+0x7c>)
  402164:	601a      	str	r2, [r3, #0]
  402166:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402168:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40216c:	4b09      	ldr	r3, [pc, #36]	; (402194 <system_init_flash+0x7c>)
  40216e:	601a      	str	r2, [r3, #0]
  402170:	4770      	bx	lr
  402172:	bf00      	nop
  402174:	015ef3bf 	.word	0x015ef3bf
  402178:	02bde77f 	.word	0x02bde77f
  40217c:	041cdb3f 	.word	0x041cdb3f
  402180:	057bceff 	.word	0x057bceff
  402184:	06dac2bf 	.word	0x06dac2bf
  402188:	0839b67f 	.word	0x0839b67f
  40218c:	04000500 	.word	0x04000500
  402190:	04000600 	.word	0x04000600
  402194:	400e0c00 	.word	0x400e0c00
  402198:	04000100 	.word	0x04000100
  40219c:	04000200 	.word	0x04000200
  4021a0:	04000300 	.word	0x04000300

004021a4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4021a4:	4b0a      	ldr	r3, [pc, #40]	; (4021d0 <_sbrk+0x2c>)
  4021a6:	681b      	ldr	r3, [r3, #0]
  4021a8:	b153      	cbz	r3, 4021c0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4021aa:	4b09      	ldr	r3, [pc, #36]	; (4021d0 <_sbrk+0x2c>)
  4021ac:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4021ae:	181a      	adds	r2, r3, r0
  4021b0:	4908      	ldr	r1, [pc, #32]	; (4021d4 <_sbrk+0x30>)
  4021b2:	4291      	cmp	r1, r2
  4021b4:	db08      	blt.n	4021c8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4021b6:	4610      	mov	r0, r2
  4021b8:	4a05      	ldr	r2, [pc, #20]	; (4021d0 <_sbrk+0x2c>)
  4021ba:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4021bc:	4618      	mov	r0, r3
  4021be:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4021c0:	4a05      	ldr	r2, [pc, #20]	; (4021d8 <_sbrk+0x34>)
  4021c2:	4b03      	ldr	r3, [pc, #12]	; (4021d0 <_sbrk+0x2c>)
  4021c4:	601a      	str	r2, [r3, #0]
  4021c6:	e7f0      	b.n	4021aa <_sbrk+0x6>
		return (caddr_t) -1;	
  4021c8:	f04f 30ff 	mov.w	r0, #4294967295
}
  4021cc:	4770      	bx	lr
  4021ce:	bf00      	nop
  4021d0:	20400e10 	.word	0x20400e10
  4021d4:	2045fffc 	.word	0x2045fffc
  4021d8:	2040eab0 	.word	0x2040eab0

004021dc <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4021dc:	f04f 30ff 	mov.w	r0, #4294967295
  4021e0:	4770      	bx	lr

004021e2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4021e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4021e6:	604b      	str	r3, [r1, #4]

	return 0;
}
  4021e8:	2000      	movs	r0, #0
  4021ea:	4770      	bx	lr

004021ec <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4021ec:	2001      	movs	r0, #1
  4021ee:	4770      	bx	lr

004021f0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4021f0:	2000      	movs	r0, #0
  4021f2:	4770      	bx	lr

004021f4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4021f4:	f100 0308 	add.w	r3, r0, #8
  4021f8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4021fa:	f04f 32ff 	mov.w	r2, #4294967295
  4021fe:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  402200:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  402202:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  402204:	2300      	movs	r3, #0
  402206:	6003      	str	r3, [r0, #0]
  402208:	4770      	bx	lr

0040220a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40220a:	2300      	movs	r3, #0
  40220c:	6103      	str	r3, [r0, #16]
  40220e:	4770      	bx	lr

00402210 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  402210:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  402212:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  402214:	689a      	ldr	r2, [r3, #8]
  402216:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  402218:	689a      	ldr	r2, [r3, #8]
  40221a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  40221c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40221e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  402220:	6803      	ldr	r3, [r0, #0]
  402222:	3301      	adds	r3, #1
  402224:	6003      	str	r3, [r0, #0]
  402226:	4770      	bx	lr

00402228 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  402228:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40222a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  40222c:	f1b5 3fff 	cmp.w	r5, #4294967295
  402230:	d002      	beq.n	402238 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  402232:	f100 0208 	add.w	r2, r0, #8
  402236:	e002      	b.n	40223e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  402238:	6902      	ldr	r2, [r0, #16]
  40223a:	e004      	b.n	402246 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40223c:	461a      	mov	r2, r3
  40223e:	6853      	ldr	r3, [r2, #4]
  402240:	681c      	ldr	r4, [r3, #0]
  402242:	42a5      	cmp	r5, r4
  402244:	d2fa      	bcs.n	40223c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  402246:	6853      	ldr	r3, [r2, #4]
  402248:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40224a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  40224c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40224e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  402250:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  402252:	6803      	ldr	r3, [r0, #0]
  402254:	3301      	adds	r3, #1
  402256:	6003      	str	r3, [r0, #0]
}
  402258:	bc30      	pop	{r4, r5}
  40225a:	4770      	bx	lr

0040225c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  40225c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40225e:	6842      	ldr	r2, [r0, #4]
  402260:	6881      	ldr	r1, [r0, #8]
  402262:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  402264:	6882      	ldr	r2, [r0, #8]
  402266:	6841      	ldr	r1, [r0, #4]
  402268:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40226a:	685a      	ldr	r2, [r3, #4]
  40226c:	4290      	cmp	r0, r2
  40226e:	d005      	beq.n	40227c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  402270:	2200      	movs	r2, #0
  402272:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  402274:	6818      	ldr	r0, [r3, #0]
  402276:	3801      	subs	r0, #1
  402278:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  40227a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  40227c:	6882      	ldr	r2, [r0, #8]
  40227e:	605a      	str	r2, [r3, #4]
  402280:	e7f6      	b.n	402270 <uxListRemove+0x14>
	...

00402284 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  402284:	4b0d      	ldr	r3, [pc, #52]	; (4022bc <prvTaskExitError+0x38>)
  402286:	681b      	ldr	r3, [r3, #0]
  402288:	f1b3 3fff 	cmp.w	r3, #4294967295
  40228c:	d00a      	beq.n	4022a4 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40228e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402292:	b672      	cpsid	i
  402294:	f383 8811 	msr	BASEPRI, r3
  402298:	f3bf 8f6f 	isb	sy
  40229c:	f3bf 8f4f 	dsb	sy
  4022a0:	b662      	cpsie	i
  4022a2:	e7fe      	b.n	4022a2 <prvTaskExitError+0x1e>
  4022a4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022a8:	b672      	cpsid	i
  4022aa:	f383 8811 	msr	BASEPRI, r3
  4022ae:	f3bf 8f6f 	isb	sy
  4022b2:	f3bf 8f4f 	dsb	sy
  4022b6:	b662      	cpsie	i
  4022b8:	e7fe      	b.n	4022b8 <prvTaskExitError+0x34>
  4022ba:	bf00      	nop
  4022bc:	20400010 	.word	0x20400010

004022c0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  4022c0:	4806      	ldr	r0, [pc, #24]	; (4022dc <prvPortStartFirstTask+0x1c>)
  4022c2:	6800      	ldr	r0, [r0, #0]
  4022c4:	6800      	ldr	r0, [r0, #0]
  4022c6:	f380 8808 	msr	MSP, r0
  4022ca:	b662      	cpsie	i
  4022cc:	b661      	cpsie	f
  4022ce:	f3bf 8f4f 	dsb	sy
  4022d2:	f3bf 8f6f 	isb	sy
  4022d6:	df00      	svc	0
  4022d8:	bf00      	nop
  4022da:	0000      	.short	0x0000
  4022dc:	e000ed08 	.word	0xe000ed08

004022e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  4022e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4022f0 <vPortEnableVFP+0x10>
  4022e4:	6801      	ldr	r1, [r0, #0]
  4022e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4022ea:	6001      	str	r1, [r0, #0]
  4022ec:	4770      	bx	lr
  4022ee:	0000      	.short	0x0000
  4022f0:	e000ed88 	.word	0xe000ed88

004022f4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4022f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4022f8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  4022fc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  402300:	4b05      	ldr	r3, [pc, #20]	; (402318 <pxPortInitialiseStack+0x24>)
  402302:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  402306:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  40230a:	f06f 0302 	mvn.w	r3, #2
  40230e:	f840 3c24 	str.w	r3, [r0, #-36]
}
  402312:	3844      	subs	r0, #68	; 0x44
  402314:	4770      	bx	lr
  402316:	bf00      	nop
  402318:	00402285 	.word	0x00402285

0040231c <SVC_Handler>:
	__asm volatile (
  40231c:	4b06      	ldr	r3, [pc, #24]	; (402338 <pxCurrentTCBConst2>)
  40231e:	6819      	ldr	r1, [r3, #0]
  402320:	6808      	ldr	r0, [r1, #0]
  402322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402326:	f380 8809 	msr	PSP, r0
  40232a:	f3bf 8f6f 	isb	sy
  40232e:	f04f 0000 	mov.w	r0, #0
  402332:	f380 8811 	msr	BASEPRI, r0
  402336:	4770      	bx	lr

00402338 <pxCurrentTCBConst2>:
  402338:	2040c624 	.word	0x2040c624
  40233c:	4770      	bx	lr
  40233e:	bf00      	nop

00402340 <vPortEnterCritical>:
  402340:	f04f 0380 	mov.w	r3, #128	; 0x80
  402344:	b672      	cpsid	i
  402346:	f383 8811 	msr	BASEPRI, r3
  40234a:	f3bf 8f6f 	isb	sy
  40234e:	f3bf 8f4f 	dsb	sy
  402352:	b662      	cpsie	i
	uxCriticalNesting++;
  402354:	4a0b      	ldr	r2, [pc, #44]	; (402384 <vPortEnterCritical+0x44>)
  402356:	6813      	ldr	r3, [r2, #0]
  402358:	3301      	adds	r3, #1
  40235a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  40235c:	2b01      	cmp	r3, #1
  40235e:	d10f      	bne.n	402380 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  402360:	4b09      	ldr	r3, [pc, #36]	; (402388 <vPortEnterCritical+0x48>)
  402362:	681b      	ldr	r3, [r3, #0]
  402364:	f013 0fff 	tst.w	r3, #255	; 0xff
  402368:	d00a      	beq.n	402380 <vPortEnterCritical+0x40>
  40236a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40236e:	b672      	cpsid	i
  402370:	f383 8811 	msr	BASEPRI, r3
  402374:	f3bf 8f6f 	isb	sy
  402378:	f3bf 8f4f 	dsb	sy
  40237c:	b662      	cpsie	i
  40237e:	e7fe      	b.n	40237e <vPortEnterCritical+0x3e>
  402380:	4770      	bx	lr
  402382:	bf00      	nop
  402384:	20400010 	.word	0x20400010
  402388:	e000ed04 	.word	0xe000ed04

0040238c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  40238c:	4b0a      	ldr	r3, [pc, #40]	; (4023b8 <vPortExitCritical+0x2c>)
  40238e:	681b      	ldr	r3, [r3, #0]
  402390:	b953      	cbnz	r3, 4023a8 <vPortExitCritical+0x1c>
  402392:	f04f 0380 	mov.w	r3, #128	; 0x80
  402396:	b672      	cpsid	i
  402398:	f383 8811 	msr	BASEPRI, r3
  40239c:	f3bf 8f6f 	isb	sy
  4023a0:	f3bf 8f4f 	dsb	sy
  4023a4:	b662      	cpsie	i
  4023a6:	e7fe      	b.n	4023a6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  4023a8:	3b01      	subs	r3, #1
  4023aa:	4a03      	ldr	r2, [pc, #12]	; (4023b8 <vPortExitCritical+0x2c>)
  4023ac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4023ae:	b90b      	cbnz	r3, 4023b4 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4023b0:	f383 8811 	msr	BASEPRI, r3
  4023b4:	4770      	bx	lr
  4023b6:	bf00      	nop
  4023b8:	20400010 	.word	0x20400010

004023bc <PendSV_Handler>:
	__asm volatile
  4023bc:	f3ef 8009 	mrs	r0, PSP
  4023c0:	f3bf 8f6f 	isb	sy
  4023c4:	4b15      	ldr	r3, [pc, #84]	; (40241c <pxCurrentTCBConst>)
  4023c6:	681a      	ldr	r2, [r3, #0]
  4023c8:	f01e 0f10 	tst.w	lr, #16
  4023cc:	bf08      	it	eq
  4023ce:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4023d2:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4023d6:	6010      	str	r0, [r2, #0]
  4023d8:	f84d 3d04 	str.w	r3, [sp, #-4]!
  4023dc:	f04f 0080 	mov.w	r0, #128	; 0x80
  4023e0:	b672      	cpsid	i
  4023e2:	f380 8811 	msr	BASEPRI, r0
  4023e6:	f3bf 8f4f 	dsb	sy
  4023ea:	f3bf 8f6f 	isb	sy
  4023ee:	b662      	cpsie	i
  4023f0:	f001 f91a 	bl	403628 <vTaskSwitchContext>
  4023f4:	f04f 0000 	mov.w	r0, #0
  4023f8:	f380 8811 	msr	BASEPRI, r0
  4023fc:	bc08      	pop	{r3}
  4023fe:	6819      	ldr	r1, [r3, #0]
  402400:	6808      	ldr	r0, [r1, #0]
  402402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402406:	f01e 0f10 	tst.w	lr, #16
  40240a:	bf08      	it	eq
  40240c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  402410:	f380 8809 	msr	PSP, r0
  402414:	f3bf 8f6f 	isb	sy
  402418:	4770      	bx	lr
  40241a:	bf00      	nop

0040241c <pxCurrentTCBConst>:
  40241c:	2040c624 	.word	0x2040c624
  402420:	4770      	bx	lr
  402422:	bf00      	nop

00402424 <SysTick_Handler>:
{
  402424:	b508      	push	{r3, lr}
	__asm volatile
  402426:	f3ef 8311 	mrs	r3, BASEPRI
  40242a:	f04f 0280 	mov.w	r2, #128	; 0x80
  40242e:	b672      	cpsid	i
  402430:	f382 8811 	msr	BASEPRI, r2
  402434:	f3bf 8f6f 	isb	sy
  402438:	f3bf 8f4f 	dsb	sy
  40243c:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  40243e:	4b05      	ldr	r3, [pc, #20]	; (402454 <SysTick_Handler+0x30>)
  402440:	4798      	blx	r3
  402442:	b118      	cbz	r0, 40244c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  402444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402448:	4b03      	ldr	r3, [pc, #12]	; (402458 <SysTick_Handler+0x34>)
  40244a:	601a      	str	r2, [r3, #0]
	__asm volatile
  40244c:	2300      	movs	r3, #0
  40244e:	f383 8811 	msr	BASEPRI, r3
  402452:	bd08      	pop	{r3, pc}
  402454:	00403295 	.word	0x00403295
  402458:	e000ed04 	.word	0xe000ed04

0040245c <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  40245c:	4a03      	ldr	r2, [pc, #12]	; (40246c <vPortSetupTimerInterrupt+0x10>)
  40245e:	4b04      	ldr	r3, [pc, #16]	; (402470 <vPortSetupTimerInterrupt+0x14>)
  402460:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  402462:	2207      	movs	r2, #7
  402464:	3b04      	subs	r3, #4
  402466:	601a      	str	r2, [r3, #0]
  402468:	4770      	bx	lr
  40246a:	bf00      	nop
  40246c:	0003a97f 	.word	0x0003a97f
  402470:	e000e014 	.word	0xe000e014

00402474 <xPortStartScheduler>:
{
  402474:	b500      	push	{lr}
  402476:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  402478:	4b25      	ldr	r3, [pc, #148]	; (402510 <xPortStartScheduler+0x9c>)
  40247a:	781a      	ldrb	r2, [r3, #0]
  40247c:	b2d2      	uxtb	r2, r2
  40247e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  402480:	22ff      	movs	r2, #255	; 0xff
  402482:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  402484:	781b      	ldrb	r3, [r3, #0]
  402486:	b2db      	uxtb	r3, r3
  402488:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  40248c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402490:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402494:	4a1f      	ldr	r2, [pc, #124]	; (402514 <xPortStartScheduler+0xa0>)
  402496:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  402498:	2207      	movs	r2, #7
  40249a:	4b1f      	ldr	r3, [pc, #124]	; (402518 <xPortStartScheduler+0xa4>)
  40249c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40249e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4024a2:	f013 0f80 	tst.w	r3, #128	; 0x80
  4024a6:	d010      	beq.n	4024ca <xPortStartScheduler+0x56>
  4024a8:	2206      	movs	r2, #6
  4024aa:	e000      	b.n	4024ae <xPortStartScheduler+0x3a>
  4024ac:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4024ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4024b2:	005b      	lsls	r3, r3, #1
  4024b4:	b2db      	uxtb	r3, r3
  4024b6:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4024ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4024be:	1e51      	subs	r1, r2, #1
  4024c0:	f013 0f80 	tst.w	r3, #128	; 0x80
  4024c4:	d1f2      	bne.n	4024ac <xPortStartScheduler+0x38>
  4024c6:	4b14      	ldr	r3, [pc, #80]	; (402518 <xPortStartScheduler+0xa4>)
  4024c8:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4024ca:	4a13      	ldr	r2, [pc, #76]	; (402518 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4024cc:	6813      	ldr	r3, [r2, #0]
  4024ce:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4024d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4024d4:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4024d6:	9b01      	ldr	r3, [sp, #4]
  4024d8:	b2db      	uxtb	r3, r3
  4024da:	4a0d      	ldr	r2, [pc, #52]	; (402510 <xPortStartScheduler+0x9c>)
  4024dc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4024de:	4b0f      	ldr	r3, [pc, #60]	; (40251c <xPortStartScheduler+0xa8>)
  4024e0:	681a      	ldr	r2, [r3, #0]
  4024e2:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4024e6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4024e8:	681a      	ldr	r2, [r3, #0]
  4024ea:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4024ee:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4024f0:	4b0b      	ldr	r3, [pc, #44]	; (402520 <xPortStartScheduler+0xac>)
  4024f2:	4798      	blx	r3
	uxCriticalNesting = 0;
  4024f4:	2200      	movs	r2, #0
  4024f6:	4b0b      	ldr	r3, [pc, #44]	; (402524 <xPortStartScheduler+0xb0>)
  4024f8:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  4024fa:	4b0b      	ldr	r3, [pc, #44]	; (402528 <xPortStartScheduler+0xb4>)
  4024fc:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4024fe:	4a0b      	ldr	r2, [pc, #44]	; (40252c <xPortStartScheduler+0xb8>)
  402500:	6813      	ldr	r3, [r2, #0]
  402502:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  402506:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  402508:	4b09      	ldr	r3, [pc, #36]	; (402530 <xPortStartScheduler+0xbc>)
  40250a:	4798      	blx	r3
	prvTaskExitError();
  40250c:	4b09      	ldr	r3, [pc, #36]	; (402534 <xPortStartScheduler+0xc0>)
  40250e:	4798      	blx	r3
  402510:	e000e400 	.word	0xe000e400
  402514:	20400e14 	.word	0x20400e14
  402518:	20400e18 	.word	0x20400e18
  40251c:	e000ed20 	.word	0xe000ed20
  402520:	0040245d 	.word	0x0040245d
  402524:	20400010 	.word	0x20400010
  402528:	004022e1 	.word	0x004022e1
  40252c:	e000ef34 	.word	0xe000ef34
  402530:	004022c1 	.word	0x004022c1
  402534:	00402285 	.word	0x00402285

00402538 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  402538:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  40253c:	2b0f      	cmp	r3, #15
  40253e:	d911      	bls.n	402564 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  402540:	4a12      	ldr	r2, [pc, #72]	; (40258c <vPortValidateInterruptPriority+0x54>)
  402542:	5c9b      	ldrb	r3, [r3, r2]
  402544:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  402546:	4a12      	ldr	r2, [pc, #72]	; (402590 <vPortValidateInterruptPriority+0x58>)
  402548:	7812      	ldrb	r2, [r2, #0]
  40254a:	429a      	cmp	r2, r3
  40254c:	d90a      	bls.n	402564 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  40254e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402552:	b672      	cpsid	i
  402554:	f383 8811 	msr	BASEPRI, r3
  402558:	f3bf 8f6f 	isb	sy
  40255c:	f3bf 8f4f 	dsb	sy
  402560:	b662      	cpsie	i
  402562:	e7fe      	b.n	402562 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  402564:	4b0b      	ldr	r3, [pc, #44]	; (402594 <vPortValidateInterruptPriority+0x5c>)
  402566:	681b      	ldr	r3, [r3, #0]
  402568:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40256c:	4a0a      	ldr	r2, [pc, #40]	; (402598 <vPortValidateInterruptPriority+0x60>)
  40256e:	6812      	ldr	r2, [r2, #0]
  402570:	4293      	cmp	r3, r2
  402572:	d90a      	bls.n	40258a <vPortValidateInterruptPriority+0x52>
  402574:	f04f 0380 	mov.w	r3, #128	; 0x80
  402578:	b672      	cpsid	i
  40257a:	f383 8811 	msr	BASEPRI, r3
  40257e:	f3bf 8f6f 	isb	sy
  402582:	f3bf 8f4f 	dsb	sy
  402586:	b662      	cpsie	i
  402588:	e7fe      	b.n	402588 <vPortValidateInterruptPriority+0x50>
  40258a:	4770      	bx	lr
  40258c:	e000e3f0 	.word	0xe000e3f0
  402590:	20400e14 	.word	0x20400e14
  402594:	e000ed0c 	.word	0xe000ed0c
  402598:	20400e18 	.word	0x20400e18

0040259c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  40259c:	b538      	push	{r3, r4, r5, lr}
  40259e:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4025a0:	f010 0f07 	tst.w	r0, #7
  4025a4:	d002      	beq.n	4025ac <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4025a6:	f020 0407 	bic.w	r4, r0, #7
  4025aa:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  4025ac:	4b11      	ldr	r3, [pc, #68]	; (4025f4 <pvPortMalloc+0x58>)
  4025ae:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  4025b0:	4b11      	ldr	r3, [pc, #68]	; (4025f8 <pvPortMalloc+0x5c>)
  4025b2:	681b      	ldr	r3, [r3, #0]
  4025b4:	b193      	cbz	r3, 4025dc <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  4025b6:	4b11      	ldr	r3, [pc, #68]	; (4025fc <pvPortMalloc+0x60>)
  4025b8:	681b      	ldr	r3, [r3, #0]
  4025ba:	441c      	add	r4, r3
  4025bc:	42a3      	cmp	r3, r4
  4025be:	d213      	bcs.n	4025e8 <pvPortMalloc+0x4c>
  4025c0:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  4025c4:	4294      	cmp	r4, r2
  4025c6:	d80f      	bhi.n	4025e8 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  4025c8:	4a0b      	ldr	r2, [pc, #44]	; (4025f8 <pvPortMalloc+0x5c>)
  4025ca:	6815      	ldr	r5, [r2, #0]
  4025cc:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  4025ce:	4b0b      	ldr	r3, [pc, #44]	; (4025fc <pvPortMalloc+0x60>)
  4025d0:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4025d2:	4b0b      	ldr	r3, [pc, #44]	; (402600 <pvPortMalloc+0x64>)
  4025d4:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4025d6:	b14d      	cbz	r5, 4025ec <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  4025d8:	4628      	mov	r0, r5
  4025da:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  4025dc:	4b09      	ldr	r3, [pc, #36]	; (402604 <pvPortMalloc+0x68>)
  4025de:	f023 0307 	bic.w	r3, r3, #7
  4025e2:	4a05      	ldr	r2, [pc, #20]	; (4025f8 <pvPortMalloc+0x5c>)
  4025e4:	6013      	str	r3, [r2, #0]
  4025e6:	e7e6      	b.n	4025b6 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  4025e8:	4b05      	ldr	r3, [pc, #20]	; (402600 <pvPortMalloc+0x64>)
  4025ea:	4798      	blx	r3
			vApplicationMallocFailedHook();
  4025ec:	4b06      	ldr	r3, [pc, #24]	; (402608 <pvPortMalloc+0x6c>)
  4025ee:	4798      	blx	r3
  4025f0:	2500      	movs	r5, #0
	return pvReturn;
  4025f2:	e7f1      	b.n	4025d8 <pvPortMalloc+0x3c>
  4025f4:	00403279 	.word	0x00403279
  4025f8:	20400e1c 	.word	0x20400e1c
  4025fc:	2040c620 	.word	0x2040c620
  402600:	004033e1 	.word	0x004033e1
  402604:	20400e28 	.word	0x20400e28
  402608:	0040428b 	.word	0x0040428b

0040260c <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  40260c:	b150      	cbz	r0, 402624 <vPortFree+0x18>
  40260e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402612:	b672      	cpsid	i
  402614:	f383 8811 	msr	BASEPRI, r3
  402618:	f3bf 8f6f 	isb	sy
  40261c:	f3bf 8f4f 	dsb	sy
  402620:	b662      	cpsie	i
  402622:	e7fe      	b.n	402622 <vPortFree+0x16>
  402624:	4770      	bx	lr
	...

00402628 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  402628:	b538      	push	{r3, r4, r5, lr}
  40262a:	4604      	mov	r4, r0
  40262c:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  40262e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402630:	b95a      	cbnz	r2, 40264a <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402632:	6803      	ldr	r3, [r0, #0]
  402634:	2b00      	cmp	r3, #0
  402636:	d12e      	bne.n	402696 <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  402638:	6840      	ldr	r0, [r0, #4]
  40263a:	4b1b      	ldr	r3, [pc, #108]	; (4026a8 <prvCopyDataToQueue+0x80>)
  40263c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  40263e:	2300      	movs	r3, #0
  402640:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  402642:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402644:	3301      	adds	r3, #1
  402646:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  402648:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  40264a:	b96d      	cbnz	r5, 402668 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  40264c:	6880      	ldr	r0, [r0, #8]
  40264e:	4b17      	ldr	r3, [pc, #92]	; (4026ac <prvCopyDataToQueue+0x84>)
  402650:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  402652:	68a3      	ldr	r3, [r4, #8]
  402654:	6c22      	ldr	r2, [r4, #64]	; 0x40
  402656:	4413      	add	r3, r2
  402658:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40265a:	6862      	ldr	r2, [r4, #4]
  40265c:	4293      	cmp	r3, r2
  40265e:	d31c      	bcc.n	40269a <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  402660:	6823      	ldr	r3, [r4, #0]
  402662:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  402664:	2000      	movs	r0, #0
  402666:	e7ec      	b.n	402642 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402668:	68c0      	ldr	r0, [r0, #12]
  40266a:	4b10      	ldr	r3, [pc, #64]	; (4026ac <prvCopyDataToQueue+0x84>)
  40266c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  40266e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  402670:	425b      	negs	r3, r3
  402672:	68e2      	ldr	r2, [r4, #12]
  402674:	441a      	add	r2, r3
  402676:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  402678:	6821      	ldr	r1, [r4, #0]
  40267a:	428a      	cmp	r2, r1
  40267c:	d202      	bcs.n	402684 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40267e:	6862      	ldr	r2, [r4, #4]
  402680:	4413      	add	r3, r2
  402682:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  402684:	2d02      	cmp	r5, #2
  402686:	d10a      	bne.n	40269e <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  402688:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40268a:	b153      	cbz	r3, 4026a2 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  40268c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40268e:	3b01      	subs	r3, #1
  402690:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  402692:	2000      	movs	r0, #0
  402694:	e7d5      	b.n	402642 <prvCopyDataToQueue+0x1a>
  402696:	2000      	movs	r0, #0
  402698:	e7d3      	b.n	402642 <prvCopyDataToQueue+0x1a>
  40269a:	2000      	movs	r0, #0
  40269c:	e7d1      	b.n	402642 <prvCopyDataToQueue+0x1a>
  40269e:	2000      	movs	r0, #0
  4026a0:	e7cf      	b.n	402642 <prvCopyDataToQueue+0x1a>
  4026a2:	2000      	movs	r0, #0
  4026a4:	e7cd      	b.n	402642 <prvCopyDataToQueue+0x1a>
  4026a6:	bf00      	nop
  4026a8:	00403a29 	.word	0x00403a29
  4026ac:	00404be9 	.word	0x00404be9

004026b0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4026b0:	b530      	push	{r4, r5, lr}
  4026b2:	b083      	sub	sp, #12
  4026b4:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4026b6:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4026b8:	b174      	cbz	r4, 4026d8 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4026ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4026bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4026be:	429a      	cmp	r2, r3
  4026c0:	d315      	bcc.n	4026ee <prvNotifyQueueSetContainer+0x3e>
  4026c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026c6:	b672      	cpsid	i
  4026c8:	f383 8811 	msr	BASEPRI, r3
  4026cc:	f3bf 8f6f 	isb	sy
  4026d0:	f3bf 8f4f 	dsb	sy
  4026d4:	b662      	cpsie	i
  4026d6:	e7fe      	b.n	4026d6 <prvNotifyQueueSetContainer+0x26>
  4026d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026dc:	b672      	cpsid	i
  4026de:	f383 8811 	msr	BASEPRI, r3
  4026e2:	f3bf 8f6f 	isb	sy
  4026e6:	f3bf 8f4f 	dsb	sy
  4026ea:	b662      	cpsie	i
  4026ec:	e7fe      	b.n	4026ec <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4026ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4026f0:	4293      	cmp	r3, r2
  4026f2:	d803      	bhi.n	4026fc <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  4026f4:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4026f6:	4628      	mov	r0, r5
  4026f8:	b003      	add	sp, #12
  4026fa:	bd30      	pop	{r4, r5, pc}
  4026fc:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  4026fe:	a901      	add	r1, sp, #4
  402700:	4620      	mov	r0, r4
  402702:	4b0b      	ldr	r3, [pc, #44]	; (402730 <prvNotifyQueueSetContainer+0x80>)
  402704:	4798      	blx	r3
  402706:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  402708:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40270a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40270e:	d10a      	bne.n	402726 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  402710:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402712:	2b00      	cmp	r3, #0
  402714:	d0ef      	beq.n	4026f6 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  402716:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40271a:	4b06      	ldr	r3, [pc, #24]	; (402734 <prvNotifyQueueSetContainer+0x84>)
  40271c:	4798      	blx	r3
  40271e:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  402720:	bf18      	it	ne
  402722:	2501      	movne	r5, #1
  402724:	e7e7      	b.n	4026f6 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  402726:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402728:	3301      	adds	r3, #1
  40272a:	64a3      	str	r3, [r4, #72]	; 0x48
  40272c:	e7e3      	b.n	4026f6 <prvNotifyQueueSetContainer+0x46>
  40272e:	bf00      	nop
  402730:	00402629 	.word	0x00402629
  402734:	004037fd 	.word	0x004037fd

00402738 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  402738:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40273a:	b172      	cbz	r2, 40275a <prvCopyDataFromQueue+0x22>
{
  40273c:	b510      	push	{r4, lr}
  40273e:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  402740:	68c4      	ldr	r4, [r0, #12]
  402742:	4414      	add	r4, r2
  402744:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  402746:	6840      	ldr	r0, [r0, #4]
  402748:	4284      	cmp	r4, r0
  40274a:	d301      	bcc.n	402750 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  40274c:	6818      	ldr	r0, [r3, #0]
  40274e:	60d8      	str	r0, [r3, #12]
  402750:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  402752:	68d9      	ldr	r1, [r3, #12]
  402754:	4b01      	ldr	r3, [pc, #4]	; (40275c <prvCopyDataFromQueue+0x24>)
  402756:	4798      	blx	r3
  402758:	bd10      	pop	{r4, pc}
  40275a:	4770      	bx	lr
  40275c:	00404be9 	.word	0x00404be9

00402760 <prvUnlockQueue>:
{
  402760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402762:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  402764:	4b22      	ldr	r3, [pc, #136]	; (4027f0 <prvUnlockQueue+0x90>)
  402766:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  402768:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40276a:	2b00      	cmp	r3, #0
  40276c:	dd1b      	ble.n	4027a6 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40276e:	4d21      	ldr	r5, [pc, #132]	; (4027f4 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  402770:	4f21      	ldr	r7, [pc, #132]	; (4027f8 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402772:	4e22      	ldr	r6, [pc, #136]	; (4027fc <prvUnlockQueue+0x9c>)
  402774:	e00b      	b.n	40278e <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402776:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402778:	b1ab      	cbz	r3, 4027a6 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40277a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40277e:	47b0      	blx	r6
  402780:	b978      	cbnz	r0, 4027a2 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  402782:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402784:	3b01      	subs	r3, #1
  402786:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  402788:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40278a:	2b00      	cmp	r3, #0
  40278c:	dd0b      	ble.n	4027a6 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  40278e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402790:	2b00      	cmp	r3, #0
  402792:	d0f0      	beq.n	402776 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  402794:	2100      	movs	r1, #0
  402796:	4620      	mov	r0, r4
  402798:	47a8      	blx	r5
  40279a:	2801      	cmp	r0, #1
  40279c:	d1f1      	bne.n	402782 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  40279e:	47b8      	blx	r7
  4027a0:	e7ef      	b.n	402782 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  4027a2:	47b8      	blx	r7
  4027a4:	e7ed      	b.n	402782 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  4027a6:	f04f 33ff 	mov.w	r3, #4294967295
  4027aa:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  4027ac:	4b14      	ldr	r3, [pc, #80]	; (402800 <prvUnlockQueue+0xa0>)
  4027ae:	4798      	blx	r3
	taskENTER_CRITICAL();
  4027b0:	4b0f      	ldr	r3, [pc, #60]	; (4027f0 <prvUnlockQueue+0x90>)
  4027b2:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4027b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4027b6:	2b00      	cmp	r3, #0
  4027b8:	dd14      	ble.n	4027e4 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4027ba:	6923      	ldr	r3, [r4, #16]
  4027bc:	b193      	cbz	r3, 4027e4 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4027be:	f104 0610 	add.w	r6, r4, #16
  4027c2:	4d0e      	ldr	r5, [pc, #56]	; (4027fc <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  4027c4:	4f0c      	ldr	r7, [pc, #48]	; (4027f8 <prvUnlockQueue+0x98>)
  4027c6:	e007      	b.n	4027d8 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  4027c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4027ca:	3b01      	subs	r3, #1
  4027cc:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4027ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4027d0:	2b00      	cmp	r3, #0
  4027d2:	dd07      	ble.n	4027e4 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4027d4:	6923      	ldr	r3, [r4, #16]
  4027d6:	b12b      	cbz	r3, 4027e4 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4027d8:	4630      	mov	r0, r6
  4027da:	47a8      	blx	r5
  4027dc:	2800      	cmp	r0, #0
  4027de:	d0f3      	beq.n	4027c8 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  4027e0:	47b8      	blx	r7
  4027e2:	e7f1      	b.n	4027c8 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  4027e4:	f04f 33ff 	mov.w	r3, #4294967295
  4027e8:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  4027ea:	4b05      	ldr	r3, [pc, #20]	; (402800 <prvUnlockQueue+0xa0>)
  4027ec:	4798      	blx	r3
  4027ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4027f0:	00402341 	.word	0x00402341
  4027f4:	004026b1 	.word	0x004026b1
  4027f8:	00403959 	.word	0x00403959
  4027fc:	004037fd 	.word	0x004037fd
  402800:	0040238d 	.word	0x0040238d

00402804 <xQueueGenericReset>:
{
  402804:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  402806:	b308      	cbz	r0, 40284c <xQueueGenericReset+0x48>
  402808:	4604      	mov	r4, r0
  40280a:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40280c:	4b1d      	ldr	r3, [pc, #116]	; (402884 <xQueueGenericReset+0x80>)
  40280e:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  402810:	6822      	ldr	r2, [r4, #0]
  402812:	6c21      	ldr	r1, [r4, #64]	; 0x40
  402814:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402816:	fb03 f301 	mul.w	r3, r3, r1
  40281a:	18d0      	adds	r0, r2, r3
  40281c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  40281e:	2000      	movs	r0, #0
  402820:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  402822:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  402824:	1a5b      	subs	r3, r3, r1
  402826:	4413      	add	r3, r2
  402828:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40282a:	f04f 33ff 	mov.w	r3, #4294967295
  40282e:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  402830:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  402832:	b9fd      	cbnz	r5, 402874 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402834:	6923      	ldr	r3, [r4, #16]
  402836:	b12b      	cbz	r3, 402844 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  402838:	f104 0010 	add.w	r0, r4, #16
  40283c:	4b12      	ldr	r3, [pc, #72]	; (402888 <xQueueGenericReset+0x84>)
  40283e:	4798      	blx	r3
  402840:	2801      	cmp	r0, #1
  402842:	d00e      	beq.n	402862 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  402844:	4b11      	ldr	r3, [pc, #68]	; (40288c <xQueueGenericReset+0x88>)
  402846:	4798      	blx	r3
}
  402848:	2001      	movs	r0, #1
  40284a:	bd38      	pop	{r3, r4, r5, pc}
  40284c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402850:	b672      	cpsid	i
  402852:	f383 8811 	msr	BASEPRI, r3
  402856:	f3bf 8f6f 	isb	sy
  40285a:	f3bf 8f4f 	dsb	sy
  40285e:	b662      	cpsie	i
  402860:	e7fe      	b.n	402860 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  402862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402866:	4b0a      	ldr	r3, [pc, #40]	; (402890 <xQueueGenericReset+0x8c>)
  402868:	601a      	str	r2, [r3, #0]
  40286a:	f3bf 8f4f 	dsb	sy
  40286e:	f3bf 8f6f 	isb	sy
  402872:	e7e7      	b.n	402844 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  402874:	f104 0010 	add.w	r0, r4, #16
  402878:	4d06      	ldr	r5, [pc, #24]	; (402894 <xQueueGenericReset+0x90>)
  40287a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  40287c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402880:	47a8      	blx	r5
  402882:	e7df      	b.n	402844 <xQueueGenericReset+0x40>
  402884:	00402341 	.word	0x00402341
  402888:	004037fd 	.word	0x004037fd
  40288c:	0040238d 	.word	0x0040238d
  402890:	e000ed04 	.word	0xe000ed04
  402894:	004021f5 	.word	0x004021f5

00402898 <xQueueGenericCreate>:
{
  402898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  40289a:	b950      	cbnz	r0, 4028b2 <xQueueGenericCreate+0x1a>
  40289c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028a0:	b672      	cpsid	i
  4028a2:	f383 8811 	msr	BASEPRI, r3
  4028a6:	f3bf 8f6f 	isb	sy
  4028aa:	f3bf 8f4f 	dsb	sy
  4028ae:	b662      	cpsie	i
  4028b0:	e7fe      	b.n	4028b0 <xQueueGenericCreate+0x18>
  4028b2:	4606      	mov	r6, r0
  4028b4:	4617      	mov	r7, r2
  4028b6:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  4028b8:	b189      	cbz	r1, 4028de <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4028ba:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4028be:	3059      	adds	r0, #89	; 0x59
  4028c0:	4b12      	ldr	r3, [pc, #72]	; (40290c <xQueueGenericCreate+0x74>)
  4028c2:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4028c4:	4604      	mov	r4, r0
  4028c6:	b9e8      	cbnz	r0, 402904 <xQueueGenericCreate+0x6c>
  4028c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028cc:	b672      	cpsid	i
  4028ce:	f383 8811 	msr	BASEPRI, r3
  4028d2:	f3bf 8f6f 	isb	sy
  4028d6:	f3bf 8f4f 	dsb	sy
  4028da:	b662      	cpsie	i
  4028dc:	e7fe      	b.n	4028dc <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4028de:	2058      	movs	r0, #88	; 0x58
  4028e0:	4b0a      	ldr	r3, [pc, #40]	; (40290c <xQueueGenericCreate+0x74>)
  4028e2:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4028e4:	4604      	mov	r4, r0
  4028e6:	2800      	cmp	r0, #0
  4028e8:	d0ee      	beq.n	4028c8 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4028ea:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  4028ec:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  4028ee:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  4028f0:	2101      	movs	r1, #1
  4028f2:	4620      	mov	r0, r4
  4028f4:	4b06      	ldr	r3, [pc, #24]	; (402910 <xQueueGenericCreate+0x78>)
  4028f6:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  4028f8:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  4028fc:	2300      	movs	r3, #0
  4028fe:	6563      	str	r3, [r4, #84]	; 0x54
}
  402900:	4620      	mov	r0, r4
  402902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  402904:	f100 0358 	add.w	r3, r0, #88	; 0x58
  402908:	6003      	str	r3, [r0, #0]
  40290a:	e7ef      	b.n	4028ec <xQueueGenericCreate+0x54>
  40290c:	0040259d 	.word	0x0040259d
  402910:	00402805 	.word	0x00402805

00402914 <xQueueGenericSend>:
{
  402914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402918:	b085      	sub	sp, #20
  40291a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  40291c:	b1b8      	cbz	r0, 40294e <xQueueGenericSend+0x3a>
  40291e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402920:	b301      	cbz	r1, 402964 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402922:	2b02      	cmp	r3, #2
  402924:	d02c      	beq.n	402980 <xQueueGenericSend+0x6c>
  402926:	461d      	mov	r5, r3
  402928:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40292a:	4b66      	ldr	r3, [pc, #408]	; (402ac4 <xQueueGenericSend+0x1b0>)
  40292c:	4798      	blx	r3
  40292e:	2800      	cmp	r0, #0
  402930:	d134      	bne.n	40299c <xQueueGenericSend+0x88>
  402932:	9b01      	ldr	r3, [sp, #4]
  402934:	2b00      	cmp	r3, #0
  402936:	d038      	beq.n	4029aa <xQueueGenericSend+0x96>
  402938:	f04f 0380 	mov.w	r3, #128	; 0x80
  40293c:	b672      	cpsid	i
  40293e:	f383 8811 	msr	BASEPRI, r3
  402942:	f3bf 8f6f 	isb	sy
  402946:	f3bf 8f4f 	dsb	sy
  40294a:	b662      	cpsie	i
  40294c:	e7fe      	b.n	40294c <xQueueGenericSend+0x38>
  40294e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402952:	b672      	cpsid	i
  402954:	f383 8811 	msr	BASEPRI, r3
  402958:	f3bf 8f6f 	isb	sy
  40295c:	f3bf 8f4f 	dsb	sy
  402960:	b662      	cpsie	i
  402962:	e7fe      	b.n	402962 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402964:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402966:	2a00      	cmp	r2, #0
  402968:	d0db      	beq.n	402922 <xQueueGenericSend+0xe>
  40296a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40296e:	b672      	cpsid	i
  402970:	f383 8811 	msr	BASEPRI, r3
  402974:	f3bf 8f6f 	isb	sy
  402978:	f3bf 8f4f 	dsb	sy
  40297c:	b662      	cpsie	i
  40297e:	e7fe      	b.n	40297e <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402980:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  402982:	2a01      	cmp	r2, #1
  402984:	d0cf      	beq.n	402926 <xQueueGenericSend+0x12>
  402986:	f04f 0380 	mov.w	r3, #128	; 0x80
  40298a:	b672      	cpsid	i
  40298c:	f383 8811 	msr	BASEPRI, r3
  402990:	f3bf 8f6f 	isb	sy
  402994:	f3bf 8f4f 	dsb	sy
  402998:	b662      	cpsie	i
  40299a:	e7fe      	b.n	40299a <xQueueGenericSend+0x86>
  40299c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  40299e:	4e4a      	ldr	r6, [pc, #296]	; (402ac8 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  4029a0:	f8df a150 	ldr.w	sl, [pc, #336]	; 402af4 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  4029a4:	f8df 912c 	ldr.w	r9, [pc, #300]	; 402ad4 <xQueueGenericSend+0x1c0>
  4029a8:	e042      	b.n	402a30 <xQueueGenericSend+0x11c>
  4029aa:	2700      	movs	r7, #0
  4029ac:	e7f7      	b.n	40299e <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4029ae:	462a      	mov	r2, r5
  4029b0:	4641      	mov	r1, r8
  4029b2:	4620      	mov	r0, r4
  4029b4:	4b45      	ldr	r3, [pc, #276]	; (402acc <xQueueGenericSend+0x1b8>)
  4029b6:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  4029b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4029ba:	b19b      	cbz	r3, 4029e4 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4029bc:	4629      	mov	r1, r5
  4029be:	4620      	mov	r0, r4
  4029c0:	4b43      	ldr	r3, [pc, #268]	; (402ad0 <xQueueGenericSend+0x1bc>)
  4029c2:	4798      	blx	r3
  4029c4:	2801      	cmp	r0, #1
  4029c6:	d107      	bne.n	4029d8 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4029c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4029cc:	4b41      	ldr	r3, [pc, #260]	; (402ad4 <xQueueGenericSend+0x1c0>)
  4029ce:	601a      	str	r2, [r3, #0]
  4029d0:	f3bf 8f4f 	dsb	sy
  4029d4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4029d8:	4b3f      	ldr	r3, [pc, #252]	; (402ad8 <xQueueGenericSend+0x1c4>)
  4029da:	4798      	blx	r3
				return pdPASS;
  4029dc:	2001      	movs	r0, #1
}
  4029de:	b005      	add	sp, #20
  4029e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4029e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4029e6:	b173      	cbz	r3, 402a06 <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4029e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4029ec:	4b3b      	ldr	r3, [pc, #236]	; (402adc <xQueueGenericSend+0x1c8>)
  4029ee:	4798      	blx	r3
  4029f0:	2801      	cmp	r0, #1
  4029f2:	d1f1      	bne.n	4029d8 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  4029f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4029f8:	4b36      	ldr	r3, [pc, #216]	; (402ad4 <xQueueGenericSend+0x1c0>)
  4029fa:	601a      	str	r2, [r3, #0]
  4029fc:	f3bf 8f4f 	dsb	sy
  402a00:	f3bf 8f6f 	isb	sy
  402a04:	e7e8      	b.n	4029d8 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  402a06:	2800      	cmp	r0, #0
  402a08:	d0e6      	beq.n	4029d8 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  402a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402a0e:	4b31      	ldr	r3, [pc, #196]	; (402ad4 <xQueueGenericSend+0x1c0>)
  402a10:	601a      	str	r2, [r3, #0]
  402a12:	f3bf 8f4f 	dsb	sy
  402a16:	f3bf 8f6f 	isb	sy
  402a1a:	e7dd      	b.n	4029d8 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  402a1c:	4b2e      	ldr	r3, [pc, #184]	; (402ad8 <xQueueGenericSend+0x1c4>)
  402a1e:	4798      	blx	r3
					return errQUEUE_FULL;
  402a20:	2000      	movs	r0, #0
  402a22:	e7dc      	b.n	4029de <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  402a24:	4620      	mov	r0, r4
  402a26:	4b2e      	ldr	r3, [pc, #184]	; (402ae0 <xQueueGenericSend+0x1cc>)
  402a28:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402a2a:	4b2e      	ldr	r3, [pc, #184]	; (402ae4 <xQueueGenericSend+0x1d0>)
  402a2c:	4798      	blx	r3
  402a2e:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  402a30:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402a32:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402a34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402a36:	429a      	cmp	r2, r3
  402a38:	d3b9      	bcc.n	4029ae <xQueueGenericSend+0x9a>
  402a3a:	2d02      	cmp	r5, #2
  402a3c:	d0b7      	beq.n	4029ae <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  402a3e:	9b01      	ldr	r3, [sp, #4]
  402a40:	2b00      	cmp	r3, #0
  402a42:	d0eb      	beq.n	402a1c <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  402a44:	b90f      	cbnz	r7, 402a4a <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  402a46:	a802      	add	r0, sp, #8
  402a48:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  402a4a:	4b23      	ldr	r3, [pc, #140]	; (402ad8 <xQueueGenericSend+0x1c4>)
  402a4c:	4798      	blx	r3
		vTaskSuspendAll();
  402a4e:	4b26      	ldr	r3, [pc, #152]	; (402ae8 <xQueueGenericSend+0x1d4>)
  402a50:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402a52:	47b0      	blx	r6
  402a54:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402a56:	f1b3 3fff 	cmp.w	r3, #4294967295
  402a5a:	d101      	bne.n	402a60 <xQueueGenericSend+0x14c>
  402a5c:	2300      	movs	r3, #0
  402a5e:	6463      	str	r3, [r4, #68]	; 0x44
  402a60:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402a62:	f1b3 3fff 	cmp.w	r3, #4294967295
  402a66:	d101      	bne.n	402a6c <xQueueGenericSend+0x158>
  402a68:	2300      	movs	r3, #0
  402a6a:	64a3      	str	r3, [r4, #72]	; 0x48
  402a6c:	4b1a      	ldr	r3, [pc, #104]	; (402ad8 <xQueueGenericSend+0x1c4>)
  402a6e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402a70:	a901      	add	r1, sp, #4
  402a72:	a802      	add	r0, sp, #8
  402a74:	4b1d      	ldr	r3, [pc, #116]	; (402aec <xQueueGenericSend+0x1d8>)
  402a76:	4798      	blx	r3
  402a78:	b9e0      	cbnz	r0, 402ab4 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  402a7a:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  402a7c:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  402a80:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  402a82:	4b15      	ldr	r3, [pc, #84]	; (402ad8 <xQueueGenericSend+0x1c4>)
  402a84:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  402a86:	45bb      	cmp	fp, r7
  402a88:	d1cc      	bne.n	402a24 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  402a8a:	9901      	ldr	r1, [sp, #4]
  402a8c:	f104 0010 	add.w	r0, r4, #16
  402a90:	4b17      	ldr	r3, [pc, #92]	; (402af0 <xQueueGenericSend+0x1dc>)
  402a92:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402a94:	4620      	mov	r0, r4
  402a96:	4b12      	ldr	r3, [pc, #72]	; (402ae0 <xQueueGenericSend+0x1cc>)
  402a98:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402a9a:	4b12      	ldr	r3, [pc, #72]	; (402ae4 <xQueueGenericSend+0x1d0>)
  402a9c:	4798      	blx	r3
  402a9e:	2800      	cmp	r0, #0
  402aa0:	d1c5      	bne.n	402a2e <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  402aa2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402aa6:	f8c9 3000 	str.w	r3, [r9]
  402aaa:	f3bf 8f4f 	dsb	sy
  402aae:	f3bf 8f6f 	isb	sy
  402ab2:	e7bc      	b.n	402a2e <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  402ab4:	4620      	mov	r0, r4
  402ab6:	4b0a      	ldr	r3, [pc, #40]	; (402ae0 <xQueueGenericSend+0x1cc>)
  402ab8:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402aba:	4b0a      	ldr	r3, [pc, #40]	; (402ae4 <xQueueGenericSend+0x1d0>)
  402abc:	4798      	blx	r3
			return errQUEUE_FULL;
  402abe:	2000      	movs	r0, #0
  402ac0:	e78d      	b.n	4029de <xQueueGenericSend+0xca>
  402ac2:	bf00      	nop
  402ac4:	00403965 	.word	0x00403965
  402ac8:	00402341 	.word	0x00402341
  402acc:	00402629 	.word	0x00402629
  402ad0:	004026b1 	.word	0x004026b1
  402ad4:	e000ed04 	.word	0xe000ed04
  402ad8:	0040238d 	.word	0x0040238d
  402adc:	004037fd 	.word	0x004037fd
  402ae0:	00402761 	.word	0x00402761
  402ae4:	004033e1 	.word	0x004033e1
  402ae8:	00403279 	.word	0x00403279
  402aec:	004038c5 	.word	0x004038c5
  402af0:	004036f9 	.word	0x004036f9
  402af4:	00403895 	.word	0x00403895

00402af8 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  402af8:	2800      	cmp	r0, #0
  402afa:	d036      	beq.n	402b6a <xQueueGenericSendFromISR+0x72>
{
  402afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402b00:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402b02:	2900      	cmp	r1, #0
  402b04:	d03c      	beq.n	402b80 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402b06:	2b02      	cmp	r3, #2
  402b08:	d048      	beq.n	402b9c <xQueueGenericSendFromISR+0xa4>
  402b0a:	461e      	mov	r6, r3
  402b0c:	4615      	mov	r5, r2
  402b0e:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  402b10:	4b35      	ldr	r3, [pc, #212]	; (402be8 <xQueueGenericSendFromISR+0xf0>)
  402b12:	4798      	blx	r3
	__asm volatile
  402b14:	f3ef 8711 	mrs	r7, BASEPRI
  402b18:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b1c:	b672      	cpsid	i
  402b1e:	f383 8811 	msr	BASEPRI, r3
  402b22:	f3bf 8f6f 	isb	sy
  402b26:	f3bf 8f4f 	dsb	sy
  402b2a:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402b2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402b2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402b30:	429a      	cmp	r2, r3
  402b32:	d301      	bcc.n	402b38 <xQueueGenericSendFromISR+0x40>
  402b34:	2e02      	cmp	r6, #2
  402b36:	d14f      	bne.n	402bd8 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  402b38:	4632      	mov	r2, r6
  402b3a:	4641      	mov	r1, r8
  402b3c:	4620      	mov	r0, r4
  402b3e:	4b2b      	ldr	r3, [pc, #172]	; (402bec <xQueueGenericSendFromISR+0xf4>)
  402b40:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  402b42:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402b44:	f1b3 3fff 	cmp.w	r3, #4294967295
  402b48:	d141      	bne.n	402bce <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  402b4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402b4c:	2b00      	cmp	r3, #0
  402b4e:	d033      	beq.n	402bb8 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402b50:	4631      	mov	r1, r6
  402b52:	4620      	mov	r0, r4
  402b54:	4b26      	ldr	r3, [pc, #152]	; (402bf0 <xQueueGenericSendFromISR+0xf8>)
  402b56:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  402b58:	2d00      	cmp	r5, #0
  402b5a:	d03f      	beq.n	402bdc <xQueueGenericSendFromISR+0xe4>
  402b5c:	2801      	cmp	r0, #1
  402b5e:	d13d      	bne.n	402bdc <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  402b60:	6028      	str	r0, [r5, #0]
	__asm volatile
  402b62:	f387 8811 	msr	BASEPRI, r7
}
  402b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  402b6a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b6e:	b672      	cpsid	i
  402b70:	f383 8811 	msr	BASEPRI, r3
  402b74:	f3bf 8f6f 	isb	sy
  402b78:	f3bf 8f4f 	dsb	sy
  402b7c:	b662      	cpsie	i
  402b7e:	e7fe      	b.n	402b7e <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402b80:	6c00      	ldr	r0, [r0, #64]	; 0x40
  402b82:	2800      	cmp	r0, #0
  402b84:	d0bf      	beq.n	402b06 <xQueueGenericSendFromISR+0xe>
  402b86:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b8a:	b672      	cpsid	i
  402b8c:	f383 8811 	msr	BASEPRI, r3
  402b90:	f3bf 8f6f 	isb	sy
  402b94:	f3bf 8f4f 	dsb	sy
  402b98:	b662      	cpsie	i
  402b9a:	e7fe      	b.n	402b9a <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402b9c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  402b9e:	2801      	cmp	r0, #1
  402ba0:	d0b3      	beq.n	402b0a <xQueueGenericSendFromISR+0x12>
  402ba2:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ba6:	b672      	cpsid	i
  402ba8:	f383 8811 	msr	BASEPRI, r3
  402bac:	f3bf 8f6f 	isb	sy
  402bb0:	f3bf 8f4f 	dsb	sy
  402bb4:	b662      	cpsie	i
  402bb6:	e7fe      	b.n	402bb6 <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402bb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402bba:	b18b      	cbz	r3, 402be0 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402bbc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402bc0:	4b0c      	ldr	r3, [pc, #48]	; (402bf4 <xQueueGenericSendFromISR+0xfc>)
  402bc2:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  402bc4:	b175      	cbz	r5, 402be4 <xQueueGenericSendFromISR+0xec>
  402bc6:	b168      	cbz	r0, 402be4 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  402bc8:	2001      	movs	r0, #1
  402bca:	6028      	str	r0, [r5, #0]
  402bcc:	e7c9      	b.n	402b62 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  402bce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402bd0:	3301      	adds	r3, #1
  402bd2:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  402bd4:	2001      	movs	r0, #1
  402bd6:	e7c4      	b.n	402b62 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  402bd8:	2000      	movs	r0, #0
  402bda:	e7c2      	b.n	402b62 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  402bdc:	2001      	movs	r0, #1
  402bde:	e7c0      	b.n	402b62 <xQueueGenericSendFromISR+0x6a>
  402be0:	2001      	movs	r0, #1
  402be2:	e7be      	b.n	402b62 <xQueueGenericSendFromISR+0x6a>
  402be4:	2001      	movs	r0, #1
  402be6:	e7bc      	b.n	402b62 <xQueueGenericSendFromISR+0x6a>
  402be8:	00402539 	.word	0x00402539
  402bec:	00402629 	.word	0x00402629
  402bf0:	004026b1 	.word	0x004026b1
  402bf4:	004037fd 	.word	0x004037fd

00402bf8 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  402bf8:	b170      	cbz	r0, 402c18 <xQueueGiveFromISR+0x20>
{
  402bfa:	b570      	push	{r4, r5, r6, lr}
  402bfc:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  402bfe:	6c03      	ldr	r3, [r0, #64]	; 0x40
  402c00:	b1ab      	cbz	r3, 402c2e <xQueueGiveFromISR+0x36>
  402c02:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c06:	b672      	cpsid	i
  402c08:	f383 8811 	msr	BASEPRI, r3
  402c0c:	f3bf 8f6f 	isb	sy
  402c10:	f3bf 8f4f 	dsb	sy
  402c14:	b662      	cpsie	i
  402c16:	e7fe      	b.n	402c16 <xQueueGiveFromISR+0x1e>
  402c18:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c1c:	b672      	cpsid	i
  402c1e:	f383 8811 	msr	BASEPRI, r3
  402c22:	f3bf 8f6f 	isb	sy
  402c26:	f3bf 8f4f 	dsb	sy
  402c2a:	b662      	cpsie	i
  402c2c:	e7fe      	b.n	402c2c <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  402c2e:	6803      	ldr	r3, [r0, #0]
  402c30:	b333      	cbz	r3, 402c80 <xQueueGiveFromISR+0x88>
  402c32:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  402c34:	4b25      	ldr	r3, [pc, #148]	; (402ccc <xQueueGiveFromISR+0xd4>)
  402c36:	4798      	blx	r3
	__asm volatile
  402c38:	f3ef 8611 	mrs	r6, BASEPRI
  402c3c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c40:	b672      	cpsid	i
  402c42:	f383 8811 	msr	BASEPRI, r3
  402c46:	f3bf 8f6f 	isb	sy
  402c4a:	f3bf 8f4f 	dsb	sy
  402c4e:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  402c50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402c52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402c54:	429a      	cmp	r2, r3
  402c56:	d231      	bcs.n	402cbc <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  402c58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402c5a:	3301      	adds	r3, #1
  402c5c:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  402c5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402c60:	f1b3 3fff 	cmp.w	r3, #4294967295
  402c64:	d125      	bne.n	402cb2 <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  402c66:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402c68:	b1c3      	cbz	r3, 402c9c <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  402c6a:	2100      	movs	r1, #0
  402c6c:	4620      	mov	r0, r4
  402c6e:	4b18      	ldr	r3, [pc, #96]	; (402cd0 <xQueueGiveFromISR+0xd8>)
  402c70:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  402c72:	b32d      	cbz	r5, 402cc0 <xQueueGiveFromISR+0xc8>
  402c74:	2801      	cmp	r0, #1
  402c76:	d123      	bne.n	402cc0 <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  402c78:	6028      	str	r0, [r5, #0]
	__asm volatile
  402c7a:	f386 8811 	msr	BASEPRI, r6
}
  402c7e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  402c80:	6843      	ldr	r3, [r0, #4]
  402c82:	2b00      	cmp	r3, #0
  402c84:	d0d5      	beq.n	402c32 <xQueueGiveFromISR+0x3a>
	__asm volatile
  402c86:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c8a:	b672      	cpsid	i
  402c8c:	f383 8811 	msr	BASEPRI, r3
  402c90:	f3bf 8f6f 	isb	sy
  402c94:	f3bf 8f4f 	dsb	sy
  402c98:	b662      	cpsie	i
  402c9a:	e7fe      	b.n	402c9a <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402c9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402c9e:	b18b      	cbz	r3, 402cc4 <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402ca0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402ca4:	4b0b      	ldr	r3, [pc, #44]	; (402cd4 <xQueueGiveFromISR+0xdc>)
  402ca6:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  402ca8:	b175      	cbz	r5, 402cc8 <xQueueGiveFromISR+0xd0>
  402caa:	b168      	cbz	r0, 402cc8 <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  402cac:	2001      	movs	r0, #1
  402cae:	6028      	str	r0, [r5, #0]
  402cb0:	e7e3      	b.n	402c7a <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  402cb2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402cb4:	3301      	adds	r3, #1
  402cb6:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  402cb8:	2001      	movs	r0, #1
  402cba:	e7de      	b.n	402c7a <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  402cbc:	2000      	movs	r0, #0
  402cbe:	e7dc      	b.n	402c7a <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  402cc0:	2001      	movs	r0, #1
  402cc2:	e7da      	b.n	402c7a <xQueueGiveFromISR+0x82>
  402cc4:	2001      	movs	r0, #1
  402cc6:	e7d8      	b.n	402c7a <xQueueGiveFromISR+0x82>
  402cc8:	2001      	movs	r0, #1
  402cca:	e7d6      	b.n	402c7a <xQueueGiveFromISR+0x82>
  402ccc:	00402539 	.word	0x00402539
  402cd0:	004026b1 	.word	0x004026b1
  402cd4:	004037fd 	.word	0x004037fd

00402cd8 <xQueueGenericReceive>:
{
  402cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402cdc:	b084      	sub	sp, #16
  402cde:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  402ce0:	b198      	cbz	r0, 402d0a <xQueueGenericReceive+0x32>
  402ce2:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402ce4:	b1e1      	cbz	r1, 402d20 <xQueueGenericReceive+0x48>
  402ce6:	4698      	mov	r8, r3
  402ce8:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402cea:	4b61      	ldr	r3, [pc, #388]	; (402e70 <xQueueGenericReceive+0x198>)
  402cec:	4798      	blx	r3
  402cee:	bb28      	cbnz	r0, 402d3c <xQueueGenericReceive+0x64>
  402cf0:	9b01      	ldr	r3, [sp, #4]
  402cf2:	b353      	cbz	r3, 402d4a <xQueueGenericReceive+0x72>
  402cf4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402cf8:	b672      	cpsid	i
  402cfa:	f383 8811 	msr	BASEPRI, r3
  402cfe:	f3bf 8f6f 	isb	sy
  402d02:	f3bf 8f4f 	dsb	sy
  402d06:	b662      	cpsie	i
  402d08:	e7fe      	b.n	402d08 <xQueueGenericReceive+0x30>
  402d0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d0e:	b672      	cpsid	i
  402d10:	f383 8811 	msr	BASEPRI, r3
  402d14:	f3bf 8f6f 	isb	sy
  402d18:	f3bf 8f4f 	dsb	sy
  402d1c:	b662      	cpsie	i
  402d1e:	e7fe      	b.n	402d1e <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402d20:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402d22:	2a00      	cmp	r2, #0
  402d24:	d0df      	beq.n	402ce6 <xQueueGenericReceive+0xe>
  402d26:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d2a:	b672      	cpsid	i
  402d2c:	f383 8811 	msr	BASEPRI, r3
  402d30:	f3bf 8f6f 	isb	sy
  402d34:	f3bf 8f4f 	dsb	sy
  402d38:	b662      	cpsie	i
  402d3a:	e7fe      	b.n	402d3a <xQueueGenericReceive+0x62>
  402d3c:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  402d3e:	4d4d      	ldr	r5, [pc, #308]	; (402e74 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  402d40:	f8df a160 	ldr.w	sl, [pc, #352]	; 402ea4 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  402d44:	f8df 913c 	ldr.w	r9, [pc, #316]	; 402e84 <xQueueGenericReceive+0x1ac>
  402d48:	e04b      	b.n	402de2 <xQueueGenericReceive+0x10a>
  402d4a:	2600      	movs	r6, #0
  402d4c:	e7f7      	b.n	402d3e <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  402d4e:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  402d50:	4639      	mov	r1, r7
  402d52:	4620      	mov	r0, r4
  402d54:	4b48      	ldr	r3, [pc, #288]	; (402e78 <xQueueGenericReceive+0x1a0>)
  402d56:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  402d58:	f1b8 0f00 	cmp.w	r8, #0
  402d5c:	d11d      	bne.n	402d9a <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  402d5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402d60:	3b01      	subs	r3, #1
  402d62:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402d64:	6823      	ldr	r3, [r4, #0]
  402d66:	b913      	cbnz	r3, 402d6e <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  402d68:	4b44      	ldr	r3, [pc, #272]	; (402e7c <xQueueGenericReceive+0x1a4>)
  402d6a:	4798      	blx	r3
  402d6c:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402d6e:	6923      	ldr	r3, [r4, #16]
  402d70:	b16b      	cbz	r3, 402d8e <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  402d72:	f104 0010 	add.w	r0, r4, #16
  402d76:	4b42      	ldr	r3, [pc, #264]	; (402e80 <xQueueGenericReceive+0x1a8>)
  402d78:	4798      	blx	r3
  402d7a:	2801      	cmp	r0, #1
  402d7c:	d107      	bne.n	402d8e <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  402d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402d82:	4b40      	ldr	r3, [pc, #256]	; (402e84 <xQueueGenericReceive+0x1ac>)
  402d84:	601a      	str	r2, [r3, #0]
  402d86:	f3bf 8f4f 	dsb	sy
  402d8a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  402d8e:	4b3e      	ldr	r3, [pc, #248]	; (402e88 <xQueueGenericReceive+0x1b0>)
  402d90:	4798      	blx	r3
				return pdPASS;
  402d92:	2001      	movs	r0, #1
}
  402d94:	b004      	add	sp, #16
  402d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  402d9a:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402d9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402d9e:	2b00      	cmp	r3, #0
  402da0:	d0f5      	beq.n	402d8e <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402da2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402da6:	4b36      	ldr	r3, [pc, #216]	; (402e80 <xQueueGenericReceive+0x1a8>)
  402da8:	4798      	blx	r3
  402daa:	2800      	cmp	r0, #0
  402dac:	d0ef      	beq.n	402d8e <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  402dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402db2:	4b34      	ldr	r3, [pc, #208]	; (402e84 <xQueueGenericReceive+0x1ac>)
  402db4:	601a      	str	r2, [r3, #0]
  402db6:	f3bf 8f4f 	dsb	sy
  402dba:	f3bf 8f6f 	isb	sy
  402dbe:	e7e6      	b.n	402d8e <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  402dc0:	4b31      	ldr	r3, [pc, #196]	; (402e88 <xQueueGenericReceive+0x1b0>)
  402dc2:	4798      	blx	r3
					return errQUEUE_EMPTY;
  402dc4:	2000      	movs	r0, #0
  402dc6:	e7e5      	b.n	402d94 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  402dc8:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  402dca:	6860      	ldr	r0, [r4, #4]
  402dcc:	4b2f      	ldr	r3, [pc, #188]	; (402e8c <xQueueGenericReceive+0x1b4>)
  402dce:	4798      	blx	r3
						taskEXIT_CRITICAL();
  402dd0:	4b2d      	ldr	r3, [pc, #180]	; (402e88 <xQueueGenericReceive+0x1b0>)
  402dd2:	4798      	blx	r3
  402dd4:	e030      	b.n	402e38 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  402dd6:	4620      	mov	r0, r4
  402dd8:	4b2d      	ldr	r3, [pc, #180]	; (402e90 <xQueueGenericReceive+0x1b8>)
  402dda:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402ddc:	4b2d      	ldr	r3, [pc, #180]	; (402e94 <xQueueGenericReceive+0x1bc>)
  402dde:	4798      	blx	r3
  402de0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  402de2:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  402de4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402de6:	2b00      	cmp	r3, #0
  402de8:	d1b1      	bne.n	402d4e <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  402dea:	9b01      	ldr	r3, [sp, #4]
  402dec:	2b00      	cmp	r3, #0
  402dee:	d0e7      	beq.n	402dc0 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  402df0:	b90e      	cbnz	r6, 402df6 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  402df2:	a802      	add	r0, sp, #8
  402df4:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  402df6:	4b24      	ldr	r3, [pc, #144]	; (402e88 <xQueueGenericReceive+0x1b0>)
  402df8:	4798      	blx	r3
		vTaskSuspendAll();
  402dfa:	4b27      	ldr	r3, [pc, #156]	; (402e98 <xQueueGenericReceive+0x1c0>)
  402dfc:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402dfe:	47a8      	blx	r5
  402e00:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402e02:	f1b3 3fff 	cmp.w	r3, #4294967295
  402e06:	d101      	bne.n	402e0c <xQueueGenericReceive+0x134>
  402e08:	2300      	movs	r3, #0
  402e0a:	6463      	str	r3, [r4, #68]	; 0x44
  402e0c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402e12:	d101      	bne.n	402e18 <xQueueGenericReceive+0x140>
  402e14:	2300      	movs	r3, #0
  402e16:	64a3      	str	r3, [r4, #72]	; 0x48
  402e18:	4b1b      	ldr	r3, [pc, #108]	; (402e88 <xQueueGenericReceive+0x1b0>)
  402e1a:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402e1c:	a901      	add	r1, sp, #4
  402e1e:	a802      	add	r0, sp, #8
  402e20:	4b1e      	ldr	r3, [pc, #120]	; (402e9c <xQueueGenericReceive+0x1c4>)
  402e22:	4798      	blx	r3
  402e24:	b9e8      	cbnz	r0, 402e62 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  402e26:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  402e28:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  402e2a:	4b17      	ldr	r3, [pc, #92]	; (402e88 <xQueueGenericReceive+0x1b0>)
  402e2c:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  402e2e:	2e00      	cmp	r6, #0
  402e30:	d1d1      	bne.n	402dd6 <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402e32:	6823      	ldr	r3, [r4, #0]
  402e34:	2b00      	cmp	r3, #0
  402e36:	d0c7      	beq.n	402dc8 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  402e38:	9901      	ldr	r1, [sp, #4]
  402e3a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402e3e:	4b18      	ldr	r3, [pc, #96]	; (402ea0 <xQueueGenericReceive+0x1c8>)
  402e40:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402e42:	4620      	mov	r0, r4
  402e44:	4b12      	ldr	r3, [pc, #72]	; (402e90 <xQueueGenericReceive+0x1b8>)
  402e46:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402e48:	4b12      	ldr	r3, [pc, #72]	; (402e94 <xQueueGenericReceive+0x1bc>)
  402e4a:	4798      	blx	r3
  402e4c:	2800      	cmp	r0, #0
  402e4e:	d1c7      	bne.n	402de0 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  402e50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402e54:	f8c9 3000 	str.w	r3, [r9]
  402e58:	f3bf 8f4f 	dsb	sy
  402e5c:	f3bf 8f6f 	isb	sy
  402e60:	e7be      	b.n	402de0 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  402e62:	4620      	mov	r0, r4
  402e64:	4b0a      	ldr	r3, [pc, #40]	; (402e90 <xQueueGenericReceive+0x1b8>)
  402e66:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402e68:	4b0a      	ldr	r3, [pc, #40]	; (402e94 <xQueueGenericReceive+0x1bc>)
  402e6a:	4798      	blx	r3
			return errQUEUE_EMPTY;
  402e6c:	2000      	movs	r0, #0
  402e6e:	e791      	b.n	402d94 <xQueueGenericReceive+0xbc>
  402e70:	00403965 	.word	0x00403965
  402e74:	00402341 	.word	0x00402341
  402e78:	00402739 	.word	0x00402739
  402e7c:	00403ae5 	.word	0x00403ae5
  402e80:	004037fd 	.word	0x004037fd
  402e84:	e000ed04 	.word	0xe000ed04
  402e88:	0040238d 	.word	0x0040238d
  402e8c:	00403985 	.word	0x00403985
  402e90:	00402761 	.word	0x00402761
  402e94:	004033e1 	.word	0x004033e1
  402e98:	00403279 	.word	0x00403279
  402e9c:	004038c5 	.word	0x004038c5
  402ea0:	004036f9 	.word	0x004036f9
  402ea4:	00403895 	.word	0x00403895

00402ea8 <vQueueAddToRegistry>:
	{
  402ea8:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  402eaa:	4b0b      	ldr	r3, [pc, #44]	; (402ed8 <vQueueAddToRegistry+0x30>)
  402eac:	681b      	ldr	r3, [r3, #0]
  402eae:	b153      	cbz	r3, 402ec6 <vQueueAddToRegistry+0x1e>
  402eb0:	2301      	movs	r3, #1
  402eb2:	4c09      	ldr	r4, [pc, #36]	; (402ed8 <vQueueAddToRegistry+0x30>)
  402eb4:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  402eb8:	b132      	cbz	r2, 402ec8 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402eba:	3301      	adds	r3, #1
  402ebc:	2b08      	cmp	r3, #8
  402ebe:	d1f9      	bne.n	402eb4 <vQueueAddToRegistry+0xc>
	}
  402ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
  402ec4:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402ec6:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  402ec8:	4a03      	ldr	r2, [pc, #12]	; (402ed8 <vQueueAddToRegistry+0x30>)
  402eca:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  402ece:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  402ed2:	6058      	str	r0, [r3, #4]
				break;
  402ed4:	e7f4      	b.n	402ec0 <vQueueAddToRegistry+0x18>
  402ed6:	bf00      	nop
  402ed8:	2040c828 	.word	0x2040c828

00402edc <vQueueWaitForMessageRestricted>:
	{
  402edc:	b570      	push	{r4, r5, r6, lr}
  402ede:	4604      	mov	r4, r0
  402ee0:	460d      	mov	r5, r1
  402ee2:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  402ee4:	4b0f      	ldr	r3, [pc, #60]	; (402f24 <vQueueWaitForMessageRestricted+0x48>)
  402ee6:	4798      	blx	r3
  402ee8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402eea:	f1b3 3fff 	cmp.w	r3, #4294967295
  402eee:	d00b      	beq.n	402f08 <vQueueWaitForMessageRestricted+0x2c>
  402ef0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
  402ef6:	d00a      	beq.n	402f0e <vQueueWaitForMessageRestricted+0x32>
  402ef8:	4b0b      	ldr	r3, [pc, #44]	; (402f28 <vQueueWaitForMessageRestricted+0x4c>)
  402efa:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402efc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402efe:	b14b      	cbz	r3, 402f14 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  402f00:	4620      	mov	r0, r4
  402f02:	4b0a      	ldr	r3, [pc, #40]	; (402f2c <vQueueWaitForMessageRestricted+0x50>)
  402f04:	4798      	blx	r3
  402f06:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  402f08:	2300      	movs	r3, #0
  402f0a:	6463      	str	r3, [r4, #68]	; 0x44
  402f0c:	e7f0      	b.n	402ef0 <vQueueWaitForMessageRestricted+0x14>
  402f0e:	2300      	movs	r3, #0
  402f10:	64a3      	str	r3, [r4, #72]	; 0x48
  402f12:	e7f1      	b.n	402ef8 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  402f14:	4632      	mov	r2, r6
  402f16:	4629      	mov	r1, r5
  402f18:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402f1c:	4b04      	ldr	r3, [pc, #16]	; (402f30 <vQueueWaitForMessageRestricted+0x54>)
  402f1e:	4798      	blx	r3
  402f20:	e7ee      	b.n	402f00 <vQueueWaitForMessageRestricted+0x24>
  402f22:	bf00      	nop
  402f24:	00402341 	.word	0x00402341
  402f28:	0040238d 	.word	0x0040238d
  402f2c:	00402761 	.word	0x00402761
  402f30:	0040377d 	.word	0x0040377d

00402f34 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402f34:	4b08      	ldr	r3, [pc, #32]	; (402f58 <prvResetNextTaskUnblockTime+0x24>)
  402f36:	681b      	ldr	r3, [r3, #0]
  402f38:	681b      	ldr	r3, [r3, #0]
  402f3a:	b13b      	cbz	r3, 402f4c <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402f3c:	4b06      	ldr	r3, [pc, #24]	; (402f58 <prvResetNextTaskUnblockTime+0x24>)
  402f3e:	681b      	ldr	r3, [r3, #0]
  402f40:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  402f42:	68db      	ldr	r3, [r3, #12]
  402f44:	685a      	ldr	r2, [r3, #4]
  402f46:	4b05      	ldr	r3, [pc, #20]	; (402f5c <prvResetNextTaskUnblockTime+0x28>)
  402f48:	601a      	str	r2, [r3, #0]
  402f4a:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402f4c:	f04f 32ff 	mov.w	r2, #4294967295
  402f50:	4b02      	ldr	r3, [pc, #8]	; (402f5c <prvResetNextTaskUnblockTime+0x28>)
  402f52:	601a      	str	r2, [r3, #0]
  402f54:	4770      	bx	lr
  402f56:	bf00      	nop
  402f58:	2040c628 	.word	0x2040c628
  402f5c:	2040c6d4 	.word	0x2040c6d4

00402f60 <prvAddCurrentTaskToDelayedList>:
{
  402f60:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  402f62:	4b0f      	ldr	r3, [pc, #60]	; (402fa0 <prvAddCurrentTaskToDelayedList+0x40>)
  402f64:	681b      	ldr	r3, [r3, #0]
  402f66:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  402f68:	4b0e      	ldr	r3, [pc, #56]	; (402fa4 <prvAddCurrentTaskToDelayedList+0x44>)
  402f6a:	681b      	ldr	r3, [r3, #0]
  402f6c:	4298      	cmp	r0, r3
  402f6e:	d30e      	bcc.n	402f8e <prvAddCurrentTaskToDelayedList+0x2e>
  402f70:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402f72:	4b0d      	ldr	r3, [pc, #52]	; (402fa8 <prvAddCurrentTaskToDelayedList+0x48>)
  402f74:	6818      	ldr	r0, [r3, #0]
  402f76:	4b0a      	ldr	r3, [pc, #40]	; (402fa0 <prvAddCurrentTaskToDelayedList+0x40>)
  402f78:	6819      	ldr	r1, [r3, #0]
  402f7a:	3104      	adds	r1, #4
  402f7c:	4b0b      	ldr	r3, [pc, #44]	; (402fac <prvAddCurrentTaskToDelayedList+0x4c>)
  402f7e:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  402f80:	4b0b      	ldr	r3, [pc, #44]	; (402fb0 <prvAddCurrentTaskToDelayedList+0x50>)
  402f82:	681b      	ldr	r3, [r3, #0]
  402f84:	429c      	cmp	r4, r3
  402f86:	d201      	bcs.n	402f8c <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  402f88:	4b09      	ldr	r3, [pc, #36]	; (402fb0 <prvAddCurrentTaskToDelayedList+0x50>)
  402f8a:	601c      	str	r4, [r3, #0]
  402f8c:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402f8e:	4b09      	ldr	r3, [pc, #36]	; (402fb4 <prvAddCurrentTaskToDelayedList+0x54>)
  402f90:	6818      	ldr	r0, [r3, #0]
  402f92:	4b03      	ldr	r3, [pc, #12]	; (402fa0 <prvAddCurrentTaskToDelayedList+0x40>)
  402f94:	6819      	ldr	r1, [r3, #0]
  402f96:	3104      	adds	r1, #4
  402f98:	4b04      	ldr	r3, [pc, #16]	; (402fac <prvAddCurrentTaskToDelayedList+0x4c>)
  402f9a:	4798      	blx	r3
  402f9c:	bd10      	pop	{r4, pc}
  402f9e:	bf00      	nop
  402fa0:	2040c624 	.word	0x2040c624
  402fa4:	2040c71c 	.word	0x2040c71c
  402fa8:	2040c628 	.word	0x2040c628
  402fac:	00402229 	.word	0x00402229
  402fb0:	2040c6d4 	.word	0x2040c6d4
  402fb4:	2040c62c 	.word	0x2040c62c

00402fb8 <xTaskGenericCreate>:
{
  402fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402fbc:	b083      	sub	sp, #12
  402fbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  402fc0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  402fc4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  402fc6:	b160      	cbz	r0, 402fe2 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  402fc8:	2d04      	cmp	r5, #4
  402fca:	d915      	bls.n	402ff8 <xTaskGenericCreate+0x40>
  402fcc:	f04f 0380 	mov.w	r3, #128	; 0x80
  402fd0:	b672      	cpsid	i
  402fd2:	f383 8811 	msr	BASEPRI, r3
  402fd6:	f3bf 8f6f 	isb	sy
  402fda:	f3bf 8f4f 	dsb	sy
  402fde:	b662      	cpsie	i
  402fe0:	e7fe      	b.n	402fe0 <xTaskGenericCreate+0x28>
  402fe2:	f04f 0380 	mov.w	r3, #128	; 0x80
  402fe6:	b672      	cpsid	i
  402fe8:	f383 8811 	msr	BASEPRI, r3
  402fec:	f3bf 8f6f 	isb	sy
  402ff0:	f3bf 8f4f 	dsb	sy
  402ff4:	b662      	cpsie	i
  402ff6:	e7fe      	b.n	402ff6 <xTaskGenericCreate+0x3e>
  402ff8:	9001      	str	r0, [sp, #4]
  402ffa:	4698      	mov	r8, r3
  402ffc:	4691      	mov	r9, r2
  402ffe:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403000:	b936      	cbnz	r6, 403010 <xTaskGenericCreate+0x58>
  403002:	0090      	lsls	r0, r2, #2
  403004:	4b62      	ldr	r3, [pc, #392]	; (403190 <xTaskGenericCreate+0x1d8>)
  403006:	4798      	blx	r3
		if( pxStack != NULL )
  403008:	4606      	mov	r6, r0
  40300a:	2800      	cmp	r0, #0
  40300c:	f000 809e 	beq.w	40314c <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  403010:	2058      	movs	r0, #88	; 0x58
  403012:	4b5f      	ldr	r3, [pc, #380]	; (403190 <xTaskGenericCreate+0x1d8>)
  403014:	4798      	blx	r3
			if( pxNewTCB != NULL )
  403016:	4604      	mov	r4, r0
  403018:	2800      	cmp	r0, #0
  40301a:	f000 8094 	beq.w	403146 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  40301e:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  403020:	ea4f 0289 	mov.w	r2, r9, lsl #2
  403024:	21a5      	movs	r1, #165	; 0xa5
  403026:	4630      	mov	r0, r6
  403028:	4b5a      	ldr	r3, [pc, #360]	; (403194 <xTaskGenericCreate+0x1dc>)
  40302a:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  40302c:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  403030:	444e      	add	r6, r9
  403032:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403034:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  403038:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  40303c:	783b      	ldrb	r3, [r7, #0]
  40303e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  403042:	783b      	ldrb	r3, [r7, #0]
  403044:	2b00      	cmp	r3, #0
  403046:	f040 8084 	bne.w	403152 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  40304a:	2700      	movs	r7, #0
  40304c:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  403050:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  403052:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  403054:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  403056:	f104 0904 	add.w	r9, r4, #4
  40305a:	4648      	mov	r0, r9
  40305c:	f8df b184 	ldr.w	fp, [pc, #388]	; 4031e4 <xTaskGenericCreate+0x22c>
  403060:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  403062:	f104 0018 	add.w	r0, r4, #24
  403066:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  403068:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40306a:	f1c5 0305 	rsb	r3, r5, #5
  40306e:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  403070:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  403072:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  403074:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  403078:	4642      	mov	r2, r8
  40307a:	9901      	ldr	r1, [sp, #4]
  40307c:	4630      	mov	r0, r6
  40307e:	4b46      	ldr	r3, [pc, #280]	; (403198 <xTaskGenericCreate+0x1e0>)
  403080:	4798      	blx	r3
  403082:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  403084:	f1ba 0f00 	cmp.w	sl, #0
  403088:	d001      	beq.n	40308e <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  40308a:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  40308e:	4b43      	ldr	r3, [pc, #268]	; (40319c <xTaskGenericCreate+0x1e4>)
  403090:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  403092:	4a43      	ldr	r2, [pc, #268]	; (4031a0 <xTaskGenericCreate+0x1e8>)
  403094:	6813      	ldr	r3, [r2, #0]
  403096:	3301      	adds	r3, #1
  403098:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  40309a:	4b42      	ldr	r3, [pc, #264]	; (4031a4 <xTaskGenericCreate+0x1ec>)
  40309c:	681b      	ldr	r3, [r3, #0]
  40309e:	2b00      	cmp	r3, #0
  4030a0:	d166      	bne.n	403170 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  4030a2:	4b40      	ldr	r3, [pc, #256]	; (4031a4 <xTaskGenericCreate+0x1ec>)
  4030a4:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4030a6:	6813      	ldr	r3, [r2, #0]
  4030a8:	2b01      	cmp	r3, #1
  4030aa:	d121      	bne.n	4030f0 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4030ac:	4f3e      	ldr	r7, [pc, #248]	; (4031a8 <xTaskGenericCreate+0x1f0>)
  4030ae:	4638      	mov	r0, r7
  4030b0:	4e3e      	ldr	r6, [pc, #248]	; (4031ac <xTaskGenericCreate+0x1f4>)
  4030b2:	47b0      	blx	r6
  4030b4:	f107 0014 	add.w	r0, r7, #20
  4030b8:	47b0      	blx	r6
  4030ba:	f107 0028 	add.w	r0, r7, #40	; 0x28
  4030be:	47b0      	blx	r6
  4030c0:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  4030c4:	47b0      	blx	r6
  4030c6:	f107 0050 	add.w	r0, r7, #80	; 0x50
  4030ca:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  4030cc:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4031e8 <xTaskGenericCreate+0x230>
  4030d0:	4640      	mov	r0, r8
  4030d2:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  4030d4:	4f36      	ldr	r7, [pc, #216]	; (4031b0 <xTaskGenericCreate+0x1f8>)
  4030d6:	4638      	mov	r0, r7
  4030d8:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  4030da:	4836      	ldr	r0, [pc, #216]	; (4031b4 <xTaskGenericCreate+0x1fc>)
  4030dc:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  4030de:	4836      	ldr	r0, [pc, #216]	; (4031b8 <xTaskGenericCreate+0x200>)
  4030e0:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  4030e2:	4836      	ldr	r0, [pc, #216]	; (4031bc <xTaskGenericCreate+0x204>)
  4030e4:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  4030e6:	4b36      	ldr	r3, [pc, #216]	; (4031c0 <xTaskGenericCreate+0x208>)
  4030e8:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4030ec:	4b35      	ldr	r3, [pc, #212]	; (4031c4 <xTaskGenericCreate+0x20c>)
  4030ee:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  4030f0:	4a35      	ldr	r2, [pc, #212]	; (4031c8 <xTaskGenericCreate+0x210>)
  4030f2:	6813      	ldr	r3, [r2, #0]
  4030f4:	3301      	adds	r3, #1
  4030f6:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  4030f8:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  4030fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4030fc:	4a33      	ldr	r2, [pc, #204]	; (4031cc <xTaskGenericCreate+0x214>)
  4030fe:	6811      	ldr	r1, [r2, #0]
  403100:	2301      	movs	r3, #1
  403102:	4083      	lsls	r3, r0
  403104:	430b      	orrs	r3, r1
  403106:	6013      	str	r3, [r2, #0]
  403108:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40310c:	4649      	mov	r1, r9
  40310e:	4b26      	ldr	r3, [pc, #152]	; (4031a8 <xTaskGenericCreate+0x1f0>)
  403110:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403114:	4b2e      	ldr	r3, [pc, #184]	; (4031d0 <xTaskGenericCreate+0x218>)
  403116:	4798      	blx	r3
		taskEXIT_CRITICAL();
  403118:	4b2e      	ldr	r3, [pc, #184]	; (4031d4 <xTaskGenericCreate+0x21c>)
  40311a:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  40311c:	4b2e      	ldr	r3, [pc, #184]	; (4031d8 <xTaskGenericCreate+0x220>)
  40311e:	681b      	ldr	r3, [r3, #0]
  403120:	2b00      	cmp	r3, #0
  403122:	d031      	beq.n	403188 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  403124:	4b1f      	ldr	r3, [pc, #124]	; (4031a4 <xTaskGenericCreate+0x1ec>)
  403126:	681b      	ldr	r3, [r3, #0]
  403128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40312a:	429d      	cmp	r5, r3
  40312c:	d92e      	bls.n	40318c <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  40312e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403132:	4b2a      	ldr	r3, [pc, #168]	; (4031dc <xTaskGenericCreate+0x224>)
  403134:	601a      	str	r2, [r3, #0]
  403136:	f3bf 8f4f 	dsb	sy
  40313a:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  40313e:	2001      	movs	r0, #1
}
  403140:	b003      	add	sp, #12
  403142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  403146:	4630      	mov	r0, r6
  403148:	4b25      	ldr	r3, [pc, #148]	; (4031e0 <xTaskGenericCreate+0x228>)
  40314a:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  40314c:	f04f 30ff 	mov.w	r0, #4294967295
  403150:	e7f6      	b.n	403140 <xTaskGenericCreate+0x188>
  403152:	463b      	mov	r3, r7
  403154:	f104 0234 	add.w	r2, r4, #52	; 0x34
  403158:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  40315a:	7859      	ldrb	r1, [r3, #1]
  40315c:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  403160:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  403164:	2900      	cmp	r1, #0
  403166:	f43f af70 	beq.w	40304a <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40316a:	42bb      	cmp	r3, r7
  40316c:	d1f5      	bne.n	40315a <xTaskGenericCreate+0x1a2>
  40316e:	e76c      	b.n	40304a <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  403170:	4b19      	ldr	r3, [pc, #100]	; (4031d8 <xTaskGenericCreate+0x220>)
  403172:	681b      	ldr	r3, [r3, #0]
  403174:	2b00      	cmp	r3, #0
  403176:	d1bb      	bne.n	4030f0 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  403178:	4b0a      	ldr	r3, [pc, #40]	; (4031a4 <xTaskGenericCreate+0x1ec>)
  40317a:	681b      	ldr	r3, [r3, #0]
  40317c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40317e:	429d      	cmp	r5, r3
  403180:	d3b6      	bcc.n	4030f0 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  403182:	4b08      	ldr	r3, [pc, #32]	; (4031a4 <xTaskGenericCreate+0x1ec>)
  403184:	601c      	str	r4, [r3, #0]
  403186:	e7b3      	b.n	4030f0 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  403188:	2001      	movs	r0, #1
  40318a:	e7d9      	b.n	403140 <xTaskGenericCreate+0x188>
  40318c:	2001      	movs	r0, #1
	return xReturn;
  40318e:	e7d7      	b.n	403140 <xTaskGenericCreate+0x188>
  403190:	0040259d 	.word	0x0040259d
  403194:	00404d1d 	.word	0x00404d1d
  403198:	004022f5 	.word	0x004022f5
  40319c:	00402341 	.word	0x00402341
  4031a0:	2040c694 	.word	0x2040c694
  4031a4:	2040c624 	.word	0x2040c624
  4031a8:	2040c630 	.word	0x2040c630
  4031ac:	004021f5 	.word	0x004021f5
  4031b0:	2040c6c0 	.word	0x2040c6c0
  4031b4:	2040c6dc 	.word	0x2040c6dc
  4031b8:	2040c708 	.word	0x2040c708
  4031bc:	2040c6f4 	.word	0x2040c6f4
  4031c0:	2040c628 	.word	0x2040c628
  4031c4:	2040c62c 	.word	0x2040c62c
  4031c8:	2040c6a0 	.word	0x2040c6a0
  4031cc:	2040c6a8 	.word	0x2040c6a8
  4031d0:	00402211 	.word	0x00402211
  4031d4:	0040238d 	.word	0x0040238d
  4031d8:	2040c6f0 	.word	0x2040c6f0
  4031dc:	e000ed04 	.word	0xe000ed04
  4031e0:	0040260d 	.word	0x0040260d
  4031e4:	0040220b 	.word	0x0040220b
  4031e8:	2040c6ac 	.word	0x2040c6ac

004031ec <vTaskStartScheduler>:
{
  4031ec:	b510      	push	{r4, lr}
  4031ee:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  4031f0:	2300      	movs	r3, #0
  4031f2:	9303      	str	r3, [sp, #12]
  4031f4:	9302      	str	r3, [sp, #8]
  4031f6:	9301      	str	r3, [sp, #4]
  4031f8:	9300      	str	r3, [sp, #0]
  4031fa:	2282      	movs	r2, #130	; 0x82
  4031fc:	4916      	ldr	r1, [pc, #88]	; (403258 <vTaskStartScheduler+0x6c>)
  4031fe:	4817      	ldr	r0, [pc, #92]	; (40325c <vTaskStartScheduler+0x70>)
  403200:	4c17      	ldr	r4, [pc, #92]	; (403260 <vTaskStartScheduler+0x74>)
  403202:	47a0      	blx	r4
		if( xReturn == pdPASS )
  403204:	2801      	cmp	r0, #1
  403206:	d00b      	beq.n	403220 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  403208:	bb20      	cbnz	r0, 403254 <vTaskStartScheduler+0x68>
  40320a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40320e:	b672      	cpsid	i
  403210:	f383 8811 	msr	BASEPRI, r3
  403214:	f3bf 8f6f 	isb	sy
  403218:	f3bf 8f4f 	dsb	sy
  40321c:	b662      	cpsie	i
  40321e:	e7fe      	b.n	40321e <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  403220:	4b10      	ldr	r3, [pc, #64]	; (403264 <vTaskStartScheduler+0x78>)
  403222:	4798      	blx	r3
	if( xReturn == pdPASS )
  403224:	2801      	cmp	r0, #1
  403226:	d1ef      	bne.n	403208 <vTaskStartScheduler+0x1c>
  403228:	f04f 0380 	mov.w	r3, #128	; 0x80
  40322c:	b672      	cpsid	i
  40322e:	f383 8811 	msr	BASEPRI, r3
  403232:	f3bf 8f6f 	isb	sy
  403236:	f3bf 8f4f 	dsb	sy
  40323a:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  40323c:	f04f 32ff 	mov.w	r2, #4294967295
  403240:	4b09      	ldr	r3, [pc, #36]	; (403268 <vTaskStartScheduler+0x7c>)
  403242:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  403244:	2201      	movs	r2, #1
  403246:	4b09      	ldr	r3, [pc, #36]	; (40326c <vTaskStartScheduler+0x80>)
  403248:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  40324a:	2200      	movs	r2, #0
  40324c:	4b08      	ldr	r3, [pc, #32]	; (403270 <vTaskStartScheduler+0x84>)
  40324e:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  403250:	4b08      	ldr	r3, [pc, #32]	; (403274 <vTaskStartScheduler+0x88>)
  403252:	4798      	blx	r3
}
  403254:	b004      	add	sp, #16
  403256:	bd10      	pop	{r4, pc}
  403258:	004075f8 	.word	0x004075f8
  40325c:	00403591 	.word	0x00403591
  403260:	00402fb9 	.word	0x00402fb9
  403264:	00403bd1 	.word	0x00403bd1
  403268:	2040c6d4 	.word	0x2040c6d4
  40326c:	2040c6f0 	.word	0x2040c6f0
  403270:	2040c71c 	.word	0x2040c71c
  403274:	00402475 	.word	0x00402475

00403278 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  403278:	4a02      	ldr	r2, [pc, #8]	; (403284 <vTaskSuspendAll+0xc>)
  40327a:	6813      	ldr	r3, [r2, #0]
  40327c:	3301      	adds	r3, #1
  40327e:	6013      	str	r3, [r2, #0]
  403280:	4770      	bx	lr
  403282:	bf00      	nop
  403284:	2040c69c 	.word	0x2040c69c

00403288 <xTaskGetTickCount>:
		xTicks = xTickCount;
  403288:	4b01      	ldr	r3, [pc, #4]	; (403290 <xTaskGetTickCount+0x8>)
  40328a:	6818      	ldr	r0, [r3, #0]
}
  40328c:	4770      	bx	lr
  40328e:	bf00      	nop
  403290:	2040c71c 	.word	0x2040c71c

00403294 <xTaskIncrementTick>:
{
  403294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403298:	4b42      	ldr	r3, [pc, #264]	; (4033a4 <xTaskIncrementTick+0x110>)
  40329a:	681b      	ldr	r3, [r3, #0]
  40329c:	2b00      	cmp	r3, #0
  40329e:	d178      	bne.n	403392 <xTaskIncrementTick+0xfe>
		++xTickCount;
  4032a0:	4b41      	ldr	r3, [pc, #260]	; (4033a8 <xTaskIncrementTick+0x114>)
  4032a2:	681a      	ldr	r2, [r3, #0]
  4032a4:	3201      	adds	r2, #1
  4032a6:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4032a8:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4032aa:	b9d6      	cbnz	r6, 4032e2 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  4032ac:	4b3f      	ldr	r3, [pc, #252]	; (4033ac <xTaskIncrementTick+0x118>)
  4032ae:	681b      	ldr	r3, [r3, #0]
  4032b0:	681b      	ldr	r3, [r3, #0]
  4032b2:	b153      	cbz	r3, 4032ca <xTaskIncrementTick+0x36>
  4032b4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4032b8:	b672      	cpsid	i
  4032ba:	f383 8811 	msr	BASEPRI, r3
  4032be:	f3bf 8f6f 	isb	sy
  4032c2:	f3bf 8f4f 	dsb	sy
  4032c6:	b662      	cpsie	i
  4032c8:	e7fe      	b.n	4032c8 <xTaskIncrementTick+0x34>
  4032ca:	4a38      	ldr	r2, [pc, #224]	; (4033ac <xTaskIncrementTick+0x118>)
  4032cc:	6811      	ldr	r1, [r2, #0]
  4032ce:	4b38      	ldr	r3, [pc, #224]	; (4033b0 <xTaskIncrementTick+0x11c>)
  4032d0:	6818      	ldr	r0, [r3, #0]
  4032d2:	6010      	str	r0, [r2, #0]
  4032d4:	6019      	str	r1, [r3, #0]
  4032d6:	4a37      	ldr	r2, [pc, #220]	; (4033b4 <xTaskIncrementTick+0x120>)
  4032d8:	6813      	ldr	r3, [r2, #0]
  4032da:	3301      	adds	r3, #1
  4032dc:	6013      	str	r3, [r2, #0]
  4032de:	4b36      	ldr	r3, [pc, #216]	; (4033b8 <xTaskIncrementTick+0x124>)
  4032e0:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  4032e2:	4b36      	ldr	r3, [pc, #216]	; (4033bc <xTaskIncrementTick+0x128>)
  4032e4:	681b      	ldr	r3, [r3, #0]
  4032e6:	429e      	cmp	r6, r3
  4032e8:	d218      	bcs.n	40331c <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  4032ea:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4032ec:	4b34      	ldr	r3, [pc, #208]	; (4033c0 <xTaskIncrementTick+0x12c>)
  4032ee:	681b      	ldr	r3, [r3, #0]
  4032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4032f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4032f6:	4a33      	ldr	r2, [pc, #204]	; (4033c4 <xTaskIncrementTick+0x130>)
  4032f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  4032fc:	2b02      	cmp	r3, #2
  4032fe:	bf28      	it	cs
  403300:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  403302:	4b31      	ldr	r3, [pc, #196]	; (4033c8 <xTaskIncrementTick+0x134>)
  403304:	681b      	ldr	r3, [r3, #0]
  403306:	b90b      	cbnz	r3, 40330c <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  403308:	4b30      	ldr	r3, [pc, #192]	; (4033cc <xTaskIncrementTick+0x138>)
  40330a:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  40330c:	4b30      	ldr	r3, [pc, #192]	; (4033d0 <xTaskIncrementTick+0x13c>)
  40330e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  403310:	2b00      	cmp	r3, #0
}
  403312:	bf0c      	ite	eq
  403314:	4620      	moveq	r0, r4
  403316:	2001      	movne	r0, #1
  403318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40331c:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40331e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4033ac <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  403322:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4033dc <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  403326:	4f2b      	ldr	r7, [pc, #172]	; (4033d4 <xTaskIncrementTick+0x140>)
  403328:	e01f      	b.n	40336a <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  40332a:	f04f 32ff 	mov.w	r2, #4294967295
  40332e:	4b23      	ldr	r3, [pc, #140]	; (4033bc <xTaskIncrementTick+0x128>)
  403330:	601a      	str	r2, [r3, #0]
						break;
  403332:	e7db      	b.n	4032ec <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  403334:	4a21      	ldr	r2, [pc, #132]	; (4033bc <xTaskIncrementTick+0x128>)
  403336:	6013      	str	r3, [r2, #0]
							break;
  403338:	e7d8      	b.n	4032ec <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40333a:	f105 0018 	add.w	r0, r5, #24
  40333e:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  403340:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  403342:	683a      	ldr	r2, [r7, #0]
  403344:	2301      	movs	r3, #1
  403346:	4083      	lsls	r3, r0
  403348:	4313      	orrs	r3, r2
  40334a:	603b      	str	r3, [r7, #0]
  40334c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403350:	4651      	mov	r1, sl
  403352:	4b1c      	ldr	r3, [pc, #112]	; (4033c4 <xTaskIncrementTick+0x130>)
  403354:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403358:	4b1f      	ldr	r3, [pc, #124]	; (4033d8 <xTaskIncrementTick+0x144>)
  40335a:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40335c:	4b18      	ldr	r3, [pc, #96]	; (4033c0 <xTaskIncrementTick+0x12c>)
  40335e:	681b      	ldr	r3, [r3, #0]
  403360:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  403362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  403364:	429a      	cmp	r2, r3
  403366:	bf28      	it	cs
  403368:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40336a:	f8d9 3000 	ldr.w	r3, [r9]
  40336e:	681b      	ldr	r3, [r3, #0]
  403370:	2b00      	cmp	r3, #0
  403372:	d0da      	beq.n	40332a <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  403374:	f8d9 3000 	ldr.w	r3, [r9]
  403378:	68db      	ldr	r3, [r3, #12]
  40337a:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  40337c:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  40337e:	429e      	cmp	r6, r3
  403380:	d3d8      	bcc.n	403334 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  403382:	f105 0a04 	add.w	sl, r5, #4
  403386:	4650      	mov	r0, sl
  403388:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  40338a:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40338c:	2b00      	cmp	r3, #0
  40338e:	d1d4      	bne.n	40333a <xTaskIncrementTick+0xa6>
  403390:	e7d6      	b.n	403340 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  403392:	4a0d      	ldr	r2, [pc, #52]	; (4033c8 <xTaskIncrementTick+0x134>)
  403394:	6813      	ldr	r3, [r2, #0]
  403396:	3301      	adds	r3, #1
  403398:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  40339a:	4b0c      	ldr	r3, [pc, #48]	; (4033cc <xTaskIncrementTick+0x138>)
  40339c:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  40339e:	2400      	movs	r4, #0
  4033a0:	e7b4      	b.n	40330c <xTaskIncrementTick+0x78>
  4033a2:	bf00      	nop
  4033a4:	2040c69c 	.word	0x2040c69c
  4033a8:	2040c71c 	.word	0x2040c71c
  4033ac:	2040c628 	.word	0x2040c628
  4033b0:	2040c62c 	.word	0x2040c62c
  4033b4:	2040c6d8 	.word	0x2040c6d8
  4033b8:	00402f35 	.word	0x00402f35
  4033bc:	2040c6d4 	.word	0x2040c6d4
  4033c0:	2040c624 	.word	0x2040c624
  4033c4:	2040c630 	.word	0x2040c630
  4033c8:	2040c698 	.word	0x2040c698
  4033cc:	00404289 	.word	0x00404289
  4033d0:	2040c720 	.word	0x2040c720
  4033d4:	2040c6a8 	.word	0x2040c6a8
  4033d8:	00402211 	.word	0x00402211
  4033dc:	0040225d 	.word	0x0040225d

004033e0 <xTaskResumeAll>:
{
  4033e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  4033e4:	4b38      	ldr	r3, [pc, #224]	; (4034c8 <xTaskResumeAll+0xe8>)
  4033e6:	681b      	ldr	r3, [r3, #0]
  4033e8:	b953      	cbnz	r3, 403400 <xTaskResumeAll+0x20>
  4033ea:	f04f 0380 	mov.w	r3, #128	; 0x80
  4033ee:	b672      	cpsid	i
  4033f0:	f383 8811 	msr	BASEPRI, r3
  4033f4:	f3bf 8f6f 	isb	sy
  4033f8:	f3bf 8f4f 	dsb	sy
  4033fc:	b662      	cpsie	i
  4033fe:	e7fe      	b.n	4033fe <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  403400:	4b32      	ldr	r3, [pc, #200]	; (4034cc <xTaskResumeAll+0xec>)
  403402:	4798      	blx	r3
		--uxSchedulerSuspended;
  403404:	4b30      	ldr	r3, [pc, #192]	; (4034c8 <xTaskResumeAll+0xe8>)
  403406:	681a      	ldr	r2, [r3, #0]
  403408:	3a01      	subs	r2, #1
  40340a:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40340c:	681b      	ldr	r3, [r3, #0]
  40340e:	2b00      	cmp	r3, #0
  403410:	d155      	bne.n	4034be <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  403412:	4b2f      	ldr	r3, [pc, #188]	; (4034d0 <xTaskResumeAll+0xf0>)
  403414:	681b      	ldr	r3, [r3, #0]
  403416:	2b00      	cmp	r3, #0
  403418:	d132      	bne.n	403480 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  40341a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  40341c:	4b2d      	ldr	r3, [pc, #180]	; (4034d4 <xTaskResumeAll+0xf4>)
  40341e:	4798      	blx	r3
}
  403420:	4620      	mov	r0, r4
  403422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  403426:	68fb      	ldr	r3, [r7, #12]
  403428:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40342a:	f104 0018 	add.w	r0, r4, #24
  40342e:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  403430:	f104 0804 	add.w	r8, r4, #4
  403434:	4640      	mov	r0, r8
  403436:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  403438:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40343a:	682a      	ldr	r2, [r5, #0]
  40343c:	2301      	movs	r3, #1
  40343e:	4083      	lsls	r3, r0
  403440:	4313      	orrs	r3, r2
  403442:	602b      	str	r3, [r5, #0]
  403444:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403448:	4641      	mov	r1, r8
  40344a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40344e:	4b22      	ldr	r3, [pc, #136]	; (4034d8 <xTaskResumeAll+0xf8>)
  403450:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  403452:	4b22      	ldr	r3, [pc, #136]	; (4034dc <xTaskResumeAll+0xfc>)
  403454:	681b      	ldr	r3, [r3, #0]
  403456:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  403458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40345a:	429a      	cmp	r2, r3
  40345c:	d20c      	bcs.n	403478 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40345e:	683b      	ldr	r3, [r7, #0]
  403460:	2b00      	cmp	r3, #0
  403462:	d1e0      	bne.n	403426 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  403464:	4b1e      	ldr	r3, [pc, #120]	; (4034e0 <xTaskResumeAll+0x100>)
  403466:	681b      	ldr	r3, [r3, #0]
  403468:	b1db      	cbz	r3, 4034a2 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40346a:	4b1d      	ldr	r3, [pc, #116]	; (4034e0 <xTaskResumeAll+0x100>)
  40346c:	681b      	ldr	r3, [r3, #0]
  40346e:	b1c3      	cbz	r3, 4034a2 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  403470:	4e1c      	ldr	r6, [pc, #112]	; (4034e4 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  403472:	4d1d      	ldr	r5, [pc, #116]	; (4034e8 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  403474:	4c1a      	ldr	r4, [pc, #104]	; (4034e0 <xTaskResumeAll+0x100>)
  403476:	e00e      	b.n	403496 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  403478:	2201      	movs	r2, #1
  40347a:	4b1b      	ldr	r3, [pc, #108]	; (4034e8 <xTaskResumeAll+0x108>)
  40347c:	601a      	str	r2, [r3, #0]
  40347e:	e7ee      	b.n	40345e <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  403480:	4f1a      	ldr	r7, [pc, #104]	; (4034ec <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  403482:	4e1b      	ldr	r6, [pc, #108]	; (4034f0 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  403484:	4d1b      	ldr	r5, [pc, #108]	; (4034f4 <xTaskResumeAll+0x114>)
  403486:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4034fc <xTaskResumeAll+0x11c>
  40348a:	e7e8      	b.n	40345e <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  40348c:	6823      	ldr	r3, [r4, #0]
  40348e:	3b01      	subs	r3, #1
  403490:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  403492:	6823      	ldr	r3, [r4, #0]
  403494:	b12b      	cbz	r3, 4034a2 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  403496:	47b0      	blx	r6
  403498:	2800      	cmp	r0, #0
  40349a:	d0f7      	beq.n	40348c <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  40349c:	2301      	movs	r3, #1
  40349e:	602b      	str	r3, [r5, #0]
  4034a0:	e7f4      	b.n	40348c <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  4034a2:	4b11      	ldr	r3, [pc, #68]	; (4034e8 <xTaskResumeAll+0x108>)
  4034a4:	681b      	ldr	r3, [r3, #0]
  4034a6:	2b01      	cmp	r3, #1
  4034a8:	d10b      	bne.n	4034c2 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  4034aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4034ae:	4b12      	ldr	r3, [pc, #72]	; (4034f8 <xTaskResumeAll+0x118>)
  4034b0:	601a      	str	r2, [r3, #0]
  4034b2:	f3bf 8f4f 	dsb	sy
  4034b6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4034ba:	2401      	movs	r4, #1
  4034bc:	e7ae      	b.n	40341c <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  4034be:	2400      	movs	r4, #0
  4034c0:	e7ac      	b.n	40341c <xTaskResumeAll+0x3c>
  4034c2:	2400      	movs	r4, #0
  4034c4:	e7aa      	b.n	40341c <xTaskResumeAll+0x3c>
  4034c6:	bf00      	nop
  4034c8:	2040c69c 	.word	0x2040c69c
  4034cc:	00402341 	.word	0x00402341
  4034d0:	2040c694 	.word	0x2040c694
  4034d4:	0040238d 	.word	0x0040238d
  4034d8:	00402211 	.word	0x00402211
  4034dc:	2040c624 	.word	0x2040c624
  4034e0:	2040c698 	.word	0x2040c698
  4034e4:	00403295 	.word	0x00403295
  4034e8:	2040c720 	.word	0x2040c720
  4034ec:	2040c6dc 	.word	0x2040c6dc
  4034f0:	0040225d 	.word	0x0040225d
  4034f4:	2040c6a8 	.word	0x2040c6a8
  4034f8:	e000ed04 	.word	0xe000ed04
  4034fc:	2040c630 	.word	0x2040c630

00403500 <vTaskDelay>:
	{
  403500:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  403502:	2800      	cmp	r0, #0
  403504:	d029      	beq.n	40355a <vTaskDelay+0x5a>
  403506:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  403508:	4b18      	ldr	r3, [pc, #96]	; (40356c <vTaskDelay+0x6c>)
  40350a:	681b      	ldr	r3, [r3, #0]
  40350c:	b153      	cbz	r3, 403524 <vTaskDelay+0x24>
  40350e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403512:	b672      	cpsid	i
  403514:	f383 8811 	msr	BASEPRI, r3
  403518:	f3bf 8f6f 	isb	sy
  40351c:	f3bf 8f4f 	dsb	sy
  403520:	b662      	cpsie	i
  403522:	e7fe      	b.n	403522 <vTaskDelay+0x22>
			vTaskSuspendAll();
  403524:	4b12      	ldr	r3, [pc, #72]	; (403570 <vTaskDelay+0x70>)
  403526:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  403528:	4b12      	ldr	r3, [pc, #72]	; (403574 <vTaskDelay+0x74>)
  40352a:	681b      	ldr	r3, [r3, #0]
  40352c:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40352e:	4b12      	ldr	r3, [pc, #72]	; (403578 <vTaskDelay+0x78>)
  403530:	6818      	ldr	r0, [r3, #0]
  403532:	3004      	adds	r0, #4
  403534:	4b11      	ldr	r3, [pc, #68]	; (40357c <vTaskDelay+0x7c>)
  403536:	4798      	blx	r3
  403538:	b948      	cbnz	r0, 40354e <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40353a:	4b0f      	ldr	r3, [pc, #60]	; (403578 <vTaskDelay+0x78>)
  40353c:	681a      	ldr	r2, [r3, #0]
  40353e:	4910      	ldr	r1, [pc, #64]	; (403580 <vTaskDelay+0x80>)
  403540:	680b      	ldr	r3, [r1, #0]
  403542:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  403544:	2201      	movs	r2, #1
  403546:	4082      	lsls	r2, r0
  403548:	ea23 0302 	bic.w	r3, r3, r2
  40354c:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40354e:	4620      	mov	r0, r4
  403550:	4b0c      	ldr	r3, [pc, #48]	; (403584 <vTaskDelay+0x84>)
  403552:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  403554:	4b0c      	ldr	r3, [pc, #48]	; (403588 <vTaskDelay+0x88>)
  403556:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  403558:	b938      	cbnz	r0, 40356a <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  40355a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40355e:	4b0b      	ldr	r3, [pc, #44]	; (40358c <vTaskDelay+0x8c>)
  403560:	601a      	str	r2, [r3, #0]
  403562:	f3bf 8f4f 	dsb	sy
  403566:	f3bf 8f6f 	isb	sy
  40356a:	bd10      	pop	{r4, pc}
  40356c:	2040c69c 	.word	0x2040c69c
  403570:	00403279 	.word	0x00403279
  403574:	2040c71c 	.word	0x2040c71c
  403578:	2040c624 	.word	0x2040c624
  40357c:	0040225d 	.word	0x0040225d
  403580:	2040c6a8 	.word	0x2040c6a8
  403584:	00402f61 	.word	0x00402f61
  403588:	004033e1 	.word	0x004033e1
  40358c:	e000ed04 	.word	0xe000ed04

00403590 <prvIdleTask>:
{
  403590:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  403592:	f8df 8088 	ldr.w	r8, [pc, #136]	; 40361c <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  403596:	4e19      	ldr	r6, [pc, #100]	; (4035fc <prvIdleTask+0x6c>)
				taskYIELD();
  403598:	f8df 9084 	ldr.w	r9, [pc, #132]	; 403620 <prvIdleTask+0x90>
  40359c:	e02a      	b.n	4035f4 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40359e:	4b18      	ldr	r3, [pc, #96]	; (403600 <prvIdleTask+0x70>)
  4035a0:	681b      	ldr	r3, [r3, #0]
  4035a2:	2b01      	cmp	r3, #1
  4035a4:	d81e      	bhi.n	4035e4 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4035a6:	682b      	ldr	r3, [r5, #0]
  4035a8:	2b00      	cmp	r3, #0
  4035aa:	d0f8      	beq.n	40359e <prvIdleTask+0xe>
			vTaskSuspendAll();
  4035ac:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4035ae:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  4035b0:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  4035b2:	2c00      	cmp	r4, #0
  4035b4:	d0f7      	beq.n	4035a6 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  4035b6:	4b13      	ldr	r3, [pc, #76]	; (403604 <prvIdleTask+0x74>)
  4035b8:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4035ba:	68f3      	ldr	r3, [r6, #12]
  4035bc:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4035be:	1d20      	adds	r0, r4, #4
  4035c0:	4b11      	ldr	r3, [pc, #68]	; (403608 <prvIdleTask+0x78>)
  4035c2:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4035c4:	4a11      	ldr	r2, [pc, #68]	; (40360c <prvIdleTask+0x7c>)
  4035c6:	6813      	ldr	r3, [r2, #0]
  4035c8:	3b01      	subs	r3, #1
  4035ca:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4035cc:	682b      	ldr	r3, [r5, #0]
  4035ce:	3b01      	subs	r3, #1
  4035d0:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4035d2:	4b0f      	ldr	r3, [pc, #60]	; (403610 <prvIdleTask+0x80>)
  4035d4:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  4035d6:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4035d8:	f8df a048 	ldr.w	sl, [pc, #72]	; 403624 <prvIdleTask+0x94>
  4035dc:	47d0      	blx	sl
		vPortFree( pxTCB );
  4035de:	4620      	mov	r0, r4
  4035e0:	47d0      	blx	sl
  4035e2:	e7e0      	b.n	4035a6 <prvIdleTask+0x16>
				taskYIELD();
  4035e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4035e8:	f8c9 3000 	str.w	r3, [r9]
  4035ec:	f3bf 8f4f 	dsb	sy
  4035f0:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4035f4:	4d07      	ldr	r5, [pc, #28]	; (403614 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  4035f6:	4f08      	ldr	r7, [pc, #32]	; (403618 <prvIdleTask+0x88>)
  4035f8:	e7d5      	b.n	4035a6 <prvIdleTask+0x16>
  4035fa:	bf00      	nop
  4035fc:	2040c708 	.word	0x2040c708
  403600:	2040c630 	.word	0x2040c630
  403604:	00402341 	.word	0x00402341
  403608:	0040225d 	.word	0x0040225d
  40360c:	2040c694 	.word	0x2040c694
  403610:	0040238d 	.word	0x0040238d
  403614:	2040c6a4 	.word	0x2040c6a4
  403618:	004033e1 	.word	0x004033e1
  40361c:	00403279 	.word	0x00403279
  403620:	e000ed04 	.word	0xe000ed04
  403624:	0040260d 	.word	0x0040260d

00403628 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  403628:	4b2d      	ldr	r3, [pc, #180]	; (4036e0 <vTaskSwitchContext+0xb8>)
  40362a:	681b      	ldr	r3, [r3, #0]
  40362c:	2b00      	cmp	r3, #0
  40362e:	d12c      	bne.n	40368a <vTaskSwitchContext+0x62>
{
  403630:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  403632:	2200      	movs	r2, #0
  403634:	4b2b      	ldr	r3, [pc, #172]	; (4036e4 <vTaskSwitchContext+0xbc>)
  403636:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  403638:	4b2b      	ldr	r3, [pc, #172]	; (4036e8 <vTaskSwitchContext+0xc0>)
  40363a:	681b      	ldr	r3, [r3, #0]
  40363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40363e:	681a      	ldr	r2, [r3, #0]
  403640:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  403644:	d103      	bne.n	40364e <vTaskSwitchContext+0x26>
  403646:	685a      	ldr	r2, [r3, #4]
  403648:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40364c:	d021      	beq.n	403692 <vTaskSwitchContext+0x6a>
  40364e:	4b26      	ldr	r3, [pc, #152]	; (4036e8 <vTaskSwitchContext+0xc0>)
  403650:	6818      	ldr	r0, [r3, #0]
  403652:	6819      	ldr	r1, [r3, #0]
  403654:	3134      	adds	r1, #52	; 0x34
  403656:	4b25      	ldr	r3, [pc, #148]	; (4036ec <vTaskSwitchContext+0xc4>)
  403658:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40365a:	4b25      	ldr	r3, [pc, #148]	; (4036f0 <vTaskSwitchContext+0xc8>)
  40365c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  40365e:	fab3 f383 	clz	r3, r3
  403662:	b2db      	uxtb	r3, r3
  403664:	f1c3 031f 	rsb	r3, r3, #31
  403668:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40366c:	4a21      	ldr	r2, [pc, #132]	; (4036f4 <vTaskSwitchContext+0xcc>)
  40366e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  403672:	b9ba      	cbnz	r2, 4036a4 <vTaskSwitchContext+0x7c>
	__asm volatile
  403674:	f04f 0380 	mov.w	r3, #128	; 0x80
  403678:	b672      	cpsid	i
  40367a:	f383 8811 	msr	BASEPRI, r3
  40367e:	f3bf 8f6f 	isb	sy
  403682:	f3bf 8f4f 	dsb	sy
  403686:	b662      	cpsie	i
  403688:	e7fe      	b.n	403688 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  40368a:	2201      	movs	r2, #1
  40368c:	4b15      	ldr	r3, [pc, #84]	; (4036e4 <vTaskSwitchContext+0xbc>)
  40368e:	601a      	str	r2, [r3, #0]
  403690:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  403692:	689a      	ldr	r2, [r3, #8]
  403694:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  403698:	d1d9      	bne.n	40364e <vTaskSwitchContext+0x26>
  40369a:	68db      	ldr	r3, [r3, #12]
  40369c:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4036a0:	d1d5      	bne.n	40364e <vTaskSwitchContext+0x26>
  4036a2:	e7da      	b.n	40365a <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4036a4:	4a13      	ldr	r2, [pc, #76]	; (4036f4 <vTaskSwitchContext+0xcc>)
  4036a6:	0099      	lsls	r1, r3, #2
  4036a8:	18c8      	adds	r0, r1, r3
  4036aa:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4036ae:	6844      	ldr	r4, [r0, #4]
  4036b0:	6864      	ldr	r4, [r4, #4]
  4036b2:	6044      	str	r4, [r0, #4]
  4036b4:	4419      	add	r1, r3
  4036b6:	4602      	mov	r2, r0
  4036b8:	3208      	adds	r2, #8
  4036ba:	4294      	cmp	r4, r2
  4036bc:	d009      	beq.n	4036d2 <vTaskSwitchContext+0xaa>
  4036be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4036c2:	4a0c      	ldr	r2, [pc, #48]	; (4036f4 <vTaskSwitchContext+0xcc>)
  4036c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4036c8:	685b      	ldr	r3, [r3, #4]
  4036ca:	68da      	ldr	r2, [r3, #12]
  4036cc:	4b06      	ldr	r3, [pc, #24]	; (4036e8 <vTaskSwitchContext+0xc0>)
  4036ce:	601a      	str	r2, [r3, #0]
  4036d0:	bd10      	pop	{r4, pc}
  4036d2:	6860      	ldr	r0, [r4, #4]
  4036d4:	4a07      	ldr	r2, [pc, #28]	; (4036f4 <vTaskSwitchContext+0xcc>)
  4036d6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4036da:	6050      	str	r0, [r2, #4]
  4036dc:	e7ef      	b.n	4036be <vTaskSwitchContext+0x96>
  4036de:	bf00      	nop
  4036e0:	2040c69c 	.word	0x2040c69c
  4036e4:	2040c720 	.word	0x2040c720
  4036e8:	2040c624 	.word	0x2040c624
  4036ec:	00404271 	.word	0x00404271
  4036f0:	2040c6a8 	.word	0x2040c6a8
  4036f4:	2040c630 	.word	0x2040c630

004036f8 <vTaskPlaceOnEventList>:
{
  4036f8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  4036fa:	b1e0      	cbz	r0, 403736 <vTaskPlaceOnEventList+0x3e>
  4036fc:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4036fe:	4d17      	ldr	r5, [pc, #92]	; (40375c <vTaskPlaceOnEventList+0x64>)
  403700:	6829      	ldr	r1, [r5, #0]
  403702:	3118      	adds	r1, #24
  403704:	4b16      	ldr	r3, [pc, #88]	; (403760 <vTaskPlaceOnEventList+0x68>)
  403706:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403708:	6828      	ldr	r0, [r5, #0]
  40370a:	3004      	adds	r0, #4
  40370c:	4b15      	ldr	r3, [pc, #84]	; (403764 <vTaskPlaceOnEventList+0x6c>)
  40370e:	4798      	blx	r3
  403710:	b940      	cbnz	r0, 403724 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  403712:	682a      	ldr	r2, [r5, #0]
  403714:	4914      	ldr	r1, [pc, #80]	; (403768 <vTaskPlaceOnEventList+0x70>)
  403716:	680b      	ldr	r3, [r1, #0]
  403718:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40371a:	2201      	movs	r2, #1
  40371c:	4082      	lsls	r2, r0
  40371e:	ea23 0302 	bic.w	r3, r3, r2
  403722:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  403724:	f1b4 3fff 	cmp.w	r4, #4294967295
  403728:	d010      	beq.n	40374c <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  40372a:	4b10      	ldr	r3, [pc, #64]	; (40376c <vTaskPlaceOnEventList+0x74>)
  40372c:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40372e:	4420      	add	r0, r4
  403730:	4b0f      	ldr	r3, [pc, #60]	; (403770 <vTaskPlaceOnEventList+0x78>)
  403732:	4798      	blx	r3
  403734:	bd38      	pop	{r3, r4, r5, pc}
  403736:	f04f 0380 	mov.w	r3, #128	; 0x80
  40373a:	b672      	cpsid	i
  40373c:	f383 8811 	msr	BASEPRI, r3
  403740:	f3bf 8f6f 	isb	sy
  403744:	f3bf 8f4f 	dsb	sy
  403748:	b662      	cpsie	i
  40374a:	e7fe      	b.n	40374a <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40374c:	4b03      	ldr	r3, [pc, #12]	; (40375c <vTaskPlaceOnEventList+0x64>)
  40374e:	6819      	ldr	r1, [r3, #0]
  403750:	3104      	adds	r1, #4
  403752:	4808      	ldr	r0, [pc, #32]	; (403774 <vTaskPlaceOnEventList+0x7c>)
  403754:	4b08      	ldr	r3, [pc, #32]	; (403778 <vTaskPlaceOnEventList+0x80>)
  403756:	4798      	blx	r3
  403758:	bd38      	pop	{r3, r4, r5, pc}
  40375a:	bf00      	nop
  40375c:	2040c624 	.word	0x2040c624
  403760:	00402229 	.word	0x00402229
  403764:	0040225d 	.word	0x0040225d
  403768:	2040c6a8 	.word	0x2040c6a8
  40376c:	2040c71c 	.word	0x2040c71c
  403770:	00402f61 	.word	0x00402f61
  403774:	2040c6f4 	.word	0x2040c6f4
  403778:	00402211 	.word	0x00402211

0040377c <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  40377c:	b1e8      	cbz	r0, 4037ba <vTaskPlaceOnEventListRestricted+0x3e>
	{
  40377e:	b570      	push	{r4, r5, r6, lr}
  403780:	4615      	mov	r5, r2
  403782:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  403784:	4e16      	ldr	r6, [pc, #88]	; (4037e0 <vTaskPlaceOnEventListRestricted+0x64>)
  403786:	6831      	ldr	r1, [r6, #0]
  403788:	3118      	adds	r1, #24
  40378a:	4b16      	ldr	r3, [pc, #88]	; (4037e4 <vTaskPlaceOnEventListRestricted+0x68>)
  40378c:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40378e:	6830      	ldr	r0, [r6, #0]
  403790:	3004      	adds	r0, #4
  403792:	4b15      	ldr	r3, [pc, #84]	; (4037e8 <vTaskPlaceOnEventListRestricted+0x6c>)
  403794:	4798      	blx	r3
  403796:	b940      	cbnz	r0, 4037aa <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  403798:	6832      	ldr	r2, [r6, #0]
  40379a:	4914      	ldr	r1, [pc, #80]	; (4037ec <vTaskPlaceOnEventListRestricted+0x70>)
  40379c:	680b      	ldr	r3, [r1, #0]
  40379e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4037a0:	2201      	movs	r2, #1
  4037a2:	4082      	lsls	r2, r0
  4037a4:	ea23 0302 	bic.w	r3, r3, r2
  4037a8:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  4037aa:	2d01      	cmp	r5, #1
  4037ac:	d010      	beq.n	4037d0 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  4037ae:	4b10      	ldr	r3, [pc, #64]	; (4037f0 <vTaskPlaceOnEventListRestricted+0x74>)
  4037b0:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4037b2:	4420      	add	r0, r4
  4037b4:	4b0f      	ldr	r3, [pc, #60]	; (4037f4 <vTaskPlaceOnEventListRestricted+0x78>)
  4037b6:	4798      	blx	r3
  4037b8:	bd70      	pop	{r4, r5, r6, pc}
  4037ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4037be:	b672      	cpsid	i
  4037c0:	f383 8811 	msr	BASEPRI, r3
  4037c4:	f3bf 8f6f 	isb	sy
  4037c8:	f3bf 8f4f 	dsb	sy
  4037cc:	b662      	cpsie	i
  4037ce:	e7fe      	b.n	4037ce <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4037d0:	4b03      	ldr	r3, [pc, #12]	; (4037e0 <vTaskPlaceOnEventListRestricted+0x64>)
  4037d2:	6819      	ldr	r1, [r3, #0]
  4037d4:	3104      	adds	r1, #4
  4037d6:	4808      	ldr	r0, [pc, #32]	; (4037f8 <vTaskPlaceOnEventListRestricted+0x7c>)
  4037d8:	4b02      	ldr	r3, [pc, #8]	; (4037e4 <vTaskPlaceOnEventListRestricted+0x68>)
  4037da:	4798      	blx	r3
  4037dc:	bd70      	pop	{r4, r5, r6, pc}
  4037de:	bf00      	nop
  4037e0:	2040c624 	.word	0x2040c624
  4037e4:	00402211 	.word	0x00402211
  4037e8:	0040225d 	.word	0x0040225d
  4037ec:	2040c6a8 	.word	0x2040c6a8
  4037f0:	2040c71c 	.word	0x2040c71c
  4037f4:	00402f61 	.word	0x00402f61
  4037f8:	2040c6f4 	.word	0x2040c6f4

004037fc <xTaskRemoveFromEventList>:
{
  4037fc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4037fe:	68c3      	ldr	r3, [r0, #12]
  403800:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  403802:	b324      	cbz	r4, 40384e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  403804:	f104 0518 	add.w	r5, r4, #24
  403808:	4628      	mov	r0, r5
  40380a:	4b1a      	ldr	r3, [pc, #104]	; (403874 <xTaskRemoveFromEventList+0x78>)
  40380c:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40380e:	4b1a      	ldr	r3, [pc, #104]	; (403878 <xTaskRemoveFromEventList+0x7c>)
  403810:	681b      	ldr	r3, [r3, #0]
  403812:	bb3b      	cbnz	r3, 403864 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  403814:	1d25      	adds	r5, r4, #4
  403816:	4628      	mov	r0, r5
  403818:	4b16      	ldr	r3, [pc, #88]	; (403874 <xTaskRemoveFromEventList+0x78>)
  40381a:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  40381c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40381e:	4a17      	ldr	r2, [pc, #92]	; (40387c <xTaskRemoveFromEventList+0x80>)
  403820:	6811      	ldr	r1, [r2, #0]
  403822:	2301      	movs	r3, #1
  403824:	4083      	lsls	r3, r0
  403826:	430b      	orrs	r3, r1
  403828:	6013      	str	r3, [r2, #0]
  40382a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40382e:	4629      	mov	r1, r5
  403830:	4b13      	ldr	r3, [pc, #76]	; (403880 <xTaskRemoveFromEventList+0x84>)
  403832:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403836:	4b13      	ldr	r3, [pc, #76]	; (403884 <xTaskRemoveFromEventList+0x88>)
  403838:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  40383a:	4b13      	ldr	r3, [pc, #76]	; (403888 <xTaskRemoveFromEventList+0x8c>)
  40383c:	681b      	ldr	r3, [r3, #0]
  40383e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  403840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403842:	429a      	cmp	r2, r3
  403844:	d913      	bls.n	40386e <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  403846:	2001      	movs	r0, #1
  403848:	4b10      	ldr	r3, [pc, #64]	; (40388c <xTaskRemoveFromEventList+0x90>)
  40384a:	6018      	str	r0, [r3, #0]
  40384c:	bd38      	pop	{r3, r4, r5, pc}
  40384e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403852:	b672      	cpsid	i
  403854:	f383 8811 	msr	BASEPRI, r3
  403858:	f3bf 8f6f 	isb	sy
  40385c:	f3bf 8f4f 	dsb	sy
  403860:	b662      	cpsie	i
  403862:	e7fe      	b.n	403862 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  403864:	4629      	mov	r1, r5
  403866:	480a      	ldr	r0, [pc, #40]	; (403890 <xTaskRemoveFromEventList+0x94>)
  403868:	4b06      	ldr	r3, [pc, #24]	; (403884 <xTaskRemoveFromEventList+0x88>)
  40386a:	4798      	blx	r3
  40386c:	e7e5      	b.n	40383a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  40386e:	2000      	movs	r0, #0
}
  403870:	bd38      	pop	{r3, r4, r5, pc}
  403872:	bf00      	nop
  403874:	0040225d 	.word	0x0040225d
  403878:	2040c69c 	.word	0x2040c69c
  40387c:	2040c6a8 	.word	0x2040c6a8
  403880:	2040c630 	.word	0x2040c630
  403884:	00402211 	.word	0x00402211
  403888:	2040c624 	.word	0x2040c624
  40388c:	2040c720 	.word	0x2040c720
  403890:	2040c6dc 	.word	0x2040c6dc

00403894 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  403894:	b130      	cbz	r0, 4038a4 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  403896:	4a09      	ldr	r2, [pc, #36]	; (4038bc <vTaskSetTimeOutState+0x28>)
  403898:	6812      	ldr	r2, [r2, #0]
  40389a:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40389c:	4a08      	ldr	r2, [pc, #32]	; (4038c0 <vTaskSetTimeOutState+0x2c>)
  40389e:	6812      	ldr	r2, [r2, #0]
  4038a0:	6042      	str	r2, [r0, #4]
  4038a2:	4770      	bx	lr
  4038a4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4038a8:	b672      	cpsid	i
  4038aa:	f383 8811 	msr	BASEPRI, r3
  4038ae:	f3bf 8f6f 	isb	sy
  4038b2:	f3bf 8f4f 	dsb	sy
  4038b6:	b662      	cpsie	i
  4038b8:	e7fe      	b.n	4038b8 <vTaskSetTimeOutState+0x24>
  4038ba:	bf00      	nop
  4038bc:	2040c6d8 	.word	0x2040c6d8
  4038c0:	2040c71c 	.word	0x2040c71c

004038c4 <xTaskCheckForTimeOut>:
{
  4038c4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  4038c6:	b1c0      	cbz	r0, 4038fa <xTaskCheckForTimeOut+0x36>
  4038c8:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4038ca:	b309      	cbz	r1, 403910 <xTaskCheckForTimeOut+0x4c>
  4038cc:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4038ce:	4b1d      	ldr	r3, [pc, #116]	; (403944 <xTaskCheckForTimeOut+0x80>)
  4038d0:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  4038d2:	4b1d      	ldr	r3, [pc, #116]	; (403948 <xTaskCheckForTimeOut+0x84>)
  4038d4:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  4038d6:	682b      	ldr	r3, [r5, #0]
  4038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4038dc:	d02e      	beq.n	40393c <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4038de:	491b      	ldr	r1, [pc, #108]	; (40394c <xTaskCheckForTimeOut+0x88>)
  4038e0:	6809      	ldr	r1, [r1, #0]
  4038e2:	6820      	ldr	r0, [r4, #0]
  4038e4:	4288      	cmp	r0, r1
  4038e6:	d002      	beq.n	4038ee <xTaskCheckForTimeOut+0x2a>
  4038e8:	6861      	ldr	r1, [r4, #4]
  4038ea:	428a      	cmp	r2, r1
  4038ec:	d228      	bcs.n	403940 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  4038ee:	6861      	ldr	r1, [r4, #4]
  4038f0:	1a50      	subs	r0, r2, r1
  4038f2:	4283      	cmp	r3, r0
  4038f4:	d817      	bhi.n	403926 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  4038f6:	2401      	movs	r4, #1
  4038f8:	e01c      	b.n	403934 <xTaskCheckForTimeOut+0x70>
  4038fa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4038fe:	b672      	cpsid	i
  403900:	f383 8811 	msr	BASEPRI, r3
  403904:	f3bf 8f6f 	isb	sy
  403908:	f3bf 8f4f 	dsb	sy
  40390c:	b662      	cpsie	i
  40390e:	e7fe      	b.n	40390e <xTaskCheckForTimeOut+0x4a>
  403910:	f04f 0380 	mov.w	r3, #128	; 0x80
  403914:	b672      	cpsid	i
  403916:	f383 8811 	msr	BASEPRI, r3
  40391a:	f3bf 8f6f 	isb	sy
  40391e:	f3bf 8f4f 	dsb	sy
  403922:	b662      	cpsie	i
  403924:	e7fe      	b.n	403924 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  403926:	1a9b      	subs	r3, r3, r2
  403928:	440b      	add	r3, r1
  40392a:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  40392c:	4620      	mov	r0, r4
  40392e:	4b08      	ldr	r3, [pc, #32]	; (403950 <xTaskCheckForTimeOut+0x8c>)
  403930:	4798      	blx	r3
			xReturn = pdFALSE;
  403932:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  403934:	4b07      	ldr	r3, [pc, #28]	; (403954 <xTaskCheckForTimeOut+0x90>)
  403936:	4798      	blx	r3
}
  403938:	4620      	mov	r0, r4
  40393a:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  40393c:	2400      	movs	r4, #0
  40393e:	e7f9      	b.n	403934 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  403940:	2401      	movs	r4, #1
  403942:	e7f7      	b.n	403934 <xTaskCheckForTimeOut+0x70>
  403944:	00402341 	.word	0x00402341
  403948:	2040c71c 	.word	0x2040c71c
  40394c:	2040c6d8 	.word	0x2040c6d8
  403950:	00403895 	.word	0x00403895
  403954:	0040238d 	.word	0x0040238d

00403958 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  403958:	2201      	movs	r2, #1
  40395a:	4b01      	ldr	r3, [pc, #4]	; (403960 <vTaskMissedYield+0x8>)
  40395c:	601a      	str	r2, [r3, #0]
  40395e:	4770      	bx	lr
  403960:	2040c720 	.word	0x2040c720

00403964 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  403964:	4b05      	ldr	r3, [pc, #20]	; (40397c <xTaskGetSchedulerState+0x18>)
  403966:	681b      	ldr	r3, [r3, #0]
  403968:	b133      	cbz	r3, 403978 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40396a:	4b05      	ldr	r3, [pc, #20]	; (403980 <xTaskGetSchedulerState+0x1c>)
  40396c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  40396e:	2b00      	cmp	r3, #0
  403970:	bf0c      	ite	eq
  403972:	2002      	moveq	r0, #2
  403974:	2000      	movne	r0, #0
  403976:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  403978:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  40397a:	4770      	bx	lr
  40397c:	2040c6f0 	.word	0x2040c6f0
  403980:	2040c69c 	.word	0x2040c69c

00403984 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  403984:	2800      	cmp	r0, #0
  403986:	d044      	beq.n	403a12 <vTaskPriorityInherit+0x8e>
	{
  403988:	b538      	push	{r3, r4, r5, lr}
  40398a:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  40398c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40398e:	4921      	ldr	r1, [pc, #132]	; (403a14 <vTaskPriorityInherit+0x90>)
  403990:	6809      	ldr	r1, [r1, #0]
  403992:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  403994:	428a      	cmp	r2, r1
  403996:	d214      	bcs.n	4039c2 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  403998:	6981      	ldr	r1, [r0, #24]
  40399a:	2900      	cmp	r1, #0
  40399c:	db05      	blt.n	4039aa <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40399e:	491d      	ldr	r1, [pc, #116]	; (403a14 <vTaskPriorityInherit+0x90>)
  4039a0:	6809      	ldr	r1, [r1, #0]
  4039a2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4039a4:	f1c1 0105 	rsb	r1, r1, #5
  4039a8:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4039aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4039ae:	491a      	ldr	r1, [pc, #104]	; (403a18 <vTaskPriorityInherit+0x94>)
  4039b0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4039b4:	6961      	ldr	r1, [r4, #20]
  4039b6:	4291      	cmp	r1, r2
  4039b8:	d004      	beq.n	4039c4 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4039ba:	4a16      	ldr	r2, [pc, #88]	; (403a14 <vTaskPriorityInherit+0x90>)
  4039bc:	6812      	ldr	r2, [r2, #0]
  4039be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4039c0:	62e2      	str	r2, [r4, #44]	; 0x2c
  4039c2:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4039c4:	1d25      	adds	r5, r4, #4
  4039c6:	4628      	mov	r0, r5
  4039c8:	4b14      	ldr	r3, [pc, #80]	; (403a1c <vTaskPriorityInherit+0x98>)
  4039ca:	4798      	blx	r3
  4039cc:	b970      	cbnz	r0, 4039ec <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4039ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4039d0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4039d4:	4a10      	ldr	r2, [pc, #64]	; (403a18 <vTaskPriorityInherit+0x94>)
  4039d6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4039da:	b93a      	cbnz	r2, 4039ec <vTaskPriorityInherit+0x68>
  4039dc:	4810      	ldr	r0, [pc, #64]	; (403a20 <vTaskPriorityInherit+0x9c>)
  4039de:	6802      	ldr	r2, [r0, #0]
  4039e0:	2101      	movs	r1, #1
  4039e2:	fa01 f303 	lsl.w	r3, r1, r3
  4039e6:	ea22 0303 	bic.w	r3, r2, r3
  4039ea:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4039ec:	4b09      	ldr	r3, [pc, #36]	; (403a14 <vTaskPriorityInherit+0x90>)
  4039ee:	681b      	ldr	r3, [r3, #0]
  4039f0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4039f2:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4039f4:	4a0a      	ldr	r2, [pc, #40]	; (403a20 <vTaskPriorityInherit+0x9c>)
  4039f6:	6811      	ldr	r1, [r2, #0]
  4039f8:	2301      	movs	r3, #1
  4039fa:	4083      	lsls	r3, r0
  4039fc:	430b      	orrs	r3, r1
  4039fe:	6013      	str	r3, [r2, #0]
  403a00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403a04:	4629      	mov	r1, r5
  403a06:	4b04      	ldr	r3, [pc, #16]	; (403a18 <vTaskPriorityInherit+0x94>)
  403a08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403a0c:	4b05      	ldr	r3, [pc, #20]	; (403a24 <vTaskPriorityInherit+0xa0>)
  403a0e:	4798      	blx	r3
  403a10:	bd38      	pop	{r3, r4, r5, pc}
  403a12:	4770      	bx	lr
  403a14:	2040c624 	.word	0x2040c624
  403a18:	2040c630 	.word	0x2040c630
  403a1c:	0040225d 	.word	0x0040225d
  403a20:	2040c6a8 	.word	0x2040c6a8
  403a24:	00402211 	.word	0x00402211

00403a28 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  403a28:	2800      	cmp	r0, #0
  403a2a:	d04d      	beq.n	403ac8 <xTaskPriorityDisinherit+0xa0>
	{
  403a2c:	b538      	push	{r3, r4, r5, lr}
  403a2e:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  403a30:	4a27      	ldr	r2, [pc, #156]	; (403ad0 <xTaskPriorityDisinherit+0xa8>)
  403a32:	6812      	ldr	r2, [r2, #0]
  403a34:	4290      	cmp	r0, r2
  403a36:	d00a      	beq.n	403a4e <xTaskPriorityDisinherit+0x26>
  403a38:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a3c:	b672      	cpsid	i
  403a3e:	f383 8811 	msr	BASEPRI, r3
  403a42:	f3bf 8f6f 	isb	sy
  403a46:	f3bf 8f4f 	dsb	sy
  403a4a:	b662      	cpsie	i
  403a4c:	e7fe      	b.n	403a4c <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  403a4e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  403a50:	b952      	cbnz	r2, 403a68 <xTaskPriorityDisinherit+0x40>
  403a52:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a56:	b672      	cpsid	i
  403a58:	f383 8811 	msr	BASEPRI, r3
  403a5c:	f3bf 8f6f 	isb	sy
  403a60:	f3bf 8f4f 	dsb	sy
  403a64:	b662      	cpsie	i
  403a66:	e7fe      	b.n	403a66 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  403a68:	3a01      	subs	r2, #1
  403a6a:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  403a6c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  403a6e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  403a70:	4288      	cmp	r0, r1
  403a72:	d02b      	beq.n	403acc <xTaskPriorityDisinherit+0xa4>
  403a74:	bb52      	cbnz	r2, 403acc <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403a76:	1d25      	adds	r5, r4, #4
  403a78:	4628      	mov	r0, r5
  403a7a:	4b16      	ldr	r3, [pc, #88]	; (403ad4 <xTaskPriorityDisinherit+0xac>)
  403a7c:	4798      	blx	r3
  403a7e:	b968      	cbnz	r0, 403a9c <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  403a80:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  403a82:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  403a86:	4b14      	ldr	r3, [pc, #80]	; (403ad8 <xTaskPriorityDisinherit+0xb0>)
  403a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403a8c:	b933      	cbnz	r3, 403a9c <xTaskPriorityDisinherit+0x74>
  403a8e:	4813      	ldr	r0, [pc, #76]	; (403adc <xTaskPriorityDisinherit+0xb4>)
  403a90:	6803      	ldr	r3, [r0, #0]
  403a92:	2201      	movs	r2, #1
  403a94:	408a      	lsls	r2, r1
  403a96:	ea23 0302 	bic.w	r3, r3, r2
  403a9a:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  403a9c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  403a9e:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403aa0:	f1c0 0305 	rsb	r3, r0, #5
  403aa4:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  403aa6:	4a0d      	ldr	r2, [pc, #52]	; (403adc <xTaskPriorityDisinherit+0xb4>)
  403aa8:	6811      	ldr	r1, [r2, #0]
  403aaa:	2401      	movs	r4, #1
  403aac:	fa04 f300 	lsl.w	r3, r4, r0
  403ab0:	430b      	orrs	r3, r1
  403ab2:	6013      	str	r3, [r2, #0]
  403ab4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403ab8:	4629      	mov	r1, r5
  403aba:	4b07      	ldr	r3, [pc, #28]	; (403ad8 <xTaskPriorityDisinherit+0xb0>)
  403abc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403ac0:	4b07      	ldr	r3, [pc, #28]	; (403ae0 <xTaskPriorityDisinherit+0xb8>)
  403ac2:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  403ac4:	4620      	mov	r0, r4
  403ac6:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  403ac8:	2000      	movs	r0, #0
  403aca:	4770      	bx	lr
  403acc:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  403ace:	bd38      	pop	{r3, r4, r5, pc}
  403ad0:	2040c624 	.word	0x2040c624
  403ad4:	0040225d 	.word	0x0040225d
  403ad8:	2040c630 	.word	0x2040c630
  403adc:	2040c6a8 	.word	0x2040c6a8
  403ae0:	00402211 	.word	0x00402211

00403ae4 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  403ae4:	4b05      	ldr	r3, [pc, #20]	; (403afc <pvTaskIncrementMutexHeldCount+0x18>)
  403ae6:	681b      	ldr	r3, [r3, #0]
  403ae8:	b123      	cbz	r3, 403af4 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  403aea:	4b04      	ldr	r3, [pc, #16]	; (403afc <pvTaskIncrementMutexHeldCount+0x18>)
  403aec:	681a      	ldr	r2, [r3, #0]
  403aee:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  403af0:	3301      	adds	r3, #1
  403af2:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  403af4:	4b01      	ldr	r3, [pc, #4]	; (403afc <pvTaskIncrementMutexHeldCount+0x18>)
  403af6:	6818      	ldr	r0, [r3, #0]
	}
  403af8:	4770      	bx	lr
  403afa:	bf00      	nop
  403afc:	2040c624 	.word	0x2040c624

00403b00 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  403b00:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  403b02:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  403b04:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  403b06:	4291      	cmp	r1, r2
  403b08:	d80c      	bhi.n	403b24 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  403b0a:	1ad2      	subs	r2, r2, r3
  403b0c:	6983      	ldr	r3, [r0, #24]
  403b0e:	429a      	cmp	r2, r3
  403b10:	d301      	bcc.n	403b16 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  403b12:	2001      	movs	r0, #1
  403b14:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  403b16:	1d01      	adds	r1, r0, #4
  403b18:	4b09      	ldr	r3, [pc, #36]	; (403b40 <prvInsertTimerInActiveList+0x40>)
  403b1a:	6818      	ldr	r0, [r3, #0]
  403b1c:	4b09      	ldr	r3, [pc, #36]	; (403b44 <prvInsertTimerInActiveList+0x44>)
  403b1e:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403b20:	2000      	movs	r0, #0
  403b22:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  403b24:	429a      	cmp	r2, r3
  403b26:	d203      	bcs.n	403b30 <prvInsertTimerInActiveList+0x30>
  403b28:	4299      	cmp	r1, r3
  403b2a:	d301      	bcc.n	403b30 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  403b2c:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  403b2e:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403b30:	1d01      	adds	r1, r0, #4
  403b32:	4b05      	ldr	r3, [pc, #20]	; (403b48 <prvInsertTimerInActiveList+0x48>)
  403b34:	6818      	ldr	r0, [r3, #0]
  403b36:	4b03      	ldr	r3, [pc, #12]	; (403b44 <prvInsertTimerInActiveList+0x44>)
  403b38:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403b3a:	2000      	movs	r0, #0
  403b3c:	bd08      	pop	{r3, pc}
  403b3e:	bf00      	nop
  403b40:	2040c728 	.word	0x2040c728
  403b44:	00402229 	.word	0x00402229
  403b48:	2040c724 	.word	0x2040c724

00403b4c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  403b4c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  403b4e:	4b15      	ldr	r3, [pc, #84]	; (403ba4 <prvCheckForValidListAndQueue+0x58>)
  403b50:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  403b52:	4b15      	ldr	r3, [pc, #84]	; (403ba8 <prvCheckForValidListAndQueue+0x5c>)
  403b54:	681b      	ldr	r3, [r3, #0]
  403b56:	b113      	cbz	r3, 403b5e <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  403b58:	4b14      	ldr	r3, [pc, #80]	; (403bac <prvCheckForValidListAndQueue+0x60>)
  403b5a:	4798      	blx	r3
  403b5c:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  403b5e:	4d14      	ldr	r5, [pc, #80]	; (403bb0 <prvCheckForValidListAndQueue+0x64>)
  403b60:	4628      	mov	r0, r5
  403b62:	4e14      	ldr	r6, [pc, #80]	; (403bb4 <prvCheckForValidListAndQueue+0x68>)
  403b64:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  403b66:	4c14      	ldr	r4, [pc, #80]	; (403bb8 <prvCheckForValidListAndQueue+0x6c>)
  403b68:	4620      	mov	r0, r4
  403b6a:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  403b6c:	4b13      	ldr	r3, [pc, #76]	; (403bbc <prvCheckForValidListAndQueue+0x70>)
  403b6e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  403b70:	4b13      	ldr	r3, [pc, #76]	; (403bc0 <prvCheckForValidListAndQueue+0x74>)
  403b72:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  403b74:	2200      	movs	r2, #0
  403b76:	2110      	movs	r1, #16
  403b78:	2005      	movs	r0, #5
  403b7a:	4b12      	ldr	r3, [pc, #72]	; (403bc4 <prvCheckForValidListAndQueue+0x78>)
  403b7c:	4798      	blx	r3
  403b7e:	4b0a      	ldr	r3, [pc, #40]	; (403ba8 <prvCheckForValidListAndQueue+0x5c>)
  403b80:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  403b82:	b118      	cbz	r0, 403b8c <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  403b84:	4910      	ldr	r1, [pc, #64]	; (403bc8 <prvCheckForValidListAndQueue+0x7c>)
  403b86:	4b11      	ldr	r3, [pc, #68]	; (403bcc <prvCheckForValidListAndQueue+0x80>)
  403b88:	4798      	blx	r3
  403b8a:	e7e5      	b.n	403b58 <prvCheckForValidListAndQueue+0xc>
  403b8c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403b90:	b672      	cpsid	i
  403b92:	f383 8811 	msr	BASEPRI, r3
  403b96:	f3bf 8f6f 	isb	sy
  403b9a:	f3bf 8f4f 	dsb	sy
  403b9e:	b662      	cpsie	i
  403ba0:	e7fe      	b.n	403ba0 <prvCheckForValidListAndQueue+0x54>
  403ba2:	bf00      	nop
  403ba4:	00402341 	.word	0x00402341
  403ba8:	2040c758 	.word	0x2040c758
  403bac:	0040238d 	.word	0x0040238d
  403bb0:	2040c72c 	.word	0x2040c72c
  403bb4:	004021f5 	.word	0x004021f5
  403bb8:	2040c740 	.word	0x2040c740
  403bbc:	2040c724 	.word	0x2040c724
  403bc0:	2040c728 	.word	0x2040c728
  403bc4:	00402899 	.word	0x00402899
  403bc8:	00407600 	.word	0x00407600
  403bcc:	00402ea9 	.word	0x00402ea9

00403bd0 <xTimerCreateTimerTask>:
{
  403bd0:	b510      	push	{r4, lr}
  403bd2:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  403bd4:	4b0f      	ldr	r3, [pc, #60]	; (403c14 <xTimerCreateTimerTask+0x44>)
  403bd6:	4798      	blx	r3
	if( xTimerQueue != NULL )
  403bd8:	4b0f      	ldr	r3, [pc, #60]	; (403c18 <xTimerCreateTimerTask+0x48>)
  403bda:	681b      	ldr	r3, [r3, #0]
  403bdc:	b173      	cbz	r3, 403bfc <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  403bde:	2300      	movs	r3, #0
  403be0:	9303      	str	r3, [sp, #12]
  403be2:	9302      	str	r3, [sp, #8]
  403be4:	9301      	str	r3, [sp, #4]
  403be6:	2204      	movs	r2, #4
  403be8:	9200      	str	r2, [sp, #0]
  403bea:	f44f 7282 	mov.w	r2, #260	; 0x104
  403bee:	490b      	ldr	r1, [pc, #44]	; (403c1c <xTimerCreateTimerTask+0x4c>)
  403bf0:	480b      	ldr	r0, [pc, #44]	; (403c20 <xTimerCreateTimerTask+0x50>)
  403bf2:	4c0c      	ldr	r4, [pc, #48]	; (403c24 <xTimerCreateTimerTask+0x54>)
  403bf4:	47a0      	blx	r4
	configASSERT( xReturn );
  403bf6:	b108      	cbz	r0, 403bfc <xTimerCreateTimerTask+0x2c>
}
  403bf8:	b004      	add	sp, #16
  403bfa:	bd10      	pop	{r4, pc}
  403bfc:	f04f 0380 	mov.w	r3, #128	; 0x80
  403c00:	b672      	cpsid	i
  403c02:	f383 8811 	msr	BASEPRI, r3
  403c06:	f3bf 8f6f 	isb	sy
  403c0a:	f3bf 8f4f 	dsb	sy
  403c0e:	b662      	cpsie	i
  403c10:	e7fe      	b.n	403c10 <xTimerCreateTimerTask+0x40>
  403c12:	bf00      	nop
  403c14:	00403b4d 	.word	0x00403b4d
  403c18:	2040c758 	.word	0x2040c758
  403c1c:	00407608 	.word	0x00407608
  403c20:	00403d51 	.word	0x00403d51
  403c24:	00402fb9 	.word	0x00402fb9

00403c28 <xTimerGenericCommand>:
	configASSERT( xTimer );
  403c28:	b1d8      	cbz	r0, 403c62 <xTimerGenericCommand+0x3a>
{
  403c2a:	b530      	push	{r4, r5, lr}
  403c2c:	b085      	sub	sp, #20
  403c2e:	4615      	mov	r5, r2
  403c30:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  403c32:	4a15      	ldr	r2, [pc, #84]	; (403c88 <xTimerGenericCommand+0x60>)
  403c34:	6810      	ldr	r0, [r2, #0]
  403c36:	b320      	cbz	r0, 403c82 <xTimerGenericCommand+0x5a>
  403c38:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  403c3a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  403c3c:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  403c3e:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  403c40:	2905      	cmp	r1, #5
  403c42:	dc19      	bgt.n	403c78 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  403c44:	4b11      	ldr	r3, [pc, #68]	; (403c8c <xTimerGenericCommand+0x64>)
  403c46:	4798      	blx	r3
  403c48:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  403c4a:	f04f 0300 	mov.w	r3, #0
  403c4e:	bf0c      	ite	eq
  403c50:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  403c52:	461a      	movne	r2, r3
  403c54:	4669      	mov	r1, sp
  403c56:	480c      	ldr	r0, [pc, #48]	; (403c88 <xTimerGenericCommand+0x60>)
  403c58:	6800      	ldr	r0, [r0, #0]
  403c5a:	4c0d      	ldr	r4, [pc, #52]	; (403c90 <xTimerGenericCommand+0x68>)
  403c5c:	47a0      	blx	r4
}
  403c5e:	b005      	add	sp, #20
  403c60:	bd30      	pop	{r4, r5, pc}
  403c62:	f04f 0380 	mov.w	r3, #128	; 0x80
  403c66:	b672      	cpsid	i
  403c68:	f383 8811 	msr	BASEPRI, r3
  403c6c:	f3bf 8f6f 	isb	sy
  403c70:	f3bf 8f4f 	dsb	sy
  403c74:	b662      	cpsie	i
  403c76:	e7fe      	b.n	403c76 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  403c78:	2300      	movs	r3, #0
  403c7a:	4669      	mov	r1, sp
  403c7c:	4c05      	ldr	r4, [pc, #20]	; (403c94 <xTimerGenericCommand+0x6c>)
  403c7e:	47a0      	blx	r4
  403c80:	e7ed      	b.n	403c5e <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  403c82:	2000      	movs	r0, #0
	return xReturn;
  403c84:	e7eb      	b.n	403c5e <xTimerGenericCommand+0x36>
  403c86:	bf00      	nop
  403c88:	2040c758 	.word	0x2040c758
  403c8c:	00403965 	.word	0x00403965
  403c90:	00402915 	.word	0x00402915
  403c94:	00402af9 	.word	0x00402af9

00403c98 <prvSampleTimeNow>:
{
  403c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403c9c:	b082      	sub	sp, #8
  403c9e:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  403ca0:	4b24      	ldr	r3, [pc, #144]	; (403d34 <prvSampleTimeNow+0x9c>)
  403ca2:	4798      	blx	r3
  403ca4:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  403ca6:	4b24      	ldr	r3, [pc, #144]	; (403d38 <prvSampleTimeNow+0xa0>)
  403ca8:	681b      	ldr	r3, [r3, #0]
  403caa:	4298      	cmp	r0, r3
  403cac:	d31b      	bcc.n	403ce6 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  403cae:	2300      	movs	r3, #0
  403cb0:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  403cb4:	4b20      	ldr	r3, [pc, #128]	; (403d38 <prvSampleTimeNow+0xa0>)
  403cb6:	601f      	str	r7, [r3, #0]
}
  403cb8:	4638      	mov	r0, r7
  403cba:	b002      	add	sp, #8
  403cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403cc0:	2100      	movs	r1, #0
  403cc2:	9100      	str	r1, [sp, #0]
  403cc4:	460b      	mov	r3, r1
  403cc6:	4652      	mov	r2, sl
  403cc8:	4620      	mov	r0, r4
  403cca:	4c1c      	ldr	r4, [pc, #112]	; (403d3c <prvSampleTimeNow+0xa4>)
  403ccc:	47a0      	blx	r4
				configASSERT( xResult );
  403cce:	b960      	cbnz	r0, 403cea <prvSampleTimeNow+0x52>
  403cd0:	f04f 0380 	mov.w	r3, #128	; 0x80
  403cd4:	b672      	cpsid	i
  403cd6:	f383 8811 	msr	BASEPRI, r3
  403cda:	f3bf 8f6f 	isb	sy
  403cde:	f3bf 8f4f 	dsb	sy
  403ce2:	b662      	cpsie	i
  403ce4:	e7fe      	b.n	403ce4 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403ce6:	4d16      	ldr	r5, [pc, #88]	; (403d40 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403ce8:	4e16      	ldr	r6, [pc, #88]	; (403d44 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403cea:	682b      	ldr	r3, [r5, #0]
  403cec:	681a      	ldr	r2, [r3, #0]
  403cee:	b1c2      	cbz	r2, 403d22 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403cf0:	68db      	ldr	r3, [r3, #12]
  403cf2:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403cf6:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403cf8:	f104 0904 	add.w	r9, r4, #4
  403cfc:	4648      	mov	r0, r9
  403cfe:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403d02:	4620      	mov	r0, r4
  403d04:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403d06:	69e3      	ldr	r3, [r4, #28]
  403d08:	2b01      	cmp	r3, #1
  403d0a:	d1ee      	bne.n	403cea <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  403d0c:	69a3      	ldr	r3, [r4, #24]
  403d0e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  403d10:	459a      	cmp	sl, r3
  403d12:	d2d5      	bcs.n	403cc0 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  403d14:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  403d16:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403d18:	4649      	mov	r1, r9
  403d1a:	6828      	ldr	r0, [r5, #0]
  403d1c:	4b0a      	ldr	r3, [pc, #40]	; (403d48 <prvSampleTimeNow+0xb0>)
  403d1e:	4798      	blx	r3
  403d20:	e7e3      	b.n	403cea <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  403d22:	4a0a      	ldr	r2, [pc, #40]	; (403d4c <prvSampleTimeNow+0xb4>)
  403d24:	6810      	ldr	r0, [r2, #0]
  403d26:	4906      	ldr	r1, [pc, #24]	; (403d40 <prvSampleTimeNow+0xa8>)
  403d28:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  403d2a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  403d2c:	2301      	movs	r3, #1
  403d2e:	f8c8 3000 	str.w	r3, [r8]
  403d32:	e7bf      	b.n	403cb4 <prvSampleTimeNow+0x1c>
  403d34:	00403289 	.word	0x00403289
  403d38:	2040c754 	.word	0x2040c754
  403d3c:	00403c29 	.word	0x00403c29
  403d40:	2040c724 	.word	0x2040c724
  403d44:	0040225d 	.word	0x0040225d
  403d48:	00402229 	.word	0x00402229
  403d4c:	2040c728 	.word	0x2040c728

00403d50 <prvTimerTask>:
{
  403d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403d54:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  403d56:	4e75      	ldr	r6, [pc, #468]	; (403f2c <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  403d58:	4f75      	ldr	r7, [pc, #468]	; (403f30 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  403d5a:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403f58 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403d5e:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 403f5c <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  403d62:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  403d64:	681a      	ldr	r2, [r3, #0]
  403d66:	2a00      	cmp	r2, #0
  403d68:	f000 80ce 	beq.w	403f08 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403d6c:	68db      	ldr	r3, [r3, #12]
  403d6e:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  403d70:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403d72:	a804      	add	r0, sp, #16
  403d74:	4b6f      	ldr	r3, [pc, #444]	; (403f34 <prvTimerTask+0x1e4>)
  403d76:	4798      	blx	r3
  403d78:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403d7a:	9b04      	ldr	r3, [sp, #16]
  403d7c:	2b00      	cmp	r3, #0
  403d7e:	d144      	bne.n	403e0a <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  403d80:	42a0      	cmp	r0, r4
  403d82:	d212      	bcs.n	403daa <prvTimerTask+0x5a>
  403d84:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  403d86:	1b61      	subs	r1, r4, r5
  403d88:	4b6b      	ldr	r3, [pc, #428]	; (403f38 <prvTimerTask+0x1e8>)
  403d8a:	6818      	ldr	r0, [r3, #0]
  403d8c:	4b6b      	ldr	r3, [pc, #428]	; (403f3c <prvTimerTask+0x1ec>)
  403d8e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403d90:	4b6b      	ldr	r3, [pc, #428]	; (403f40 <prvTimerTask+0x1f0>)
  403d92:	4798      	blx	r3
  403d94:	2800      	cmp	r0, #0
  403d96:	d13a      	bne.n	403e0e <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  403d98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403d9c:	f8c9 3000 	str.w	r3, [r9]
  403da0:	f3bf 8f4f 	dsb	sy
  403da4:	f3bf 8f6f 	isb	sy
  403da8:	e031      	b.n	403e0e <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  403daa:	4b65      	ldr	r3, [pc, #404]	; (403f40 <prvTimerTask+0x1f0>)
  403dac:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403dae:	6833      	ldr	r3, [r6, #0]
  403db0:	68db      	ldr	r3, [r3, #12]
  403db2:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403db6:	f10a 0004 	add.w	r0, sl, #4
  403dba:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403dbc:	f8da 301c 	ldr.w	r3, [sl, #28]
  403dc0:	2b01      	cmp	r3, #1
  403dc2:	d004      	beq.n	403dce <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403dc4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403dc8:	4650      	mov	r0, sl
  403dca:	4798      	blx	r3
  403dcc:	e01f      	b.n	403e0e <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  403dce:	f8da 1018 	ldr.w	r1, [sl, #24]
  403dd2:	4623      	mov	r3, r4
  403dd4:	462a      	mov	r2, r5
  403dd6:	4421      	add	r1, r4
  403dd8:	4650      	mov	r0, sl
  403dda:	4d5a      	ldr	r5, [pc, #360]	; (403f44 <prvTimerTask+0x1f4>)
  403ddc:	47a8      	blx	r5
  403dde:	2801      	cmp	r0, #1
  403de0:	d1f0      	bne.n	403dc4 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403de2:	2100      	movs	r1, #0
  403de4:	9100      	str	r1, [sp, #0]
  403de6:	460b      	mov	r3, r1
  403de8:	4622      	mov	r2, r4
  403dea:	4650      	mov	r0, sl
  403dec:	4c56      	ldr	r4, [pc, #344]	; (403f48 <prvTimerTask+0x1f8>)
  403dee:	47a0      	blx	r4
			configASSERT( xResult );
  403df0:	2800      	cmp	r0, #0
  403df2:	d1e7      	bne.n	403dc4 <prvTimerTask+0x74>
  403df4:	f04f 0380 	mov.w	r3, #128	; 0x80
  403df8:	b672      	cpsid	i
  403dfa:	f383 8811 	msr	BASEPRI, r3
  403dfe:	f3bf 8f6f 	isb	sy
  403e02:	f3bf 8f4f 	dsb	sy
  403e06:	b662      	cpsie	i
  403e08:	e7fe      	b.n	403e08 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  403e0a:	4b4d      	ldr	r3, [pc, #308]	; (403f40 <prvTimerTask+0x1f0>)
  403e0c:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403e0e:	4d4a      	ldr	r5, [pc, #296]	; (403f38 <prvTimerTask+0x1e8>)
  403e10:	4c4e      	ldr	r4, [pc, #312]	; (403f4c <prvTimerTask+0x1fc>)
  403e12:	e006      	b.n	403e22 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  403e14:	9907      	ldr	r1, [sp, #28]
  403e16:	9806      	ldr	r0, [sp, #24]
  403e18:	9b05      	ldr	r3, [sp, #20]
  403e1a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  403e1c:	9b04      	ldr	r3, [sp, #16]
  403e1e:	2b00      	cmp	r3, #0
  403e20:	da09      	bge.n	403e36 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403e22:	2300      	movs	r3, #0
  403e24:	461a      	mov	r2, r3
  403e26:	a904      	add	r1, sp, #16
  403e28:	6828      	ldr	r0, [r5, #0]
  403e2a:	47a0      	blx	r4
  403e2c:	2800      	cmp	r0, #0
  403e2e:	d098      	beq.n	403d62 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  403e30:	9b04      	ldr	r3, [sp, #16]
  403e32:	2b00      	cmp	r3, #0
  403e34:	dbee      	blt.n	403e14 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  403e36:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  403e3a:	f8da 3014 	ldr.w	r3, [sl, #20]
  403e3e:	b113      	cbz	r3, 403e46 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403e40:	f10a 0004 	add.w	r0, sl, #4
  403e44:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403e46:	a803      	add	r0, sp, #12
  403e48:	4b3a      	ldr	r3, [pc, #232]	; (403f34 <prvTimerTask+0x1e4>)
  403e4a:	4798      	blx	r3
			switch( xMessage.xMessageID )
  403e4c:	9b04      	ldr	r3, [sp, #16]
  403e4e:	2b09      	cmp	r3, #9
  403e50:	d8e7      	bhi.n	403e22 <prvTimerTask+0xd2>
  403e52:	a201      	add	r2, pc, #4	; (adr r2, 403e58 <prvTimerTask+0x108>)
  403e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403e58:	00403e81 	.word	0x00403e81
  403e5c:	00403e81 	.word	0x00403e81
  403e60:	00403e81 	.word	0x00403e81
  403e64:	00403e23 	.word	0x00403e23
  403e68:	00403ed5 	.word	0x00403ed5
  403e6c:	00403f01 	.word	0x00403f01
  403e70:	00403e81 	.word	0x00403e81
  403e74:	00403e81 	.word	0x00403e81
  403e78:	00403e23 	.word	0x00403e23
  403e7c:	00403ed5 	.word	0x00403ed5
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  403e80:	9c05      	ldr	r4, [sp, #20]
  403e82:	f8da 1018 	ldr.w	r1, [sl, #24]
  403e86:	4623      	mov	r3, r4
  403e88:	4602      	mov	r2, r0
  403e8a:	4421      	add	r1, r4
  403e8c:	4650      	mov	r0, sl
  403e8e:	4c2d      	ldr	r4, [pc, #180]	; (403f44 <prvTimerTask+0x1f4>)
  403e90:	47a0      	blx	r4
  403e92:	2801      	cmp	r0, #1
  403e94:	d1bc      	bne.n	403e10 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403e96:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403e9a:	4650      	mov	r0, sl
  403e9c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403e9e:	f8da 301c 	ldr.w	r3, [sl, #28]
  403ea2:	2b01      	cmp	r3, #1
  403ea4:	d1b4      	bne.n	403e10 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  403ea6:	f8da 2018 	ldr.w	r2, [sl, #24]
  403eaa:	2100      	movs	r1, #0
  403eac:	9100      	str	r1, [sp, #0]
  403eae:	460b      	mov	r3, r1
  403eb0:	9805      	ldr	r0, [sp, #20]
  403eb2:	4402      	add	r2, r0
  403eb4:	4650      	mov	r0, sl
  403eb6:	4c24      	ldr	r4, [pc, #144]	; (403f48 <prvTimerTask+0x1f8>)
  403eb8:	47a0      	blx	r4
							configASSERT( xResult );
  403eba:	2800      	cmp	r0, #0
  403ebc:	d1a8      	bne.n	403e10 <prvTimerTask+0xc0>
  403ebe:	f04f 0380 	mov.w	r3, #128	; 0x80
  403ec2:	b672      	cpsid	i
  403ec4:	f383 8811 	msr	BASEPRI, r3
  403ec8:	f3bf 8f6f 	isb	sy
  403ecc:	f3bf 8f4f 	dsb	sy
  403ed0:	b662      	cpsie	i
  403ed2:	e7fe      	b.n	403ed2 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  403ed4:	9905      	ldr	r1, [sp, #20]
  403ed6:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  403eda:	b131      	cbz	r1, 403eea <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  403edc:	4603      	mov	r3, r0
  403ede:	4602      	mov	r2, r0
  403ee0:	4401      	add	r1, r0
  403ee2:	4650      	mov	r0, sl
  403ee4:	4c17      	ldr	r4, [pc, #92]	; (403f44 <prvTimerTask+0x1f4>)
  403ee6:	47a0      	blx	r4
  403ee8:	e792      	b.n	403e10 <prvTimerTask+0xc0>
  403eea:	f04f 0380 	mov.w	r3, #128	; 0x80
  403eee:	b672      	cpsid	i
  403ef0:	f383 8811 	msr	BASEPRI, r3
  403ef4:	f3bf 8f6f 	isb	sy
  403ef8:	f3bf 8f4f 	dsb	sy
  403efc:	b662      	cpsie	i
  403efe:	e7fe      	b.n	403efe <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  403f00:	4650      	mov	r0, sl
  403f02:	4b13      	ldr	r3, [pc, #76]	; (403f50 <prvTimerTask+0x200>)
  403f04:	4798      	blx	r3
  403f06:	e783      	b.n	403e10 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  403f08:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403f0a:	a804      	add	r0, sp, #16
  403f0c:	4b09      	ldr	r3, [pc, #36]	; (403f34 <prvTimerTask+0x1e4>)
  403f0e:	4798      	blx	r3
  403f10:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403f12:	9b04      	ldr	r3, [sp, #16]
  403f14:	2b00      	cmp	r3, #0
  403f16:	f47f af78 	bne.w	403e0a <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  403f1a:	4b0e      	ldr	r3, [pc, #56]	; (403f54 <prvTimerTask+0x204>)
  403f1c:	681b      	ldr	r3, [r3, #0]
  403f1e:	681a      	ldr	r2, [r3, #0]
  403f20:	fab2 f282 	clz	r2, r2
  403f24:	0952      	lsrs	r2, r2, #5
  403f26:	2400      	movs	r4, #0
  403f28:	e72d      	b.n	403d86 <prvTimerTask+0x36>
  403f2a:	bf00      	nop
  403f2c:	2040c724 	.word	0x2040c724
  403f30:	00403279 	.word	0x00403279
  403f34:	00403c99 	.word	0x00403c99
  403f38:	2040c758 	.word	0x2040c758
  403f3c:	00402edd 	.word	0x00402edd
  403f40:	004033e1 	.word	0x004033e1
  403f44:	00403b01 	.word	0x00403b01
  403f48:	00403c29 	.word	0x00403c29
  403f4c:	00402cd9 	.word	0x00402cd9
  403f50:	0040260d 	.word	0x0040260d
  403f54:	2040c728 	.word	0x2040c728
  403f58:	e000ed04 	.word	0xe000ed04
  403f5c:	0040225d 	.word	0x0040225d

00403f60 <AFEC_pot_Callback>:
/* Callbacks: / Handler                                                 */
/************************************************************************/
/**
* \brief AFEC interrupt callback function.
*/
static void AFEC_pot_Callback(void){
  403f60:	b570      	push	{r4, r5, r6, lr}
  403f62:	b082      	sub	sp, #8
	afec->AFEC_CSELR = afec_ch;
  403f64:	4b0d      	ldr	r3, [pc, #52]	; (403f9c <AFEC_pot_Callback+0x3c>)
  403f66:	2206      	movs	r2, #6
  403f68:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  403f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	g_ul_value = afec_channel_get_value(AFEC_POT, AFEC_POT_CHANNEL);
  403f6c:	4e0c      	ldr	r6, [pc, #48]	; (403fa0 <AFEC_pot_Callback+0x40>)
  403f6e:	6033      	str	r3, [r6, #0]
	//g_is_conversion_done = true;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  403f70:	2500      	movs	r5, #0
  403f72:	ac02      	add	r4, sp, #8
  403f74:	f844 5d04 	str.w	r5, [r4, #-4]!
	xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
  403f78:	4621      	mov	r1, r4
  403f7a:	4b0a      	ldr	r3, [pc, #40]	; (403fa4 <AFEC_pot_Callback+0x44>)
  403f7c:	6818      	ldr	r0, [r3, #0]
  403f7e:	4b0a      	ldr	r3, [pc, #40]	; (403fa8 <AFEC_pot_Callback+0x48>)
  403f80:	4798      	blx	r3
	
	adcData adc;
	adc.value = g_ul_value;
  403f82:	6833      	ldr	r3, [r6, #0]
  403f84:	a902      	add	r1, sp, #8
  403f86:	f841 3d08 	str.w	r3, [r1, #-8]!
	xQueueSendFromISR(xQueueADC, &adc, &xHigherPriorityTaskWoken);
  403f8a:	462b      	mov	r3, r5
  403f8c:	4622      	mov	r2, r4
  403f8e:	4807      	ldr	r0, [pc, #28]	; (403fac <AFEC_pot_Callback+0x4c>)
  403f90:	6800      	ldr	r0, [r0, #0]
  403f92:	4c07      	ldr	r4, [pc, #28]	; (403fb0 <AFEC_pot_Callback+0x50>)
  403f94:	47a0      	blx	r4
}
  403f96:	b002      	add	sp, #8
  403f98:	bd70      	pop	{r4, r5, r6, pc}
  403f9a:	bf00      	nop
  403f9c:	40064000 	.word	0x40064000
  403fa0:	2040c75c 	.word	0x2040c75c
  403fa4:	2040c868 	.word	0x2040c868
  403fa8:	00402bf9 	.word	0x00402bf9
  403fac:	2040c86c 	.word	0x2040c86c
  403fb0:	00402af9 	.word	0x00402af9

00403fb4 <task_adc>:
    }
    vTaskDelay(100);
  }
}

void task_adc(void){
  403fb4:	b580      	push	{r7, lr}
  403fb6:	b08a      	sub	sp, #40	; 0x28
	xSemaphore = xSemaphoreCreateBinary();
  403fb8:	2203      	movs	r2, #3
  403fba:	2100      	movs	r1, #0
  403fbc:	2001      	movs	r0, #1
  403fbe:	4b2d      	ldr	r3, [pc, #180]	; (404074 <task_adc+0xc0>)
  403fc0:	4798      	blx	r3
  403fc2:	4d2d      	ldr	r5, [pc, #180]	; (404078 <task_adc+0xc4>)
  403fc4:	6028      	str	r0, [r5, #0]
  afec_enable(afec);
  403fc6:	4c2d      	ldr	r4, [pc, #180]	; (40407c <task_adc+0xc8>)
  403fc8:	4620      	mov	r0, r4
  403fca:	4b2d      	ldr	r3, [pc, #180]	; (404080 <task_adc+0xcc>)
  403fcc:	4798      	blx	r3
  afec_get_config_defaults(&afec_cfg);
  403fce:	a804      	add	r0, sp, #16
  403fd0:	4b2c      	ldr	r3, [pc, #176]	; (404084 <task_adc+0xd0>)
  403fd2:	4798      	blx	r3
  afec_init(afec, &afec_cfg);
  403fd4:	a904      	add	r1, sp, #16
  403fd6:	4620      	mov	r0, r4
  403fd8:	4b2b      	ldr	r3, [pc, #172]	; (404088 <task_adc+0xd4>)
  403fda:	4798      	blx	r3
	reg = afec->AFEC_MR;
  403fdc:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  403fde:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  403fe2:	6063      	str	r3, [r4, #4]
  afec_ch_get_config_defaults(&afec_ch_cfg);
  403fe4:	a801      	add	r0, sp, #4
  403fe6:	4b29      	ldr	r3, [pc, #164]	; (40408c <task_adc+0xd8>)
  403fe8:	4798      	blx	r3
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  403fea:	2300      	movs	r3, #0
  403fec:	f88d 3005 	strb.w	r3, [sp, #5]
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  403ff0:	aa01      	add	r2, sp, #4
  403ff2:	2106      	movs	r1, #6
  403ff4:	4620      	mov	r0, r4
  403ff6:	4b26      	ldr	r3, [pc, #152]	; (404090 <task_adc+0xdc>)
  403ff8:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  403ffa:	2606      	movs	r6, #6
  403ffc:	6666      	str	r6, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  403ffe:	f44f 7300 	mov.w	r3, #512	; 0x200
  404002:	66e3      	str	r3, [r4, #108]	; 0x6c
  afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  404004:	a802      	add	r0, sp, #8
  404006:	4b23      	ldr	r3, [pc, #140]	; (404094 <task_adc+0xe0>)
  404008:	4798      	blx	r3
  afec_temp_sensor_set_config(afec, &afec_temp_sensor_cfg);
  40400a:	a902      	add	r1, sp, #8
  40400c:	4620      	mov	r0, r4
  40400e:	4b22      	ldr	r3, [pc, #136]	; (404098 <task_adc+0xe4>)
  404010:	4798      	blx	r3
  afec_set_callback(afec, afec_channel,	callback, 1);
  404012:	2301      	movs	r3, #1
  404014:	4a21      	ldr	r2, [pc, #132]	; (40409c <task_adc+0xe8>)
  404016:	4631      	mov	r1, r6
  404018:	4620      	mov	r0, r4
  40401a:	4e21      	ldr	r6, [pc, #132]	; (4040a0 <task_adc+0xec>)
  40401c:	47b0      	blx	r6
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40401e:	4b21      	ldr	r3, [pc, #132]	; (4040a4 <task_adc+0xf0>)
  404020:	2280      	movs	r2, #128	; 0x80
  404022:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404026:	f44f 7280 	mov.w	r2, #256	; 0x100
  40402a:	605a      	str	r2, [r3, #4]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40402c:	2340      	movs	r3, #64	; 0x40
  40402e:	6163      	str	r3, [r4, #20]
	afec->AFEC_CR = AFEC_CR_START;
  404030:	2302      	movs	r3, #2
  404032:	6023      	str	r3, [r4, #0]
	afec_start_software_conversion(AFEC_POT);
	
	
	adcData adc;
	
	if (xSemaphore == NULL)
  404034:	682b      	ldr	r3, [r5, #0]
  404036:	b913      	cbnz	r3, 40403e <task_adc+0x8a>
		printf("falha em criar o semaforo \n");
  404038:	481b      	ldr	r0, [pc, #108]	; (4040a8 <task_adc+0xf4>)
  40403a:	4b1c      	ldr	r3, [pc, #112]	; (4040ac <task_adc+0xf8>)
  40403c:	4798      	blx	r3

	while(1){
	  
		if( xSemaphoreTake(xSemaphore, ( TickType_t ) 500) == pdTRUE ){
  40403e:	4f0e      	ldr	r7, [pc, #56]	; (404078 <task_adc+0xc4>)
  404040:	4e1b      	ldr	r6, [pc, #108]	; (4040b0 <task_adc+0xfc>)
  404042:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
  404046:	2500      	movs	r5, #0
  404048:	462b      	mov	r3, r5
  40404a:	4622      	mov	r2, r4
  40404c:	4629      	mov	r1, r5
  40404e:	6838      	ldr	r0, [r7, #0]
  404050:	47b0      	blx	r6
  404052:	2801      	cmp	r0, #1
  404054:	d1f8      	bne.n	404048 <task_adc+0x94>
			printf("%d\n", g_ul_value);
  404056:	4b17      	ldr	r3, [pc, #92]	; (4040b4 <task_adc+0x100>)
  404058:	6819      	ldr	r1, [r3, #0]
  40405a:	4817      	ldr	r0, [pc, #92]	; (4040b8 <task_adc+0x104>)
  40405c:	4b13      	ldr	r3, [pc, #76]	; (4040ac <task_adc+0xf8>)
  40405e:	4798      	blx	r3
			
			//adc.value = g_ul_value;
			//xQueueSend(xQueueADC, &adc, 0);
			
			vTaskDelay(500);
  404060:	4620      	mov	r0, r4
  404062:	4b16      	ldr	r3, [pc, #88]	; (4040bc <task_adc+0x108>)
  404064:	4798      	blx	r3
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  404066:	4b05      	ldr	r3, [pc, #20]	; (40407c <task_adc+0xc8>)
  404068:	2240      	movs	r2, #64	; 0x40
  40406a:	615a      	str	r2, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  40406c:	2202      	movs	r2, #2
  40406e:	601a      	str	r2, [r3, #0]
  404070:	e7e9      	b.n	404046 <task_adc+0x92>
  404072:	bf00      	nop
  404074:	00402899 	.word	0x00402899
  404078:	2040c868 	.word	0x2040c868
  40407c:	40064000 	.word	0x40064000
  404080:	00400471 	.word	0x00400471
  404084:	004002a1 	.word	0x004002a1
  404088:	004002f1 	.word	0x004002f1
  40408c:	004002d1 	.word	0x004002d1
  404090:	0040025d 	.word	0x0040025d
  404094:	004002db 	.word	0x004002db
  404098:	0040028d 	.word	0x0040028d
  40409c:	00403f61 	.word	0x00403f61
  4040a0:	004003f1 	.word	0x004003f1
  4040a4:	e000e100 	.word	0xe000e100
  4040a8:	00407664 	.word	0x00407664
  4040ac:	00404651 	.word	0x00404651
  4040b0:	00402cd9 	.word	0x00402cd9
  4040b4:	2040c75c 	.word	0x2040c75c
  4040b8:	00407680 	.word	0x00407680
  4040bc:	00403501 	.word	0x00403501

004040c0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4040c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4040c2:	b083      	sub	sp, #12
  4040c4:	4605      	mov	r5, r0
  4040c6:	460c      	mov	r4, r1
	uint32_t val = 0;
  4040c8:	2300      	movs	r3, #0
  4040ca:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4040cc:	4b2a      	ldr	r3, [pc, #168]	; (404178 <usart_serial_getchar+0xb8>)
  4040ce:	4298      	cmp	r0, r3
  4040d0:	d013      	beq.n	4040fa <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4040d2:	4b2a      	ldr	r3, [pc, #168]	; (40417c <usart_serial_getchar+0xbc>)
  4040d4:	4298      	cmp	r0, r3
  4040d6:	d018      	beq.n	40410a <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4040d8:	4b29      	ldr	r3, [pc, #164]	; (404180 <usart_serial_getchar+0xc0>)
  4040da:	4298      	cmp	r0, r3
  4040dc:	d01d      	beq.n	40411a <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4040de:	4b29      	ldr	r3, [pc, #164]	; (404184 <usart_serial_getchar+0xc4>)
  4040e0:	429d      	cmp	r5, r3
  4040e2:	d022      	beq.n	40412a <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4040e4:	4b28      	ldr	r3, [pc, #160]	; (404188 <usart_serial_getchar+0xc8>)
  4040e6:	429d      	cmp	r5, r3
  4040e8:	d027      	beq.n	40413a <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4040ea:	4b28      	ldr	r3, [pc, #160]	; (40418c <usart_serial_getchar+0xcc>)
  4040ec:	429d      	cmp	r5, r3
  4040ee:	d02e      	beq.n	40414e <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4040f0:	4b27      	ldr	r3, [pc, #156]	; (404190 <usart_serial_getchar+0xd0>)
  4040f2:	429d      	cmp	r5, r3
  4040f4:	d035      	beq.n	404162 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4040f6:	b003      	add	sp, #12
  4040f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4040fa:	461f      	mov	r7, r3
  4040fc:	4e25      	ldr	r6, [pc, #148]	; (404194 <usart_serial_getchar+0xd4>)
  4040fe:	4621      	mov	r1, r4
  404100:	4638      	mov	r0, r7
  404102:	47b0      	blx	r6
  404104:	2800      	cmp	r0, #0
  404106:	d1fa      	bne.n	4040fe <usart_serial_getchar+0x3e>
  404108:	e7e9      	b.n	4040de <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40410a:	461f      	mov	r7, r3
  40410c:	4e21      	ldr	r6, [pc, #132]	; (404194 <usart_serial_getchar+0xd4>)
  40410e:	4621      	mov	r1, r4
  404110:	4638      	mov	r0, r7
  404112:	47b0      	blx	r6
  404114:	2800      	cmp	r0, #0
  404116:	d1fa      	bne.n	40410e <usart_serial_getchar+0x4e>
  404118:	e7e4      	b.n	4040e4 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40411a:	461f      	mov	r7, r3
  40411c:	4e1d      	ldr	r6, [pc, #116]	; (404194 <usart_serial_getchar+0xd4>)
  40411e:	4621      	mov	r1, r4
  404120:	4638      	mov	r0, r7
  404122:	47b0      	blx	r6
  404124:	2800      	cmp	r0, #0
  404126:	d1fa      	bne.n	40411e <usart_serial_getchar+0x5e>
  404128:	e7df      	b.n	4040ea <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  40412a:	461f      	mov	r7, r3
  40412c:	4e19      	ldr	r6, [pc, #100]	; (404194 <usart_serial_getchar+0xd4>)
  40412e:	4621      	mov	r1, r4
  404130:	4638      	mov	r0, r7
  404132:	47b0      	blx	r6
  404134:	2800      	cmp	r0, #0
  404136:	d1fa      	bne.n	40412e <usart_serial_getchar+0x6e>
  404138:	e7da      	b.n	4040f0 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40413a:	461e      	mov	r6, r3
  40413c:	4d16      	ldr	r5, [pc, #88]	; (404198 <usart_serial_getchar+0xd8>)
  40413e:	a901      	add	r1, sp, #4
  404140:	4630      	mov	r0, r6
  404142:	47a8      	blx	r5
  404144:	2800      	cmp	r0, #0
  404146:	d1fa      	bne.n	40413e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  404148:	9b01      	ldr	r3, [sp, #4]
  40414a:	7023      	strb	r3, [r4, #0]
  40414c:	e7d3      	b.n	4040f6 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40414e:	461e      	mov	r6, r3
  404150:	4d11      	ldr	r5, [pc, #68]	; (404198 <usart_serial_getchar+0xd8>)
  404152:	a901      	add	r1, sp, #4
  404154:	4630      	mov	r0, r6
  404156:	47a8      	blx	r5
  404158:	2800      	cmp	r0, #0
  40415a:	d1fa      	bne.n	404152 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  40415c:	9b01      	ldr	r3, [sp, #4]
  40415e:	7023      	strb	r3, [r4, #0]
  404160:	e7c9      	b.n	4040f6 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  404162:	461e      	mov	r6, r3
  404164:	4d0c      	ldr	r5, [pc, #48]	; (404198 <usart_serial_getchar+0xd8>)
  404166:	a901      	add	r1, sp, #4
  404168:	4630      	mov	r0, r6
  40416a:	47a8      	blx	r5
  40416c:	2800      	cmp	r0, #0
  40416e:	d1fa      	bne.n	404166 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  404170:	9b01      	ldr	r3, [sp, #4]
  404172:	7023      	strb	r3, [r4, #0]
}
  404174:	e7bf      	b.n	4040f6 <usart_serial_getchar+0x36>
  404176:	bf00      	nop
  404178:	400e0800 	.word	0x400e0800
  40417c:	400e0a00 	.word	0x400e0a00
  404180:	400e1a00 	.word	0x400e1a00
  404184:	400e1c00 	.word	0x400e1c00
  404188:	40024000 	.word	0x40024000
  40418c:	40028000 	.word	0x40028000
  404190:	4002c000 	.word	0x4002c000
  404194:	00401e1f 	.word	0x00401e1f
  404198:	00401f2b 	.word	0x00401f2b

0040419c <usart_serial_putchar>:
{
  40419c:	b570      	push	{r4, r5, r6, lr}
  40419e:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4041a0:	4b2a      	ldr	r3, [pc, #168]	; (40424c <usart_serial_putchar+0xb0>)
  4041a2:	4298      	cmp	r0, r3
  4041a4:	d013      	beq.n	4041ce <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  4041a6:	4b2a      	ldr	r3, [pc, #168]	; (404250 <usart_serial_putchar+0xb4>)
  4041a8:	4298      	cmp	r0, r3
  4041aa:	d019      	beq.n	4041e0 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4041ac:	4b29      	ldr	r3, [pc, #164]	; (404254 <usart_serial_putchar+0xb8>)
  4041ae:	4298      	cmp	r0, r3
  4041b0:	d01f      	beq.n	4041f2 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  4041b2:	4b29      	ldr	r3, [pc, #164]	; (404258 <usart_serial_putchar+0xbc>)
  4041b4:	4298      	cmp	r0, r3
  4041b6:	d025      	beq.n	404204 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4041b8:	4b28      	ldr	r3, [pc, #160]	; (40425c <usart_serial_putchar+0xc0>)
  4041ba:	4298      	cmp	r0, r3
  4041bc:	d02b      	beq.n	404216 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4041be:	4b28      	ldr	r3, [pc, #160]	; (404260 <usart_serial_putchar+0xc4>)
  4041c0:	4298      	cmp	r0, r3
  4041c2:	d031      	beq.n	404228 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4041c4:	4b27      	ldr	r3, [pc, #156]	; (404264 <usart_serial_putchar+0xc8>)
  4041c6:	4298      	cmp	r0, r3
  4041c8:	d037      	beq.n	40423a <usart_serial_putchar+0x9e>
	return 0;
  4041ca:	2000      	movs	r0, #0
}
  4041cc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4041ce:	461e      	mov	r6, r3
  4041d0:	4d25      	ldr	r5, [pc, #148]	; (404268 <usart_serial_putchar+0xcc>)
  4041d2:	4621      	mov	r1, r4
  4041d4:	4630      	mov	r0, r6
  4041d6:	47a8      	blx	r5
  4041d8:	2800      	cmp	r0, #0
  4041da:	d1fa      	bne.n	4041d2 <usart_serial_putchar+0x36>
		return 1;
  4041dc:	2001      	movs	r0, #1
  4041de:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4041e0:	461e      	mov	r6, r3
  4041e2:	4d21      	ldr	r5, [pc, #132]	; (404268 <usart_serial_putchar+0xcc>)
  4041e4:	4621      	mov	r1, r4
  4041e6:	4630      	mov	r0, r6
  4041e8:	47a8      	blx	r5
  4041ea:	2800      	cmp	r0, #0
  4041ec:	d1fa      	bne.n	4041e4 <usart_serial_putchar+0x48>
		return 1;
  4041ee:	2001      	movs	r0, #1
  4041f0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4041f2:	461e      	mov	r6, r3
  4041f4:	4d1c      	ldr	r5, [pc, #112]	; (404268 <usart_serial_putchar+0xcc>)
  4041f6:	4621      	mov	r1, r4
  4041f8:	4630      	mov	r0, r6
  4041fa:	47a8      	blx	r5
  4041fc:	2800      	cmp	r0, #0
  4041fe:	d1fa      	bne.n	4041f6 <usart_serial_putchar+0x5a>
		return 1;
  404200:	2001      	movs	r0, #1
  404202:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  404204:	461e      	mov	r6, r3
  404206:	4d18      	ldr	r5, [pc, #96]	; (404268 <usart_serial_putchar+0xcc>)
  404208:	4621      	mov	r1, r4
  40420a:	4630      	mov	r0, r6
  40420c:	47a8      	blx	r5
  40420e:	2800      	cmp	r0, #0
  404210:	d1fa      	bne.n	404208 <usart_serial_putchar+0x6c>
		return 1;
  404212:	2001      	movs	r0, #1
  404214:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404216:	461e      	mov	r6, r3
  404218:	4d14      	ldr	r5, [pc, #80]	; (40426c <usart_serial_putchar+0xd0>)
  40421a:	4621      	mov	r1, r4
  40421c:	4630      	mov	r0, r6
  40421e:	47a8      	blx	r5
  404220:	2800      	cmp	r0, #0
  404222:	d1fa      	bne.n	40421a <usart_serial_putchar+0x7e>
		return 1;
  404224:	2001      	movs	r0, #1
  404226:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404228:	461e      	mov	r6, r3
  40422a:	4d10      	ldr	r5, [pc, #64]	; (40426c <usart_serial_putchar+0xd0>)
  40422c:	4621      	mov	r1, r4
  40422e:	4630      	mov	r0, r6
  404230:	47a8      	blx	r5
  404232:	2800      	cmp	r0, #0
  404234:	d1fa      	bne.n	40422c <usart_serial_putchar+0x90>
		return 1;
  404236:	2001      	movs	r0, #1
  404238:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40423a:	461e      	mov	r6, r3
  40423c:	4d0b      	ldr	r5, [pc, #44]	; (40426c <usart_serial_putchar+0xd0>)
  40423e:	4621      	mov	r1, r4
  404240:	4630      	mov	r0, r6
  404242:	47a8      	blx	r5
  404244:	2800      	cmp	r0, #0
  404246:	d1fa      	bne.n	40423e <usart_serial_putchar+0xa2>
		return 1;
  404248:	2001      	movs	r0, #1
  40424a:	bd70      	pop	{r4, r5, r6, pc}
  40424c:	400e0800 	.word	0x400e0800
  404250:	400e0a00 	.word	0x400e0a00
  404254:	400e1a00 	.word	0x400e1a00
  404258:	400e1c00 	.word	0x400e1c00
  40425c:	40024000 	.word	0x40024000
  404260:	40028000 	.word	0x40028000
  404264:	4002c000 	.word	0x4002c000
  404268:	00401e0d 	.word	0x00401e0d
  40426c:	00401f15 	.word	0x00401f15

00404270 <vApplicationStackOverflowHook>:
{
  404270:	b508      	push	{r3, lr}
  printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  404272:	460a      	mov	r2, r1
  404274:	4601      	mov	r1, r0
  404276:	4802      	ldr	r0, [pc, #8]	; (404280 <vApplicationStackOverflowHook+0x10>)
  404278:	4b02      	ldr	r3, [pc, #8]	; (404284 <vApplicationStackOverflowHook+0x14>)
  40427a:	4798      	blx	r3
  40427c:	e7fe      	b.n	40427c <vApplicationStackOverflowHook+0xc>
  40427e:	bf00      	nop
  404280:	0040769c 	.word	0x0040769c
  404284:	00404651 	.word	0x00404651

00404288 <vApplicationTickHook>:
{
  404288:	4770      	bx	lr

0040428a <vApplicationMallocFailedHook>:
  40428a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40428e:	b672      	cpsid	i
  404290:	f383 8811 	msr	BASEPRI, r3
  404294:	f3bf 8f6f 	isb	sy
  404298:	f3bf 8f4f 	dsb	sy
  40429c:	b662      	cpsie	i
  40429e:	e7fe      	b.n	40429e <vApplicationMallocFailedHook+0x14>

004042a0 <draw_screen>:
void draw_screen(void) {
  4042a0:	b510      	push	{r4, lr}
  ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  4042a2:	4806      	ldr	r0, [pc, #24]	; (4042bc <draw_screen+0x1c>)
  4042a4:	4b06      	ldr	r3, [pc, #24]	; (4042c0 <draw_screen+0x20>)
  4042a6:	4798      	blx	r3
  ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH-1, ILI9488_LCD_HEIGHT-1);
  4042a8:	f240 13df 	movw	r3, #479	; 0x1df
  4042ac:	f240 123f 	movw	r2, #319	; 0x13f
  4042b0:	2100      	movs	r1, #0
  4042b2:	4608      	mov	r0, r1
  4042b4:	4c03      	ldr	r4, [pc, #12]	; (4042c4 <draw_screen+0x24>)
  4042b6:	47a0      	blx	r4
  4042b8:	bd10      	pop	{r4, pc}
  4042ba:	bf00      	nop
  4042bc:	00fcfcfc 	.word	0x00fcfcfc
  4042c0:	00401219 	.word	0x00401219
  4042c4:	00401469 	.word	0x00401469

004042c8 <task_lcd>:
			afec_start_software_conversion(AFEC_POT);
		}
	}
}

void task_lcd(void){
  4042c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4042cc:	b084      	sub	sp, #16
  xQueueTouch = xQueueCreate( 10, sizeof( touchData ) );
  4042ce:	2200      	movs	r2, #0
  4042d0:	2108      	movs	r1, #8
  4042d2:	200a      	movs	r0, #10
  4042d4:	4c40      	ldr	r4, [pc, #256]	; (4043d8 <task_lcd+0x110>)
  4042d6:	47a0      	blx	r4
  4042d8:	4b40      	ldr	r3, [pc, #256]	; (4043dc <task_lcd+0x114>)
  4042da:	6018      	str	r0, [r3, #0]
  xQueueADC   = xQueueCreate( 5, sizeof( adcData ) );
  4042dc:	2200      	movs	r2, #0
  4042de:	2104      	movs	r1, #4
  4042e0:	2005      	movs	r0, #5
  4042e2:	47a0      	blx	r4
  4042e4:	4b3e      	ldr	r3, [pc, #248]	; (4043e0 <task_lcd+0x118>)
  4042e6:	6018      	str	r0, [r3, #0]
  g_ili9488_display_opt.ul_width = ILI9488_LCD_WIDTH;
  4042e8:	483e      	ldr	r0, [pc, #248]	; (4043e4 <task_lcd+0x11c>)
  4042ea:	f44f 73a0 	mov.w	r3, #320	; 0x140
  4042ee:	6003      	str	r3, [r0, #0]
  g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  4042f0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4042f4:	6043      	str	r3, [r0, #4]
  g_ili9488_display_opt.foreground_color = COLOR_CONVERT(COLOR_WHITE);
  4042f6:	4b3c      	ldr	r3, [pc, #240]	; (4043e8 <task_lcd+0x120>)
  4042f8:	6083      	str	r3, [r0, #8]
  g_ili9488_display_opt.background_color = COLOR_CONVERT(COLOR_WHITE);
  4042fa:	60c3      	str	r3, [r0, #12]
  ili9488_init(&g_ili9488_display_opt);
  4042fc:	4b3b      	ldr	r3, [pc, #236]	; (4043ec <task_lcd+0x124>)
  4042fe:	4798      	blx	r3
  
  // inicializa LCD e pinta de branco
  configure_lcd();
  draw_screen();
  404300:	4b3b      	ldr	r3, [pc, #236]	; (4043f0 <task_lcd+0x128>)
  404302:	4798      	blx	r3
  ul_y2 = 200;
  
  
  
  while (true) {
    if (xQueueReceive( xQueueTouch, &(touch), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  404304:	4e35      	ldr	r6, [pc, #212]	; (4043dc <task_lcd+0x114>)
  404306:	4d3b      	ldr	r5, [pc, #236]	; (4043f4 <task_lcd+0x12c>)
  404308:	e030      	b.n	40436c <task_lcd+0xa4>
    }
	
	// Busca um novo valor na fila do adc!
	// formata
	// e imprime no LCD o dado
	if (xQueueReceive( xQueueADC, &(adc), ( TickType_t )  100 / portTICK_PERIOD_MS)) {
  40430a:	4623      	mov	r3, r4
  40430c:	2264      	movs	r2, #100	; 0x64
  40430e:	a901      	add	r1, sp, #4
  404310:	4833      	ldr	r0, [pc, #204]	; (4043e0 <task_lcd+0x118>)
  404312:	6800      	ldr	r0, [r0, #0]
  404314:	47a8      	blx	r5
  404316:	b968      	cbnz	r0, 404334 <task_lcd+0x6c>
    if (xQueueReceive( xQueueTouch, &(touch), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  404318:	4623      	mov	r3, r4
  40431a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  40431e:	a902      	add	r1, sp, #8
  404320:	6830      	ldr	r0, [r6, #0]
  404322:	47a8      	blx	r5
  404324:	2800      	cmp	r0, #0
  404326:	d0f0      	beq.n	40430a <task_lcd+0x42>
      printf("Touch em: x:%d y:%d\n", touch.x, touch.y);
  404328:	9a03      	ldr	r2, [sp, #12]
  40432a:	9902      	ldr	r1, [sp, #8]
  40432c:	4832      	ldr	r0, [pc, #200]	; (4043f8 <task_lcd+0x130>)
  40432e:	4b33      	ldr	r3, [pc, #204]	; (4043fc <task_lcd+0x134>)
  404330:	4798      	blx	r3
  404332:	e7ea      	b.n	40430a <task_lcd+0x42>
		char b[512];
		//sprintf(b, "%04d", adc.value);
		if (adc.value < 1400){
  404334:	9b01      	ldr	r3, [sp, #4]
  404336:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
  40433a:	d319      	bcc.n	404370 <task_lcd+0xa8>
			ili9488_draw_rectangle( 121,  ul_y1, 210, ul_y2);
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
			ili9488_draw_rectangle( 211,  ul_y1, 300, ul_y2);
		}

		else if (adc.value > 2800){
  40433c:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
  404340:	d932      	bls.n	4043a8 <task_lcd+0xe0>
			ul_x2 = 300;
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
  404342:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
  404346:	4b2e      	ldr	r3, [pc, #184]	; (404400 <task_lcd+0x138>)
  404348:	4798      	blx	r3
			ili9488_draw_rectangle( 211,  ul_y1, ul_x2, ul_y2);
  40434a:	23c8      	movs	r3, #200	; 0xc8
  40434c:	f44f 7296 	mov.w	r2, #300	; 0x12c
  404350:	2196      	movs	r1, #150	; 0x96
  404352:	20d3      	movs	r0, #211	; 0xd3
  404354:	4c2b      	ldr	r4, [pc, #172]	; (404404 <task_lcd+0x13c>)
  404356:	47a0      	blx	r4
			ili9488_draw_rectangle( 30,  ul_y1, 120, ul_y2);
  404358:	23c8      	movs	r3, #200	; 0xc8
  40435a:	2278      	movs	r2, #120	; 0x78
  40435c:	2196      	movs	r1, #150	; 0x96
  40435e:	201e      	movs	r0, #30
  404360:	47a0      	blx	r4
			ili9488_draw_rectangle( 121,  ul_y1, 210, ul_y2);
  404362:	23c8      	movs	r3, #200	; 0xc8
  404364:	22d2      	movs	r2, #210	; 0xd2
  404366:	2196      	movs	r1, #150	; 0x96
  404368:	2079      	movs	r0, #121	; 0x79
  40436a:	47a0      	blx	r4
    if (xQueueReceive( xQueueTouch, &(touch), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  40436c:	2400      	movs	r4, #0
  40436e:	e7d3      	b.n	404318 <task_lcd+0x50>
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_RED));
  404370:	f44f 007c 	mov.w	r0, #16515072	; 0xfc0000
  404374:	4f22      	ldr	r7, [pc, #136]	; (404400 <task_lcd+0x138>)
  404376:	47b8      	blx	r7
			ili9488_draw_rectangle(ul_x1, ul_y1, ul_x2, ul_y2);
  404378:	23c8      	movs	r3, #200	; 0xc8
  40437a:	2278      	movs	r2, #120	; 0x78
  40437c:	2196      	movs	r1, #150	; 0x96
  40437e:	201e      	movs	r0, #30
  404380:	4c20      	ldr	r4, [pc, #128]	; (404404 <task_lcd+0x13c>)
  404382:	47a0      	blx	r4
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  404384:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4043e8 <task_lcd+0x120>
  404388:	4640      	mov	r0, r8
  40438a:	47b8      	blx	r7
			ili9488_draw_rectangle( 121,  ul_y1, 210, ul_y2);
  40438c:	23c8      	movs	r3, #200	; 0xc8
  40438e:	22d2      	movs	r2, #210	; 0xd2
  404390:	2196      	movs	r1, #150	; 0x96
  404392:	2079      	movs	r0, #121	; 0x79
  404394:	47a0      	blx	r4
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  404396:	4640      	mov	r0, r8
  404398:	47b8      	blx	r7
			ili9488_draw_rectangle( 211,  ul_y1, 300, ul_y2);
  40439a:	23c8      	movs	r3, #200	; 0xc8
  40439c:	f44f 7296 	mov.w	r2, #300	; 0x12c
  4043a0:	2196      	movs	r1, #150	; 0x96
  4043a2:	20d3      	movs	r0, #211	; 0xd3
  4043a4:	47a0      	blx	r4
  4043a6:	e7e1      	b.n	40436c <task_lcd+0xa4>
		} else {	
			ul_x2 = 210;
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_YELLOW));
  4043a8:	4817      	ldr	r0, [pc, #92]	; (404408 <task_lcd+0x140>)
  4043aa:	4f15      	ldr	r7, [pc, #84]	; (404400 <task_lcd+0x138>)
  4043ac:	47b8      	blx	r7
			ili9488_draw_rectangle(30, ul_y1, 120, ul_y2);
  4043ae:	23c8      	movs	r3, #200	; 0xc8
  4043b0:	2278      	movs	r2, #120	; 0x78
  4043b2:	2196      	movs	r1, #150	; 0x96
  4043b4:	201e      	movs	r0, #30
  4043b6:	4c13      	ldr	r4, [pc, #76]	; (404404 <task_lcd+0x13c>)
  4043b8:	47a0      	blx	r4
			ili9488_draw_rectangle(121, ul_y1, ul_x2, ul_y2);
  4043ba:	23c8      	movs	r3, #200	; 0xc8
  4043bc:	22d2      	movs	r2, #210	; 0xd2
  4043be:	2196      	movs	r1, #150	; 0x96
  4043c0:	2079      	movs	r0, #121	; 0x79
  4043c2:	47a0      	blx	r4
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  4043c4:	4808      	ldr	r0, [pc, #32]	; (4043e8 <task_lcd+0x120>)
  4043c6:	47b8      	blx	r7
			ili9488_draw_rectangle( 211,  ul_y1, 300, ul_y2);	
  4043c8:	23c8      	movs	r3, #200	; 0xc8
  4043ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
  4043ce:	2196      	movs	r1, #150	; 0x96
  4043d0:	20d3      	movs	r0, #211	; 0xd3
  4043d2:	47a0      	blx	r4
  4043d4:	e7ca      	b.n	40436c <task_lcd+0xa4>
  4043d6:	bf00      	nop
  4043d8:	00402899 	.word	0x00402899
  4043dc:	2040c880 	.word	0x2040c880
  4043e0:	2040c86c 	.word	0x2040c86c
  4043e4:	2040c870 	.word	0x2040c870
  4043e8:	00fcfcfc 	.word	0x00fcfcfc
  4043ec:	004012a5 	.word	0x004012a5
  4043f0:	004042a1 	.word	0x004042a1
  4043f4:	00402cd9 	.word	0x00402cd9
  4043f8:	00407684 	.word	0x00407684
  4043fc:	00404651 	.word	0x00404651
  404400:	00401219 	.word	0x00401219
  404404:	00401525 	.word	0x00401525
  404408:	00fcfc00 	.word	0x00fcfc00

0040440c <mxt_handler>:
{
  40440c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404410:	b084      	sub	sp, #16
  404412:	4605      	mov	r5, r0
  404414:	4689      	mov	r9, r1
  404416:	4690      	mov	r8, r2
  uint first = 0;
  404418:	f04f 0a00 	mov.w	sl, #0
  uint8_t i = 0; /* Iterator */
  40441c:	4654      	mov	r4, sl
    if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  40441e:	4f15      	ldr	r7, [pc, #84]	; (404474 <mxt_handler+0x68>)
  } while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  404420:	4e15      	ldr	r6, [pc, #84]	; (404478 <mxt_handler+0x6c>)
  404422:	e008      	b.n	404436 <mxt_handler+0x2a>
    i++;
  404424:	3401      	adds	r4, #1
  404426:	b2e4      	uxtb	r4, r4
  404428:	f04f 0a01 	mov.w	sl, #1
  } while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  40442c:	4628      	mov	r0, r5
  40442e:	47b0      	blx	r6
  404430:	2c02      	cmp	r4, #2
  404432:	d81b      	bhi.n	40446c <mxt_handler+0x60>
  404434:	b1d0      	cbz	r0, 40446c <mxt_handler+0x60>
    if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  404436:	a901      	add	r1, sp, #4
  404438:	4628      	mov	r0, r5
  40443a:	47b8      	blx	r7
  40443c:	2800      	cmp	r0, #0
  40443e:	d1f5      	bne.n	40442c <mxt_handler+0x20>
    if(first == 0 ){
  404440:	f1ba 0f00 	cmp.w	sl, #0
  404444:	d1ee      	bne.n	404424 <mxt_handler+0x18>
      *x = convert_axis_system_x(touch_event.y);
  404446:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  return ILI9488_LCD_WIDTH - ILI9488_LCD_WIDTH*touch_y/4096;
  40444a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40444e:	f3c3 1393 	ubfx	r3, r3, #6, #20
  404452:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
      *x = convert_axis_system_x(touch_event.y);
  404456:	f8c9 3000 	str.w	r3, [r9]
      *y = convert_axis_system_y(touch_event.x);
  40445a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  return ILI9488_LCD_HEIGHT*touch_x/4096;
  40445e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  404462:	f3c3 13d3 	ubfx	r3, r3, #7, #20
      *y = convert_axis_system_y(touch_event.x);
  404466:	f8c8 3000 	str.w	r3, [r8]
  40446a:	e7db      	b.n	404424 <mxt_handler+0x18>
}
  40446c:	b004      	add	sp, #16
  40446e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404472:	bf00      	nop
  404474:	00400a39 	.word	0x00400a39
  404478:	004009c9 	.word	0x004009c9

0040447c <task_mxt>:
void task_mxt(void){
  40447c:	b580      	push	{r7, lr}
  40447e:	b08a      	sub	sp, #40	; 0x28
  mxt_init(&device);       	/* Initialize the mXT touch device */
  404480:	a802      	add	r0, sp, #8
  404482:	4b0c      	ldr	r3, [pc, #48]	; (4044b4 <task_mxt+0x38>)
  404484:	4798      	blx	r3
    if (mxt_is_message_pending(&device)) {
  404486:	4c0c      	ldr	r4, [pc, #48]	; (4044b8 <task_mxt+0x3c>)
      mxt_handler(&device, &touch.x, &touch.y);
  404488:	4f0c      	ldr	r7, [pc, #48]	; (4044bc <task_mxt+0x40>)
      xQueueSend( xQueueTouch, &touch, 0);           /* send mesage to queue */
  40448a:	4e0d      	ldr	r6, [pc, #52]	; (4044c0 <task_mxt+0x44>)
  40448c:	e002      	b.n	404494 <task_mxt+0x18>
    vTaskDelay(100);
  40448e:	2064      	movs	r0, #100	; 0x64
  404490:	4b0c      	ldr	r3, [pc, #48]	; (4044c4 <task_mxt+0x48>)
  404492:	4798      	blx	r3
    if (mxt_is_message_pending(&device)) {
  404494:	a802      	add	r0, sp, #8
  404496:	47a0      	blx	r4
  404498:	2800      	cmp	r0, #0
  40449a:	d0f8      	beq.n	40448e <task_mxt+0x12>
      mxt_handler(&device, &touch.x, &touch.y);
  40449c:	aa01      	add	r2, sp, #4
  40449e:	4669      	mov	r1, sp
  4044a0:	a802      	add	r0, sp, #8
  4044a2:	47b8      	blx	r7
      xQueueSend( xQueueTouch, &touch, 0);           /* send mesage to queue */
  4044a4:	2300      	movs	r3, #0
  4044a6:	461a      	mov	r2, r3
  4044a8:	4669      	mov	r1, sp
  4044aa:	6830      	ldr	r0, [r6, #0]
  4044ac:	4d06      	ldr	r5, [pc, #24]	; (4044c8 <task_mxt+0x4c>)
  4044ae:	47a8      	blx	r5
  4044b0:	e7ed      	b.n	40448e <task_mxt+0x12>
  4044b2:	bf00      	nop
  4044b4:	004004d5 	.word	0x004004d5
  4044b8:	004009c9 	.word	0x004009c9
  4044bc:	0040440d 	.word	0x0040440d
  4044c0:	2040c880 	.word	0x2040c880
  4044c4:	00403501 	.word	0x00403501
  4044c8:	00402915 	.word	0x00402915

004044cc <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/

int main(void)
{
  4044cc:	b500      	push	{lr}
  4044ce:	b08b      	sub	sp, #44	; 0x2c
		.charlength   = USART_SERIAL_CHAR_LENGTH,
		.paritytype   = USART_SERIAL_PARITY,
		.stopbits     = USART_SERIAL_STOP_BIT
	};

	sysclk_init(); /* Initialize system clocks */
  4044d0:	4b31      	ldr	r3, [pc, #196]	; (404598 <main+0xcc>)
  4044d2:	4798      	blx	r3
	board_init();  /* Initialize board */
  4044d4:	4b31      	ldr	r3, [pc, #196]	; (40459c <main+0xd0>)
  4044d6:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4044d8:	4d31      	ldr	r5, [pc, #196]	; (4045a0 <main+0xd4>)
  4044da:	4b32      	ldr	r3, [pc, #200]	; (4045a4 <main+0xd8>)
  4044dc:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4044de:	4a32      	ldr	r2, [pc, #200]	; (4045a8 <main+0xdc>)
  4044e0:	4b32      	ldr	r3, [pc, #200]	; (4045ac <main+0xe0>)
  4044e2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4044e4:	4a32      	ldr	r2, [pc, #200]	; (4045b0 <main+0xe4>)
  4044e6:	4b33      	ldr	r3, [pc, #204]	; (4045b4 <main+0xe8>)
  4044e8:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4044ea:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4044ee:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  4044f0:	23c0      	movs	r3, #192	; 0xc0
  4044f2:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  4044f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4044f8:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  4044fa:	2400      	movs	r4, #0
  4044fc:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4044fe:	9408      	str	r4, [sp, #32]
  404500:	200e      	movs	r0, #14
  404502:	4b2d      	ldr	r3, [pc, #180]	; (4045b8 <main+0xec>)
  404504:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  404506:	4a2d      	ldr	r2, [pc, #180]	; (4045bc <main+0xf0>)
  404508:	a904      	add	r1, sp, #16
  40450a:	4628      	mov	r0, r5
  40450c:	4b2c      	ldr	r3, [pc, #176]	; (4045c0 <main+0xf4>)
  40450e:	4798      	blx	r3
		usart_enable_tx(p_usart);
  404510:	4628      	mov	r0, r5
  404512:	4b2c      	ldr	r3, [pc, #176]	; (4045c4 <main+0xf8>)
  404514:	4798      	blx	r3
		usart_enable_rx(p_usart);
  404516:	4628      	mov	r0, r5
  404518:	4b2b      	ldr	r3, [pc, #172]	; (4045c8 <main+0xfc>)
  40451a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40451c:	4e2b      	ldr	r6, [pc, #172]	; (4045cc <main+0x100>)
  40451e:	6833      	ldr	r3, [r6, #0]
  404520:	4621      	mov	r1, r4
  404522:	6898      	ldr	r0, [r3, #8]
  404524:	4d2a      	ldr	r5, [pc, #168]	; (4045d0 <main+0x104>)
  404526:	47a8      	blx	r5
	setbuf(stdin, NULL);
  404528:	6833      	ldr	r3, [r6, #0]
  40452a:	4621      	mov	r1, r4
  40452c:	6858      	ldr	r0, [r3, #4]
  40452e:	47a8      	blx	r5
	
	/* Initialize stdio on USART */
	stdio_serial_init(USART_SERIAL_EXAMPLE, &usart_serial_options);
	
	/* Create task to handler touch */
	if (xTaskCreate(task_mxt, "mxt", TASK_MXT_STACK_SIZE, NULL, TASK_MXT_STACK_PRIORITY, NULL) != pdPASS) {
  404530:	9403      	str	r4, [sp, #12]
  404532:	9402      	str	r4, [sp, #8]
  404534:	9401      	str	r4, [sp, #4]
  404536:	9400      	str	r4, [sp, #0]
  404538:	4623      	mov	r3, r4
  40453a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40453e:	4925      	ldr	r1, [pc, #148]	; (4045d4 <main+0x108>)
  404540:	4825      	ldr	r0, [pc, #148]	; (4045d8 <main+0x10c>)
  404542:	4c26      	ldr	r4, [pc, #152]	; (4045dc <main+0x110>)
  404544:	47a0      	blx	r4
  404546:	2801      	cmp	r0, #1
  404548:	d002      	beq.n	404550 <main+0x84>
		printf("Failed to create test led task\r\n");
  40454a:	4825      	ldr	r0, [pc, #148]	; (4045e0 <main+0x114>)
  40454c:	4b25      	ldr	r3, [pc, #148]	; (4045e4 <main+0x118>)
  40454e:	4798      	blx	r3
	}
	
	/* Create task to handler LCD */
	if (xTaskCreate(task_lcd, "lcd", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_STACK_PRIORITY, NULL) != pdPASS) {
  404550:	2300      	movs	r3, #0
  404552:	9303      	str	r3, [sp, #12]
  404554:	9302      	str	r3, [sp, #8]
  404556:	9301      	str	r3, [sp, #4]
  404558:	9300      	str	r3, [sp, #0]
  40455a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40455e:	4922      	ldr	r1, [pc, #136]	; (4045e8 <main+0x11c>)
  404560:	4822      	ldr	r0, [pc, #136]	; (4045ec <main+0x120>)
  404562:	4c1e      	ldr	r4, [pc, #120]	; (4045dc <main+0x110>)
  404564:	47a0      	blx	r4
  404566:	2801      	cmp	r0, #1
  404568:	d002      	beq.n	404570 <main+0xa4>
		printf("Failed to create test led task\r\n");
  40456a:	481d      	ldr	r0, [pc, #116]	; (4045e0 <main+0x114>)
  40456c:	4b1d      	ldr	r3, [pc, #116]	; (4045e4 <main+0x118>)
  40456e:	4798      	blx	r3
	}
	
	/* Create task to handler LCD */
    if (xTaskCreate(task_adc, "adc", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_STACK_PRIORITY, NULL) != pdPASS) {
  404570:	2300      	movs	r3, #0
  404572:	9303      	str	r3, [sp, #12]
  404574:	9302      	str	r3, [sp, #8]
  404576:	9301      	str	r3, [sp, #4]
  404578:	9300      	str	r3, [sp, #0]
  40457a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40457e:	491c      	ldr	r1, [pc, #112]	; (4045f0 <main+0x124>)
  404580:	481c      	ldr	r0, [pc, #112]	; (4045f4 <main+0x128>)
  404582:	4c16      	ldr	r4, [pc, #88]	; (4045dc <main+0x110>)
  404584:	47a0      	blx	r4
  404586:	2801      	cmp	r0, #1
  404588:	d002      	beq.n	404590 <main+0xc4>
      printf("Failed to create test adc task\r\n");
  40458a:	481b      	ldr	r0, [pc, #108]	; (4045f8 <main+0x12c>)
  40458c:	4b15      	ldr	r3, [pc, #84]	; (4045e4 <main+0x118>)
  40458e:	4798      	blx	r3
    }
	
	/* Start the scheduler. */
	vTaskStartScheduler();
  404590:	4b1a      	ldr	r3, [pc, #104]	; (4045fc <main+0x130>)
  404592:	4798      	blx	r3
  404594:	e7fe      	b.n	404594 <main+0xc8>
  404596:	bf00      	nop
  404598:	00400aa9 	.word	0x00400aa9
  40459c:	00400d39 	.word	0x00400d39
  4045a0:	40028000 	.word	0x40028000
  4045a4:	2040c824 	.word	0x2040c824
  4045a8:	0040419d 	.word	0x0040419d
  4045ac:	2040c820 	.word	0x2040c820
  4045b0:	004040c1 	.word	0x004040c1
  4045b4:	2040c81c 	.word	0x2040c81c
  4045b8:	00401a41 	.word	0x00401a41
  4045bc:	08f0d180 	.word	0x08f0d180
  4045c0:	00401eb5 	.word	0x00401eb5
  4045c4:	00401f09 	.word	0x00401f09
  4045c8:	00401f0f 	.word	0x00401f0f
  4045cc:	20400014 	.word	0x20400014
  4045d0:	00404df5 	.word	0x00404df5
  4045d4:	00407610 	.word	0x00407610
  4045d8:	0040447d 	.word	0x0040447d
  4045dc:	00402fb9 	.word	0x00402fb9
  4045e0:	00407614 	.word	0x00407614
  4045e4:	00404651 	.word	0x00404651
  4045e8:	00407638 	.word	0x00407638
  4045ec:	004042c9 	.word	0x004042c9
  4045f0:	0040763c 	.word	0x0040763c
  4045f4:	00403fb5 	.word	0x00403fb5
  4045f8:	00407640 	.word	0x00407640
  4045fc:	004031ed 	.word	0x004031ed

00404600 <__libc_init_array>:
  404600:	b570      	push	{r4, r5, r6, lr}
  404602:	4e0f      	ldr	r6, [pc, #60]	; (404640 <__libc_init_array+0x40>)
  404604:	4d0f      	ldr	r5, [pc, #60]	; (404644 <__libc_init_array+0x44>)
  404606:	1b76      	subs	r6, r6, r5
  404608:	10b6      	asrs	r6, r6, #2
  40460a:	bf18      	it	ne
  40460c:	2400      	movne	r4, #0
  40460e:	d005      	beq.n	40461c <__libc_init_array+0x1c>
  404610:	3401      	adds	r4, #1
  404612:	f855 3b04 	ldr.w	r3, [r5], #4
  404616:	4798      	blx	r3
  404618:	42a6      	cmp	r6, r4
  40461a:	d1f9      	bne.n	404610 <__libc_init_array+0x10>
  40461c:	4e0a      	ldr	r6, [pc, #40]	; (404648 <__libc_init_array+0x48>)
  40461e:	4d0b      	ldr	r5, [pc, #44]	; (40464c <__libc_init_array+0x4c>)
  404620:	1b76      	subs	r6, r6, r5
  404622:	f003 f8fb 	bl	40781c <_init>
  404626:	10b6      	asrs	r6, r6, #2
  404628:	bf18      	it	ne
  40462a:	2400      	movne	r4, #0
  40462c:	d006      	beq.n	40463c <__libc_init_array+0x3c>
  40462e:	3401      	adds	r4, #1
  404630:	f855 3b04 	ldr.w	r3, [r5], #4
  404634:	4798      	blx	r3
  404636:	42a6      	cmp	r6, r4
  404638:	d1f9      	bne.n	40462e <__libc_init_array+0x2e>
  40463a:	bd70      	pop	{r4, r5, r6, pc}
  40463c:	bd70      	pop	{r4, r5, r6, pc}
  40463e:	bf00      	nop
  404640:	00407828 	.word	0x00407828
  404644:	00407828 	.word	0x00407828
  404648:	00407830 	.word	0x00407830
  40464c:	00407828 	.word	0x00407828

00404650 <iprintf>:
  404650:	b40f      	push	{r0, r1, r2, r3}
  404652:	b500      	push	{lr}
  404654:	4907      	ldr	r1, [pc, #28]	; (404674 <iprintf+0x24>)
  404656:	b083      	sub	sp, #12
  404658:	ab04      	add	r3, sp, #16
  40465a:	6808      	ldr	r0, [r1, #0]
  40465c:	f853 2b04 	ldr.w	r2, [r3], #4
  404660:	6881      	ldr	r1, [r0, #8]
  404662:	9301      	str	r3, [sp, #4]
  404664:	f000 fd5a 	bl	40511c <_vfiprintf_r>
  404668:	b003      	add	sp, #12
  40466a:	f85d eb04 	ldr.w	lr, [sp], #4
  40466e:	b004      	add	sp, #16
  404670:	4770      	bx	lr
  404672:	bf00      	nop
  404674:	20400014 	.word	0x20400014

00404678 <malloc>:
  404678:	4b02      	ldr	r3, [pc, #8]	; (404684 <malloc+0xc>)
  40467a:	4601      	mov	r1, r0
  40467c:	6818      	ldr	r0, [r3, #0]
  40467e:	f000 b803 	b.w	404688 <_malloc_r>
  404682:	bf00      	nop
  404684:	20400014 	.word	0x20400014

00404688 <_malloc_r>:
  404688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40468c:	f101 060b 	add.w	r6, r1, #11
  404690:	2e16      	cmp	r6, #22
  404692:	b083      	sub	sp, #12
  404694:	4605      	mov	r5, r0
  404696:	f240 809e 	bls.w	4047d6 <_malloc_r+0x14e>
  40469a:	f036 0607 	bics.w	r6, r6, #7
  40469e:	f100 80bd 	bmi.w	40481c <_malloc_r+0x194>
  4046a2:	42b1      	cmp	r1, r6
  4046a4:	f200 80ba 	bhi.w	40481c <_malloc_r+0x194>
  4046a8:	f000 fb86 	bl	404db8 <__malloc_lock>
  4046ac:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4046b0:	f0c0 8293 	bcc.w	404bda <_malloc_r+0x552>
  4046b4:	0a73      	lsrs	r3, r6, #9
  4046b6:	f000 80b8 	beq.w	40482a <_malloc_r+0x1a2>
  4046ba:	2b04      	cmp	r3, #4
  4046bc:	f200 8179 	bhi.w	4049b2 <_malloc_r+0x32a>
  4046c0:	09b3      	lsrs	r3, r6, #6
  4046c2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4046c6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4046ca:	00c3      	lsls	r3, r0, #3
  4046cc:	4fbf      	ldr	r7, [pc, #764]	; (4049cc <_malloc_r+0x344>)
  4046ce:	443b      	add	r3, r7
  4046d0:	f1a3 0108 	sub.w	r1, r3, #8
  4046d4:	685c      	ldr	r4, [r3, #4]
  4046d6:	42a1      	cmp	r1, r4
  4046d8:	d106      	bne.n	4046e8 <_malloc_r+0x60>
  4046da:	e00c      	b.n	4046f6 <_malloc_r+0x6e>
  4046dc:	2a00      	cmp	r2, #0
  4046de:	f280 80aa 	bge.w	404836 <_malloc_r+0x1ae>
  4046e2:	68e4      	ldr	r4, [r4, #12]
  4046e4:	42a1      	cmp	r1, r4
  4046e6:	d006      	beq.n	4046f6 <_malloc_r+0x6e>
  4046e8:	6863      	ldr	r3, [r4, #4]
  4046ea:	f023 0303 	bic.w	r3, r3, #3
  4046ee:	1b9a      	subs	r2, r3, r6
  4046f0:	2a0f      	cmp	r2, #15
  4046f2:	ddf3      	ble.n	4046dc <_malloc_r+0x54>
  4046f4:	4670      	mov	r0, lr
  4046f6:	693c      	ldr	r4, [r7, #16]
  4046f8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4049e0 <_malloc_r+0x358>
  4046fc:	4574      	cmp	r4, lr
  4046fe:	f000 81ab 	beq.w	404a58 <_malloc_r+0x3d0>
  404702:	6863      	ldr	r3, [r4, #4]
  404704:	f023 0303 	bic.w	r3, r3, #3
  404708:	1b9a      	subs	r2, r3, r6
  40470a:	2a0f      	cmp	r2, #15
  40470c:	f300 8190 	bgt.w	404a30 <_malloc_r+0x3a8>
  404710:	2a00      	cmp	r2, #0
  404712:	f8c7 e014 	str.w	lr, [r7, #20]
  404716:	f8c7 e010 	str.w	lr, [r7, #16]
  40471a:	f280 809d 	bge.w	404858 <_malloc_r+0x1d0>
  40471e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404722:	f080 8161 	bcs.w	4049e8 <_malloc_r+0x360>
  404726:	08db      	lsrs	r3, r3, #3
  404728:	f103 0c01 	add.w	ip, r3, #1
  40472c:	1099      	asrs	r1, r3, #2
  40472e:	687a      	ldr	r2, [r7, #4]
  404730:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404734:	f8c4 8008 	str.w	r8, [r4, #8]
  404738:	2301      	movs	r3, #1
  40473a:	408b      	lsls	r3, r1
  40473c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404740:	4313      	orrs	r3, r2
  404742:	3908      	subs	r1, #8
  404744:	60e1      	str	r1, [r4, #12]
  404746:	607b      	str	r3, [r7, #4]
  404748:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40474c:	f8c8 400c 	str.w	r4, [r8, #12]
  404750:	1082      	asrs	r2, r0, #2
  404752:	2401      	movs	r4, #1
  404754:	4094      	lsls	r4, r2
  404756:	429c      	cmp	r4, r3
  404758:	f200 808b 	bhi.w	404872 <_malloc_r+0x1ea>
  40475c:	421c      	tst	r4, r3
  40475e:	d106      	bne.n	40476e <_malloc_r+0xe6>
  404760:	f020 0003 	bic.w	r0, r0, #3
  404764:	0064      	lsls	r4, r4, #1
  404766:	421c      	tst	r4, r3
  404768:	f100 0004 	add.w	r0, r0, #4
  40476c:	d0fa      	beq.n	404764 <_malloc_r+0xdc>
  40476e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  404772:	46cc      	mov	ip, r9
  404774:	4680      	mov	r8, r0
  404776:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40477a:	459c      	cmp	ip, r3
  40477c:	d107      	bne.n	40478e <_malloc_r+0x106>
  40477e:	e16d      	b.n	404a5c <_malloc_r+0x3d4>
  404780:	2a00      	cmp	r2, #0
  404782:	f280 817b 	bge.w	404a7c <_malloc_r+0x3f4>
  404786:	68db      	ldr	r3, [r3, #12]
  404788:	459c      	cmp	ip, r3
  40478a:	f000 8167 	beq.w	404a5c <_malloc_r+0x3d4>
  40478e:	6859      	ldr	r1, [r3, #4]
  404790:	f021 0103 	bic.w	r1, r1, #3
  404794:	1b8a      	subs	r2, r1, r6
  404796:	2a0f      	cmp	r2, #15
  404798:	ddf2      	ble.n	404780 <_malloc_r+0xf8>
  40479a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40479e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4047a2:	9300      	str	r3, [sp, #0]
  4047a4:	199c      	adds	r4, r3, r6
  4047a6:	4628      	mov	r0, r5
  4047a8:	f046 0601 	orr.w	r6, r6, #1
  4047ac:	f042 0501 	orr.w	r5, r2, #1
  4047b0:	605e      	str	r6, [r3, #4]
  4047b2:	f8c8 c00c 	str.w	ip, [r8, #12]
  4047b6:	f8cc 8008 	str.w	r8, [ip, #8]
  4047ba:	617c      	str	r4, [r7, #20]
  4047bc:	613c      	str	r4, [r7, #16]
  4047be:	f8c4 e00c 	str.w	lr, [r4, #12]
  4047c2:	f8c4 e008 	str.w	lr, [r4, #8]
  4047c6:	6065      	str	r5, [r4, #4]
  4047c8:	505a      	str	r2, [r3, r1]
  4047ca:	f000 fafb 	bl	404dc4 <__malloc_unlock>
  4047ce:	9b00      	ldr	r3, [sp, #0]
  4047d0:	f103 0408 	add.w	r4, r3, #8
  4047d4:	e01e      	b.n	404814 <_malloc_r+0x18c>
  4047d6:	2910      	cmp	r1, #16
  4047d8:	d820      	bhi.n	40481c <_malloc_r+0x194>
  4047da:	f000 faed 	bl	404db8 <__malloc_lock>
  4047de:	2610      	movs	r6, #16
  4047e0:	2318      	movs	r3, #24
  4047e2:	2002      	movs	r0, #2
  4047e4:	4f79      	ldr	r7, [pc, #484]	; (4049cc <_malloc_r+0x344>)
  4047e6:	443b      	add	r3, r7
  4047e8:	f1a3 0208 	sub.w	r2, r3, #8
  4047ec:	685c      	ldr	r4, [r3, #4]
  4047ee:	4294      	cmp	r4, r2
  4047f0:	f000 813d 	beq.w	404a6e <_malloc_r+0x3e6>
  4047f4:	6863      	ldr	r3, [r4, #4]
  4047f6:	68e1      	ldr	r1, [r4, #12]
  4047f8:	68a6      	ldr	r6, [r4, #8]
  4047fa:	f023 0303 	bic.w	r3, r3, #3
  4047fe:	4423      	add	r3, r4
  404800:	4628      	mov	r0, r5
  404802:	685a      	ldr	r2, [r3, #4]
  404804:	60f1      	str	r1, [r6, #12]
  404806:	f042 0201 	orr.w	r2, r2, #1
  40480a:	608e      	str	r6, [r1, #8]
  40480c:	605a      	str	r2, [r3, #4]
  40480e:	f000 fad9 	bl	404dc4 <__malloc_unlock>
  404812:	3408      	adds	r4, #8
  404814:	4620      	mov	r0, r4
  404816:	b003      	add	sp, #12
  404818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40481c:	2400      	movs	r4, #0
  40481e:	230c      	movs	r3, #12
  404820:	4620      	mov	r0, r4
  404822:	602b      	str	r3, [r5, #0]
  404824:	b003      	add	sp, #12
  404826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40482a:	2040      	movs	r0, #64	; 0x40
  40482c:	f44f 7300 	mov.w	r3, #512	; 0x200
  404830:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404834:	e74a      	b.n	4046cc <_malloc_r+0x44>
  404836:	4423      	add	r3, r4
  404838:	68e1      	ldr	r1, [r4, #12]
  40483a:	685a      	ldr	r2, [r3, #4]
  40483c:	68a6      	ldr	r6, [r4, #8]
  40483e:	f042 0201 	orr.w	r2, r2, #1
  404842:	60f1      	str	r1, [r6, #12]
  404844:	4628      	mov	r0, r5
  404846:	608e      	str	r6, [r1, #8]
  404848:	605a      	str	r2, [r3, #4]
  40484a:	f000 fabb 	bl	404dc4 <__malloc_unlock>
  40484e:	3408      	adds	r4, #8
  404850:	4620      	mov	r0, r4
  404852:	b003      	add	sp, #12
  404854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404858:	4423      	add	r3, r4
  40485a:	4628      	mov	r0, r5
  40485c:	685a      	ldr	r2, [r3, #4]
  40485e:	f042 0201 	orr.w	r2, r2, #1
  404862:	605a      	str	r2, [r3, #4]
  404864:	f000 faae 	bl	404dc4 <__malloc_unlock>
  404868:	3408      	adds	r4, #8
  40486a:	4620      	mov	r0, r4
  40486c:	b003      	add	sp, #12
  40486e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404872:	68bc      	ldr	r4, [r7, #8]
  404874:	6863      	ldr	r3, [r4, #4]
  404876:	f023 0803 	bic.w	r8, r3, #3
  40487a:	45b0      	cmp	r8, r6
  40487c:	d304      	bcc.n	404888 <_malloc_r+0x200>
  40487e:	eba8 0306 	sub.w	r3, r8, r6
  404882:	2b0f      	cmp	r3, #15
  404884:	f300 8085 	bgt.w	404992 <_malloc_r+0x30a>
  404888:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4049e4 <_malloc_r+0x35c>
  40488c:	4b50      	ldr	r3, [pc, #320]	; (4049d0 <_malloc_r+0x348>)
  40488e:	f8d9 2000 	ldr.w	r2, [r9]
  404892:	681b      	ldr	r3, [r3, #0]
  404894:	3201      	adds	r2, #1
  404896:	4433      	add	r3, r6
  404898:	eb04 0a08 	add.w	sl, r4, r8
  40489c:	f000 8155 	beq.w	404b4a <_malloc_r+0x4c2>
  4048a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4048a4:	330f      	adds	r3, #15
  4048a6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4048aa:	f02b 0b0f 	bic.w	fp, fp, #15
  4048ae:	4659      	mov	r1, fp
  4048b0:	4628      	mov	r0, r5
  4048b2:	f000 fa8d 	bl	404dd0 <_sbrk_r>
  4048b6:	1c41      	adds	r1, r0, #1
  4048b8:	4602      	mov	r2, r0
  4048ba:	f000 80fc 	beq.w	404ab6 <_malloc_r+0x42e>
  4048be:	4582      	cmp	sl, r0
  4048c0:	f200 80f7 	bhi.w	404ab2 <_malloc_r+0x42a>
  4048c4:	4b43      	ldr	r3, [pc, #268]	; (4049d4 <_malloc_r+0x34c>)
  4048c6:	6819      	ldr	r1, [r3, #0]
  4048c8:	4459      	add	r1, fp
  4048ca:	6019      	str	r1, [r3, #0]
  4048cc:	f000 814d 	beq.w	404b6a <_malloc_r+0x4e2>
  4048d0:	f8d9 0000 	ldr.w	r0, [r9]
  4048d4:	3001      	adds	r0, #1
  4048d6:	bf1b      	ittet	ne
  4048d8:	eba2 0a0a 	subne.w	sl, r2, sl
  4048dc:	4451      	addne	r1, sl
  4048de:	f8c9 2000 	streq.w	r2, [r9]
  4048e2:	6019      	strne	r1, [r3, #0]
  4048e4:	f012 0107 	ands.w	r1, r2, #7
  4048e8:	f000 8115 	beq.w	404b16 <_malloc_r+0x48e>
  4048ec:	f1c1 0008 	rsb	r0, r1, #8
  4048f0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4048f4:	4402      	add	r2, r0
  4048f6:	3108      	adds	r1, #8
  4048f8:	eb02 090b 	add.w	r9, r2, fp
  4048fc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404900:	eba1 0909 	sub.w	r9, r1, r9
  404904:	4649      	mov	r1, r9
  404906:	4628      	mov	r0, r5
  404908:	9301      	str	r3, [sp, #4]
  40490a:	9200      	str	r2, [sp, #0]
  40490c:	f000 fa60 	bl	404dd0 <_sbrk_r>
  404910:	1c43      	adds	r3, r0, #1
  404912:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404916:	f000 8143 	beq.w	404ba0 <_malloc_r+0x518>
  40491a:	1a80      	subs	r0, r0, r2
  40491c:	4448      	add	r0, r9
  40491e:	f040 0001 	orr.w	r0, r0, #1
  404922:	6819      	ldr	r1, [r3, #0]
  404924:	60ba      	str	r2, [r7, #8]
  404926:	4449      	add	r1, r9
  404928:	42bc      	cmp	r4, r7
  40492a:	6050      	str	r0, [r2, #4]
  40492c:	6019      	str	r1, [r3, #0]
  40492e:	d017      	beq.n	404960 <_malloc_r+0x2d8>
  404930:	f1b8 0f0f 	cmp.w	r8, #15
  404934:	f240 80fb 	bls.w	404b2e <_malloc_r+0x4a6>
  404938:	6860      	ldr	r0, [r4, #4]
  40493a:	f1a8 020c 	sub.w	r2, r8, #12
  40493e:	f022 0207 	bic.w	r2, r2, #7
  404942:	eb04 0e02 	add.w	lr, r4, r2
  404946:	f000 0001 	and.w	r0, r0, #1
  40494a:	f04f 0c05 	mov.w	ip, #5
  40494e:	4310      	orrs	r0, r2
  404950:	2a0f      	cmp	r2, #15
  404952:	6060      	str	r0, [r4, #4]
  404954:	f8ce c004 	str.w	ip, [lr, #4]
  404958:	f8ce c008 	str.w	ip, [lr, #8]
  40495c:	f200 8117 	bhi.w	404b8e <_malloc_r+0x506>
  404960:	4b1d      	ldr	r3, [pc, #116]	; (4049d8 <_malloc_r+0x350>)
  404962:	68bc      	ldr	r4, [r7, #8]
  404964:	681a      	ldr	r2, [r3, #0]
  404966:	4291      	cmp	r1, r2
  404968:	bf88      	it	hi
  40496a:	6019      	strhi	r1, [r3, #0]
  40496c:	4b1b      	ldr	r3, [pc, #108]	; (4049dc <_malloc_r+0x354>)
  40496e:	681a      	ldr	r2, [r3, #0]
  404970:	4291      	cmp	r1, r2
  404972:	6862      	ldr	r2, [r4, #4]
  404974:	bf88      	it	hi
  404976:	6019      	strhi	r1, [r3, #0]
  404978:	f022 0203 	bic.w	r2, r2, #3
  40497c:	4296      	cmp	r6, r2
  40497e:	eba2 0306 	sub.w	r3, r2, r6
  404982:	d801      	bhi.n	404988 <_malloc_r+0x300>
  404984:	2b0f      	cmp	r3, #15
  404986:	dc04      	bgt.n	404992 <_malloc_r+0x30a>
  404988:	4628      	mov	r0, r5
  40498a:	f000 fa1b 	bl	404dc4 <__malloc_unlock>
  40498e:	2400      	movs	r4, #0
  404990:	e740      	b.n	404814 <_malloc_r+0x18c>
  404992:	19a2      	adds	r2, r4, r6
  404994:	f043 0301 	orr.w	r3, r3, #1
  404998:	f046 0601 	orr.w	r6, r6, #1
  40499c:	6066      	str	r6, [r4, #4]
  40499e:	4628      	mov	r0, r5
  4049a0:	60ba      	str	r2, [r7, #8]
  4049a2:	6053      	str	r3, [r2, #4]
  4049a4:	f000 fa0e 	bl	404dc4 <__malloc_unlock>
  4049a8:	3408      	adds	r4, #8
  4049aa:	4620      	mov	r0, r4
  4049ac:	b003      	add	sp, #12
  4049ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049b2:	2b14      	cmp	r3, #20
  4049b4:	d971      	bls.n	404a9a <_malloc_r+0x412>
  4049b6:	2b54      	cmp	r3, #84	; 0x54
  4049b8:	f200 80a3 	bhi.w	404b02 <_malloc_r+0x47a>
  4049bc:	0b33      	lsrs	r3, r6, #12
  4049be:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4049c2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4049c6:	00c3      	lsls	r3, r0, #3
  4049c8:	e680      	b.n	4046cc <_malloc_r+0x44>
  4049ca:	bf00      	nop
  4049cc:	20400440 	.word	0x20400440
  4049d0:	2040c790 	.word	0x2040c790
  4049d4:	2040c760 	.word	0x2040c760
  4049d8:	2040c788 	.word	0x2040c788
  4049dc:	2040c78c 	.word	0x2040c78c
  4049e0:	20400448 	.word	0x20400448
  4049e4:	20400848 	.word	0x20400848
  4049e8:	0a5a      	lsrs	r2, r3, #9
  4049ea:	2a04      	cmp	r2, #4
  4049ec:	d95b      	bls.n	404aa6 <_malloc_r+0x41e>
  4049ee:	2a14      	cmp	r2, #20
  4049f0:	f200 80ae 	bhi.w	404b50 <_malloc_r+0x4c8>
  4049f4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4049f8:	00c9      	lsls	r1, r1, #3
  4049fa:	325b      	adds	r2, #91	; 0x5b
  4049fc:	eb07 0c01 	add.w	ip, r7, r1
  404a00:	5879      	ldr	r1, [r7, r1]
  404a02:	f1ac 0c08 	sub.w	ip, ip, #8
  404a06:	458c      	cmp	ip, r1
  404a08:	f000 8088 	beq.w	404b1c <_malloc_r+0x494>
  404a0c:	684a      	ldr	r2, [r1, #4]
  404a0e:	f022 0203 	bic.w	r2, r2, #3
  404a12:	4293      	cmp	r3, r2
  404a14:	d273      	bcs.n	404afe <_malloc_r+0x476>
  404a16:	6889      	ldr	r1, [r1, #8]
  404a18:	458c      	cmp	ip, r1
  404a1a:	d1f7      	bne.n	404a0c <_malloc_r+0x384>
  404a1c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404a20:	687b      	ldr	r3, [r7, #4]
  404a22:	60e2      	str	r2, [r4, #12]
  404a24:	f8c4 c008 	str.w	ip, [r4, #8]
  404a28:	6094      	str	r4, [r2, #8]
  404a2a:	f8cc 400c 	str.w	r4, [ip, #12]
  404a2e:	e68f      	b.n	404750 <_malloc_r+0xc8>
  404a30:	19a1      	adds	r1, r4, r6
  404a32:	f046 0c01 	orr.w	ip, r6, #1
  404a36:	f042 0601 	orr.w	r6, r2, #1
  404a3a:	f8c4 c004 	str.w	ip, [r4, #4]
  404a3e:	4628      	mov	r0, r5
  404a40:	6179      	str	r1, [r7, #20]
  404a42:	6139      	str	r1, [r7, #16]
  404a44:	f8c1 e00c 	str.w	lr, [r1, #12]
  404a48:	f8c1 e008 	str.w	lr, [r1, #8]
  404a4c:	604e      	str	r6, [r1, #4]
  404a4e:	50e2      	str	r2, [r4, r3]
  404a50:	f000 f9b8 	bl	404dc4 <__malloc_unlock>
  404a54:	3408      	adds	r4, #8
  404a56:	e6dd      	b.n	404814 <_malloc_r+0x18c>
  404a58:	687b      	ldr	r3, [r7, #4]
  404a5a:	e679      	b.n	404750 <_malloc_r+0xc8>
  404a5c:	f108 0801 	add.w	r8, r8, #1
  404a60:	f018 0f03 	tst.w	r8, #3
  404a64:	f10c 0c08 	add.w	ip, ip, #8
  404a68:	f47f ae85 	bne.w	404776 <_malloc_r+0xee>
  404a6c:	e02d      	b.n	404aca <_malloc_r+0x442>
  404a6e:	68dc      	ldr	r4, [r3, #12]
  404a70:	42a3      	cmp	r3, r4
  404a72:	bf08      	it	eq
  404a74:	3002      	addeq	r0, #2
  404a76:	f43f ae3e 	beq.w	4046f6 <_malloc_r+0x6e>
  404a7a:	e6bb      	b.n	4047f4 <_malloc_r+0x16c>
  404a7c:	4419      	add	r1, r3
  404a7e:	461c      	mov	r4, r3
  404a80:	684a      	ldr	r2, [r1, #4]
  404a82:	68db      	ldr	r3, [r3, #12]
  404a84:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404a88:	f042 0201 	orr.w	r2, r2, #1
  404a8c:	604a      	str	r2, [r1, #4]
  404a8e:	4628      	mov	r0, r5
  404a90:	60f3      	str	r3, [r6, #12]
  404a92:	609e      	str	r6, [r3, #8]
  404a94:	f000 f996 	bl	404dc4 <__malloc_unlock>
  404a98:	e6bc      	b.n	404814 <_malloc_r+0x18c>
  404a9a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404a9e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404aa2:	00c3      	lsls	r3, r0, #3
  404aa4:	e612      	b.n	4046cc <_malloc_r+0x44>
  404aa6:	099a      	lsrs	r2, r3, #6
  404aa8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404aac:	00c9      	lsls	r1, r1, #3
  404aae:	3238      	adds	r2, #56	; 0x38
  404ab0:	e7a4      	b.n	4049fc <_malloc_r+0x374>
  404ab2:	42bc      	cmp	r4, r7
  404ab4:	d054      	beq.n	404b60 <_malloc_r+0x4d8>
  404ab6:	68bc      	ldr	r4, [r7, #8]
  404ab8:	6862      	ldr	r2, [r4, #4]
  404aba:	f022 0203 	bic.w	r2, r2, #3
  404abe:	e75d      	b.n	40497c <_malloc_r+0x2f4>
  404ac0:	f859 3908 	ldr.w	r3, [r9], #-8
  404ac4:	4599      	cmp	r9, r3
  404ac6:	f040 8086 	bne.w	404bd6 <_malloc_r+0x54e>
  404aca:	f010 0f03 	tst.w	r0, #3
  404ace:	f100 30ff 	add.w	r0, r0, #4294967295
  404ad2:	d1f5      	bne.n	404ac0 <_malloc_r+0x438>
  404ad4:	687b      	ldr	r3, [r7, #4]
  404ad6:	ea23 0304 	bic.w	r3, r3, r4
  404ada:	607b      	str	r3, [r7, #4]
  404adc:	0064      	lsls	r4, r4, #1
  404ade:	429c      	cmp	r4, r3
  404ae0:	f63f aec7 	bhi.w	404872 <_malloc_r+0x1ea>
  404ae4:	2c00      	cmp	r4, #0
  404ae6:	f43f aec4 	beq.w	404872 <_malloc_r+0x1ea>
  404aea:	421c      	tst	r4, r3
  404aec:	4640      	mov	r0, r8
  404aee:	f47f ae3e 	bne.w	40476e <_malloc_r+0xe6>
  404af2:	0064      	lsls	r4, r4, #1
  404af4:	421c      	tst	r4, r3
  404af6:	f100 0004 	add.w	r0, r0, #4
  404afa:	d0fa      	beq.n	404af2 <_malloc_r+0x46a>
  404afc:	e637      	b.n	40476e <_malloc_r+0xe6>
  404afe:	468c      	mov	ip, r1
  404b00:	e78c      	b.n	404a1c <_malloc_r+0x394>
  404b02:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404b06:	d815      	bhi.n	404b34 <_malloc_r+0x4ac>
  404b08:	0bf3      	lsrs	r3, r6, #15
  404b0a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404b0e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404b12:	00c3      	lsls	r3, r0, #3
  404b14:	e5da      	b.n	4046cc <_malloc_r+0x44>
  404b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404b1a:	e6ed      	b.n	4048f8 <_malloc_r+0x270>
  404b1c:	687b      	ldr	r3, [r7, #4]
  404b1e:	1092      	asrs	r2, r2, #2
  404b20:	2101      	movs	r1, #1
  404b22:	fa01 f202 	lsl.w	r2, r1, r2
  404b26:	4313      	orrs	r3, r2
  404b28:	607b      	str	r3, [r7, #4]
  404b2a:	4662      	mov	r2, ip
  404b2c:	e779      	b.n	404a22 <_malloc_r+0x39a>
  404b2e:	2301      	movs	r3, #1
  404b30:	6053      	str	r3, [r2, #4]
  404b32:	e729      	b.n	404988 <_malloc_r+0x300>
  404b34:	f240 5254 	movw	r2, #1364	; 0x554
  404b38:	4293      	cmp	r3, r2
  404b3a:	d822      	bhi.n	404b82 <_malloc_r+0x4fa>
  404b3c:	0cb3      	lsrs	r3, r6, #18
  404b3e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404b42:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404b46:	00c3      	lsls	r3, r0, #3
  404b48:	e5c0      	b.n	4046cc <_malloc_r+0x44>
  404b4a:	f103 0b10 	add.w	fp, r3, #16
  404b4e:	e6ae      	b.n	4048ae <_malloc_r+0x226>
  404b50:	2a54      	cmp	r2, #84	; 0x54
  404b52:	d829      	bhi.n	404ba8 <_malloc_r+0x520>
  404b54:	0b1a      	lsrs	r2, r3, #12
  404b56:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404b5a:	00c9      	lsls	r1, r1, #3
  404b5c:	326e      	adds	r2, #110	; 0x6e
  404b5e:	e74d      	b.n	4049fc <_malloc_r+0x374>
  404b60:	4b20      	ldr	r3, [pc, #128]	; (404be4 <_malloc_r+0x55c>)
  404b62:	6819      	ldr	r1, [r3, #0]
  404b64:	4459      	add	r1, fp
  404b66:	6019      	str	r1, [r3, #0]
  404b68:	e6b2      	b.n	4048d0 <_malloc_r+0x248>
  404b6a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404b6e:	2800      	cmp	r0, #0
  404b70:	f47f aeae 	bne.w	4048d0 <_malloc_r+0x248>
  404b74:	eb08 030b 	add.w	r3, r8, fp
  404b78:	68ba      	ldr	r2, [r7, #8]
  404b7a:	f043 0301 	orr.w	r3, r3, #1
  404b7e:	6053      	str	r3, [r2, #4]
  404b80:	e6ee      	b.n	404960 <_malloc_r+0x2d8>
  404b82:	207f      	movs	r0, #127	; 0x7f
  404b84:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404b88:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404b8c:	e59e      	b.n	4046cc <_malloc_r+0x44>
  404b8e:	f104 0108 	add.w	r1, r4, #8
  404b92:	4628      	mov	r0, r5
  404b94:	9300      	str	r3, [sp, #0]
  404b96:	f001 fbdd 	bl	406354 <_free_r>
  404b9a:	9b00      	ldr	r3, [sp, #0]
  404b9c:	6819      	ldr	r1, [r3, #0]
  404b9e:	e6df      	b.n	404960 <_malloc_r+0x2d8>
  404ba0:	2001      	movs	r0, #1
  404ba2:	f04f 0900 	mov.w	r9, #0
  404ba6:	e6bc      	b.n	404922 <_malloc_r+0x29a>
  404ba8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404bac:	d805      	bhi.n	404bba <_malloc_r+0x532>
  404bae:	0bda      	lsrs	r2, r3, #15
  404bb0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404bb4:	00c9      	lsls	r1, r1, #3
  404bb6:	3277      	adds	r2, #119	; 0x77
  404bb8:	e720      	b.n	4049fc <_malloc_r+0x374>
  404bba:	f240 5154 	movw	r1, #1364	; 0x554
  404bbe:	428a      	cmp	r2, r1
  404bc0:	d805      	bhi.n	404bce <_malloc_r+0x546>
  404bc2:	0c9a      	lsrs	r2, r3, #18
  404bc4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404bc8:	00c9      	lsls	r1, r1, #3
  404bca:	327c      	adds	r2, #124	; 0x7c
  404bcc:	e716      	b.n	4049fc <_malloc_r+0x374>
  404bce:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404bd2:	227e      	movs	r2, #126	; 0x7e
  404bd4:	e712      	b.n	4049fc <_malloc_r+0x374>
  404bd6:	687b      	ldr	r3, [r7, #4]
  404bd8:	e780      	b.n	404adc <_malloc_r+0x454>
  404bda:	08f0      	lsrs	r0, r6, #3
  404bdc:	f106 0308 	add.w	r3, r6, #8
  404be0:	e600      	b.n	4047e4 <_malloc_r+0x15c>
  404be2:	bf00      	nop
  404be4:	2040c760 	.word	0x2040c760

00404be8 <memcpy>:
  404be8:	4684      	mov	ip, r0
  404bea:	ea41 0300 	orr.w	r3, r1, r0
  404bee:	f013 0303 	ands.w	r3, r3, #3
  404bf2:	d16d      	bne.n	404cd0 <memcpy+0xe8>
  404bf4:	3a40      	subs	r2, #64	; 0x40
  404bf6:	d341      	bcc.n	404c7c <memcpy+0x94>
  404bf8:	f851 3b04 	ldr.w	r3, [r1], #4
  404bfc:	f840 3b04 	str.w	r3, [r0], #4
  404c00:	f851 3b04 	ldr.w	r3, [r1], #4
  404c04:	f840 3b04 	str.w	r3, [r0], #4
  404c08:	f851 3b04 	ldr.w	r3, [r1], #4
  404c0c:	f840 3b04 	str.w	r3, [r0], #4
  404c10:	f851 3b04 	ldr.w	r3, [r1], #4
  404c14:	f840 3b04 	str.w	r3, [r0], #4
  404c18:	f851 3b04 	ldr.w	r3, [r1], #4
  404c1c:	f840 3b04 	str.w	r3, [r0], #4
  404c20:	f851 3b04 	ldr.w	r3, [r1], #4
  404c24:	f840 3b04 	str.w	r3, [r0], #4
  404c28:	f851 3b04 	ldr.w	r3, [r1], #4
  404c2c:	f840 3b04 	str.w	r3, [r0], #4
  404c30:	f851 3b04 	ldr.w	r3, [r1], #4
  404c34:	f840 3b04 	str.w	r3, [r0], #4
  404c38:	f851 3b04 	ldr.w	r3, [r1], #4
  404c3c:	f840 3b04 	str.w	r3, [r0], #4
  404c40:	f851 3b04 	ldr.w	r3, [r1], #4
  404c44:	f840 3b04 	str.w	r3, [r0], #4
  404c48:	f851 3b04 	ldr.w	r3, [r1], #4
  404c4c:	f840 3b04 	str.w	r3, [r0], #4
  404c50:	f851 3b04 	ldr.w	r3, [r1], #4
  404c54:	f840 3b04 	str.w	r3, [r0], #4
  404c58:	f851 3b04 	ldr.w	r3, [r1], #4
  404c5c:	f840 3b04 	str.w	r3, [r0], #4
  404c60:	f851 3b04 	ldr.w	r3, [r1], #4
  404c64:	f840 3b04 	str.w	r3, [r0], #4
  404c68:	f851 3b04 	ldr.w	r3, [r1], #4
  404c6c:	f840 3b04 	str.w	r3, [r0], #4
  404c70:	f851 3b04 	ldr.w	r3, [r1], #4
  404c74:	f840 3b04 	str.w	r3, [r0], #4
  404c78:	3a40      	subs	r2, #64	; 0x40
  404c7a:	d2bd      	bcs.n	404bf8 <memcpy+0x10>
  404c7c:	3230      	adds	r2, #48	; 0x30
  404c7e:	d311      	bcc.n	404ca4 <memcpy+0xbc>
  404c80:	f851 3b04 	ldr.w	r3, [r1], #4
  404c84:	f840 3b04 	str.w	r3, [r0], #4
  404c88:	f851 3b04 	ldr.w	r3, [r1], #4
  404c8c:	f840 3b04 	str.w	r3, [r0], #4
  404c90:	f851 3b04 	ldr.w	r3, [r1], #4
  404c94:	f840 3b04 	str.w	r3, [r0], #4
  404c98:	f851 3b04 	ldr.w	r3, [r1], #4
  404c9c:	f840 3b04 	str.w	r3, [r0], #4
  404ca0:	3a10      	subs	r2, #16
  404ca2:	d2ed      	bcs.n	404c80 <memcpy+0x98>
  404ca4:	320c      	adds	r2, #12
  404ca6:	d305      	bcc.n	404cb4 <memcpy+0xcc>
  404ca8:	f851 3b04 	ldr.w	r3, [r1], #4
  404cac:	f840 3b04 	str.w	r3, [r0], #4
  404cb0:	3a04      	subs	r2, #4
  404cb2:	d2f9      	bcs.n	404ca8 <memcpy+0xc0>
  404cb4:	3204      	adds	r2, #4
  404cb6:	d008      	beq.n	404cca <memcpy+0xe2>
  404cb8:	07d2      	lsls	r2, r2, #31
  404cba:	bf1c      	itt	ne
  404cbc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404cc0:	f800 3b01 	strbne.w	r3, [r0], #1
  404cc4:	d301      	bcc.n	404cca <memcpy+0xe2>
  404cc6:	880b      	ldrh	r3, [r1, #0]
  404cc8:	8003      	strh	r3, [r0, #0]
  404cca:	4660      	mov	r0, ip
  404ccc:	4770      	bx	lr
  404cce:	bf00      	nop
  404cd0:	2a08      	cmp	r2, #8
  404cd2:	d313      	bcc.n	404cfc <memcpy+0x114>
  404cd4:	078b      	lsls	r3, r1, #30
  404cd6:	d08d      	beq.n	404bf4 <memcpy+0xc>
  404cd8:	f010 0303 	ands.w	r3, r0, #3
  404cdc:	d08a      	beq.n	404bf4 <memcpy+0xc>
  404cde:	f1c3 0304 	rsb	r3, r3, #4
  404ce2:	1ad2      	subs	r2, r2, r3
  404ce4:	07db      	lsls	r3, r3, #31
  404ce6:	bf1c      	itt	ne
  404ce8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404cec:	f800 3b01 	strbne.w	r3, [r0], #1
  404cf0:	d380      	bcc.n	404bf4 <memcpy+0xc>
  404cf2:	f831 3b02 	ldrh.w	r3, [r1], #2
  404cf6:	f820 3b02 	strh.w	r3, [r0], #2
  404cfa:	e77b      	b.n	404bf4 <memcpy+0xc>
  404cfc:	3a04      	subs	r2, #4
  404cfe:	d3d9      	bcc.n	404cb4 <memcpy+0xcc>
  404d00:	3a01      	subs	r2, #1
  404d02:	f811 3b01 	ldrb.w	r3, [r1], #1
  404d06:	f800 3b01 	strb.w	r3, [r0], #1
  404d0a:	d2f9      	bcs.n	404d00 <memcpy+0x118>
  404d0c:	780b      	ldrb	r3, [r1, #0]
  404d0e:	7003      	strb	r3, [r0, #0]
  404d10:	784b      	ldrb	r3, [r1, #1]
  404d12:	7043      	strb	r3, [r0, #1]
  404d14:	788b      	ldrb	r3, [r1, #2]
  404d16:	7083      	strb	r3, [r0, #2]
  404d18:	4660      	mov	r0, ip
  404d1a:	4770      	bx	lr

00404d1c <memset>:
  404d1c:	b470      	push	{r4, r5, r6}
  404d1e:	0786      	lsls	r6, r0, #30
  404d20:	d046      	beq.n	404db0 <memset+0x94>
  404d22:	1e54      	subs	r4, r2, #1
  404d24:	2a00      	cmp	r2, #0
  404d26:	d041      	beq.n	404dac <memset+0x90>
  404d28:	b2ca      	uxtb	r2, r1
  404d2a:	4603      	mov	r3, r0
  404d2c:	e002      	b.n	404d34 <memset+0x18>
  404d2e:	f114 34ff 	adds.w	r4, r4, #4294967295
  404d32:	d33b      	bcc.n	404dac <memset+0x90>
  404d34:	f803 2b01 	strb.w	r2, [r3], #1
  404d38:	079d      	lsls	r5, r3, #30
  404d3a:	d1f8      	bne.n	404d2e <memset+0x12>
  404d3c:	2c03      	cmp	r4, #3
  404d3e:	d92e      	bls.n	404d9e <memset+0x82>
  404d40:	b2cd      	uxtb	r5, r1
  404d42:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404d46:	2c0f      	cmp	r4, #15
  404d48:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404d4c:	d919      	bls.n	404d82 <memset+0x66>
  404d4e:	f103 0210 	add.w	r2, r3, #16
  404d52:	4626      	mov	r6, r4
  404d54:	3e10      	subs	r6, #16
  404d56:	2e0f      	cmp	r6, #15
  404d58:	f842 5c10 	str.w	r5, [r2, #-16]
  404d5c:	f842 5c0c 	str.w	r5, [r2, #-12]
  404d60:	f842 5c08 	str.w	r5, [r2, #-8]
  404d64:	f842 5c04 	str.w	r5, [r2, #-4]
  404d68:	f102 0210 	add.w	r2, r2, #16
  404d6c:	d8f2      	bhi.n	404d54 <memset+0x38>
  404d6e:	f1a4 0210 	sub.w	r2, r4, #16
  404d72:	f022 020f 	bic.w	r2, r2, #15
  404d76:	f004 040f 	and.w	r4, r4, #15
  404d7a:	3210      	adds	r2, #16
  404d7c:	2c03      	cmp	r4, #3
  404d7e:	4413      	add	r3, r2
  404d80:	d90d      	bls.n	404d9e <memset+0x82>
  404d82:	461e      	mov	r6, r3
  404d84:	4622      	mov	r2, r4
  404d86:	3a04      	subs	r2, #4
  404d88:	2a03      	cmp	r2, #3
  404d8a:	f846 5b04 	str.w	r5, [r6], #4
  404d8e:	d8fa      	bhi.n	404d86 <memset+0x6a>
  404d90:	1f22      	subs	r2, r4, #4
  404d92:	f022 0203 	bic.w	r2, r2, #3
  404d96:	3204      	adds	r2, #4
  404d98:	4413      	add	r3, r2
  404d9a:	f004 0403 	and.w	r4, r4, #3
  404d9e:	b12c      	cbz	r4, 404dac <memset+0x90>
  404da0:	b2c9      	uxtb	r1, r1
  404da2:	441c      	add	r4, r3
  404da4:	f803 1b01 	strb.w	r1, [r3], #1
  404da8:	429c      	cmp	r4, r3
  404daa:	d1fb      	bne.n	404da4 <memset+0x88>
  404dac:	bc70      	pop	{r4, r5, r6}
  404dae:	4770      	bx	lr
  404db0:	4614      	mov	r4, r2
  404db2:	4603      	mov	r3, r0
  404db4:	e7c2      	b.n	404d3c <memset+0x20>
  404db6:	bf00      	nop

00404db8 <__malloc_lock>:
  404db8:	4801      	ldr	r0, [pc, #4]	; (404dc0 <__malloc_lock+0x8>)
  404dba:	f001 bd65 	b.w	406888 <__retarget_lock_acquire_recursive>
  404dbe:	bf00      	nop
  404dc0:	2040c894 	.word	0x2040c894

00404dc4 <__malloc_unlock>:
  404dc4:	4801      	ldr	r0, [pc, #4]	; (404dcc <__malloc_unlock+0x8>)
  404dc6:	f001 bd61 	b.w	40688c <__retarget_lock_release_recursive>
  404dca:	bf00      	nop
  404dcc:	2040c894 	.word	0x2040c894

00404dd0 <_sbrk_r>:
  404dd0:	b538      	push	{r3, r4, r5, lr}
  404dd2:	4c07      	ldr	r4, [pc, #28]	; (404df0 <_sbrk_r+0x20>)
  404dd4:	2300      	movs	r3, #0
  404dd6:	4605      	mov	r5, r0
  404dd8:	4608      	mov	r0, r1
  404dda:	6023      	str	r3, [r4, #0]
  404ddc:	f7fd f9e2 	bl	4021a4 <_sbrk>
  404de0:	1c43      	adds	r3, r0, #1
  404de2:	d000      	beq.n	404de6 <_sbrk_r+0x16>
  404de4:	bd38      	pop	{r3, r4, r5, pc}
  404de6:	6823      	ldr	r3, [r4, #0]
  404de8:	2b00      	cmp	r3, #0
  404dea:	d0fb      	beq.n	404de4 <_sbrk_r+0x14>
  404dec:	602b      	str	r3, [r5, #0]
  404dee:	bd38      	pop	{r3, r4, r5, pc}
  404df0:	2040c8a8 	.word	0x2040c8a8

00404df4 <setbuf>:
  404df4:	2900      	cmp	r1, #0
  404df6:	bf0c      	ite	eq
  404df8:	2202      	moveq	r2, #2
  404dfa:	2200      	movne	r2, #0
  404dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404e00:	f000 b800 	b.w	404e04 <setvbuf>

00404e04 <setvbuf>:
  404e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404e08:	4c61      	ldr	r4, [pc, #388]	; (404f90 <setvbuf+0x18c>)
  404e0a:	6825      	ldr	r5, [r4, #0]
  404e0c:	b083      	sub	sp, #12
  404e0e:	4604      	mov	r4, r0
  404e10:	460f      	mov	r7, r1
  404e12:	4690      	mov	r8, r2
  404e14:	461e      	mov	r6, r3
  404e16:	b115      	cbz	r5, 404e1e <setvbuf+0x1a>
  404e18:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404e1a:	2b00      	cmp	r3, #0
  404e1c:	d064      	beq.n	404ee8 <setvbuf+0xe4>
  404e1e:	f1b8 0f02 	cmp.w	r8, #2
  404e22:	d006      	beq.n	404e32 <setvbuf+0x2e>
  404e24:	f1b8 0f01 	cmp.w	r8, #1
  404e28:	f200 809f 	bhi.w	404f6a <setvbuf+0x166>
  404e2c:	2e00      	cmp	r6, #0
  404e2e:	f2c0 809c 	blt.w	404f6a <setvbuf+0x166>
  404e32:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404e34:	07d8      	lsls	r0, r3, #31
  404e36:	d534      	bpl.n	404ea2 <setvbuf+0x9e>
  404e38:	4621      	mov	r1, r4
  404e3a:	4628      	mov	r0, r5
  404e3c:	f001 f90c 	bl	406058 <_fflush_r>
  404e40:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404e42:	b141      	cbz	r1, 404e56 <setvbuf+0x52>
  404e44:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404e48:	4299      	cmp	r1, r3
  404e4a:	d002      	beq.n	404e52 <setvbuf+0x4e>
  404e4c:	4628      	mov	r0, r5
  404e4e:	f001 fa81 	bl	406354 <_free_r>
  404e52:	2300      	movs	r3, #0
  404e54:	6323      	str	r3, [r4, #48]	; 0x30
  404e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404e5a:	2200      	movs	r2, #0
  404e5c:	61a2      	str	r2, [r4, #24]
  404e5e:	6062      	str	r2, [r4, #4]
  404e60:	061a      	lsls	r2, r3, #24
  404e62:	d43a      	bmi.n	404eda <setvbuf+0xd6>
  404e64:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404e68:	f023 0303 	bic.w	r3, r3, #3
  404e6c:	f1b8 0f02 	cmp.w	r8, #2
  404e70:	81a3      	strh	r3, [r4, #12]
  404e72:	d01d      	beq.n	404eb0 <setvbuf+0xac>
  404e74:	ab01      	add	r3, sp, #4
  404e76:	466a      	mov	r2, sp
  404e78:	4621      	mov	r1, r4
  404e7a:	4628      	mov	r0, r5
  404e7c:	f001 fd08 	bl	406890 <__swhatbuf_r>
  404e80:	89a3      	ldrh	r3, [r4, #12]
  404e82:	4318      	orrs	r0, r3
  404e84:	81a0      	strh	r0, [r4, #12]
  404e86:	2e00      	cmp	r6, #0
  404e88:	d132      	bne.n	404ef0 <setvbuf+0xec>
  404e8a:	9e00      	ldr	r6, [sp, #0]
  404e8c:	4630      	mov	r0, r6
  404e8e:	f7ff fbf3 	bl	404678 <malloc>
  404e92:	4607      	mov	r7, r0
  404e94:	2800      	cmp	r0, #0
  404e96:	d06b      	beq.n	404f70 <setvbuf+0x16c>
  404e98:	89a3      	ldrh	r3, [r4, #12]
  404e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404e9e:	81a3      	strh	r3, [r4, #12]
  404ea0:	e028      	b.n	404ef4 <setvbuf+0xf0>
  404ea2:	89a3      	ldrh	r3, [r4, #12]
  404ea4:	0599      	lsls	r1, r3, #22
  404ea6:	d4c7      	bmi.n	404e38 <setvbuf+0x34>
  404ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404eaa:	f001 fced 	bl	406888 <__retarget_lock_acquire_recursive>
  404eae:	e7c3      	b.n	404e38 <setvbuf+0x34>
  404eb0:	2500      	movs	r5, #0
  404eb2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404eb4:	2600      	movs	r6, #0
  404eb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404eba:	f043 0302 	orr.w	r3, r3, #2
  404ebe:	2001      	movs	r0, #1
  404ec0:	60a6      	str	r6, [r4, #8]
  404ec2:	07ce      	lsls	r6, r1, #31
  404ec4:	81a3      	strh	r3, [r4, #12]
  404ec6:	6022      	str	r2, [r4, #0]
  404ec8:	6122      	str	r2, [r4, #16]
  404eca:	6160      	str	r0, [r4, #20]
  404ecc:	d401      	bmi.n	404ed2 <setvbuf+0xce>
  404ece:	0598      	lsls	r0, r3, #22
  404ed0:	d53e      	bpl.n	404f50 <setvbuf+0x14c>
  404ed2:	4628      	mov	r0, r5
  404ed4:	b003      	add	sp, #12
  404ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404eda:	6921      	ldr	r1, [r4, #16]
  404edc:	4628      	mov	r0, r5
  404ede:	f001 fa39 	bl	406354 <_free_r>
  404ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404ee6:	e7bd      	b.n	404e64 <setvbuf+0x60>
  404ee8:	4628      	mov	r0, r5
  404eea:	f001 f90d 	bl	406108 <__sinit>
  404eee:	e796      	b.n	404e1e <setvbuf+0x1a>
  404ef0:	2f00      	cmp	r7, #0
  404ef2:	d0cb      	beq.n	404e8c <setvbuf+0x88>
  404ef4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404ef6:	2b00      	cmp	r3, #0
  404ef8:	d033      	beq.n	404f62 <setvbuf+0x15e>
  404efa:	9b00      	ldr	r3, [sp, #0]
  404efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404f00:	6027      	str	r7, [r4, #0]
  404f02:	429e      	cmp	r6, r3
  404f04:	bf1c      	itt	ne
  404f06:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404f0a:	81a2      	strhne	r2, [r4, #12]
  404f0c:	f1b8 0f01 	cmp.w	r8, #1
  404f10:	bf04      	itt	eq
  404f12:	f042 0201 	orreq.w	r2, r2, #1
  404f16:	81a2      	strheq	r2, [r4, #12]
  404f18:	b292      	uxth	r2, r2
  404f1a:	f012 0308 	ands.w	r3, r2, #8
  404f1e:	6127      	str	r7, [r4, #16]
  404f20:	6166      	str	r6, [r4, #20]
  404f22:	d00e      	beq.n	404f42 <setvbuf+0x13e>
  404f24:	07d1      	lsls	r1, r2, #31
  404f26:	d51a      	bpl.n	404f5e <setvbuf+0x15a>
  404f28:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404f2a:	4276      	negs	r6, r6
  404f2c:	2300      	movs	r3, #0
  404f2e:	f015 0501 	ands.w	r5, r5, #1
  404f32:	61a6      	str	r6, [r4, #24]
  404f34:	60a3      	str	r3, [r4, #8]
  404f36:	d009      	beq.n	404f4c <setvbuf+0x148>
  404f38:	2500      	movs	r5, #0
  404f3a:	4628      	mov	r0, r5
  404f3c:	b003      	add	sp, #12
  404f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404f42:	60a3      	str	r3, [r4, #8]
  404f44:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404f46:	f015 0501 	ands.w	r5, r5, #1
  404f4a:	d1f5      	bne.n	404f38 <setvbuf+0x134>
  404f4c:	0593      	lsls	r3, r2, #22
  404f4e:	d4c0      	bmi.n	404ed2 <setvbuf+0xce>
  404f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404f52:	f001 fc9b 	bl	40688c <__retarget_lock_release_recursive>
  404f56:	4628      	mov	r0, r5
  404f58:	b003      	add	sp, #12
  404f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404f5e:	60a6      	str	r6, [r4, #8]
  404f60:	e7f0      	b.n	404f44 <setvbuf+0x140>
  404f62:	4628      	mov	r0, r5
  404f64:	f001 f8d0 	bl	406108 <__sinit>
  404f68:	e7c7      	b.n	404efa <setvbuf+0xf6>
  404f6a:	f04f 35ff 	mov.w	r5, #4294967295
  404f6e:	e7b0      	b.n	404ed2 <setvbuf+0xce>
  404f70:	f8dd 9000 	ldr.w	r9, [sp]
  404f74:	45b1      	cmp	r9, r6
  404f76:	d004      	beq.n	404f82 <setvbuf+0x17e>
  404f78:	4648      	mov	r0, r9
  404f7a:	f7ff fb7d 	bl	404678 <malloc>
  404f7e:	4607      	mov	r7, r0
  404f80:	b920      	cbnz	r0, 404f8c <setvbuf+0x188>
  404f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404f86:	f04f 35ff 	mov.w	r5, #4294967295
  404f8a:	e792      	b.n	404eb2 <setvbuf+0xae>
  404f8c:	464e      	mov	r6, r9
  404f8e:	e783      	b.n	404e98 <setvbuf+0x94>
  404f90:	20400014 	.word	0x20400014
	...

00404fc0 <strlen>:
  404fc0:	f890 f000 	pld	[r0]
  404fc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404fc8:	f020 0107 	bic.w	r1, r0, #7
  404fcc:	f06f 0c00 	mvn.w	ip, #0
  404fd0:	f010 0407 	ands.w	r4, r0, #7
  404fd4:	f891 f020 	pld	[r1, #32]
  404fd8:	f040 8049 	bne.w	40506e <strlen+0xae>
  404fdc:	f04f 0400 	mov.w	r4, #0
  404fe0:	f06f 0007 	mvn.w	r0, #7
  404fe4:	e9d1 2300 	ldrd	r2, r3, [r1]
  404fe8:	f891 f040 	pld	[r1, #64]	; 0x40
  404fec:	f100 0008 	add.w	r0, r0, #8
  404ff0:	fa82 f24c 	uadd8	r2, r2, ip
  404ff4:	faa4 f28c 	sel	r2, r4, ip
  404ff8:	fa83 f34c 	uadd8	r3, r3, ip
  404ffc:	faa2 f38c 	sel	r3, r2, ip
  405000:	bb4b      	cbnz	r3, 405056 <strlen+0x96>
  405002:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405006:	fa82 f24c 	uadd8	r2, r2, ip
  40500a:	f100 0008 	add.w	r0, r0, #8
  40500e:	faa4 f28c 	sel	r2, r4, ip
  405012:	fa83 f34c 	uadd8	r3, r3, ip
  405016:	faa2 f38c 	sel	r3, r2, ip
  40501a:	b9e3      	cbnz	r3, 405056 <strlen+0x96>
  40501c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  405020:	fa82 f24c 	uadd8	r2, r2, ip
  405024:	f100 0008 	add.w	r0, r0, #8
  405028:	faa4 f28c 	sel	r2, r4, ip
  40502c:	fa83 f34c 	uadd8	r3, r3, ip
  405030:	faa2 f38c 	sel	r3, r2, ip
  405034:	b97b      	cbnz	r3, 405056 <strlen+0x96>
  405036:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40503a:	f101 0120 	add.w	r1, r1, #32
  40503e:	fa82 f24c 	uadd8	r2, r2, ip
  405042:	f100 0008 	add.w	r0, r0, #8
  405046:	faa4 f28c 	sel	r2, r4, ip
  40504a:	fa83 f34c 	uadd8	r3, r3, ip
  40504e:	faa2 f38c 	sel	r3, r2, ip
  405052:	2b00      	cmp	r3, #0
  405054:	d0c6      	beq.n	404fe4 <strlen+0x24>
  405056:	2a00      	cmp	r2, #0
  405058:	bf04      	itt	eq
  40505a:	3004      	addeq	r0, #4
  40505c:	461a      	moveq	r2, r3
  40505e:	ba12      	rev	r2, r2
  405060:	fab2 f282 	clz	r2, r2
  405064:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  405068:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40506c:	4770      	bx	lr
  40506e:	e9d1 2300 	ldrd	r2, r3, [r1]
  405072:	f004 0503 	and.w	r5, r4, #3
  405076:	f1c4 0000 	rsb	r0, r4, #0
  40507a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40507e:	f014 0f04 	tst.w	r4, #4
  405082:	f891 f040 	pld	[r1, #64]	; 0x40
  405086:	fa0c f505 	lsl.w	r5, ip, r5
  40508a:	ea62 0205 	orn	r2, r2, r5
  40508e:	bf1c      	itt	ne
  405090:	ea63 0305 	ornne	r3, r3, r5
  405094:	4662      	movne	r2, ip
  405096:	f04f 0400 	mov.w	r4, #0
  40509a:	e7a9      	b.n	404ff0 <strlen+0x30>

0040509c <__sprint_r.part.0>:
  40509c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4050a0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4050a2:	049c      	lsls	r4, r3, #18
  4050a4:	4693      	mov	fp, r2
  4050a6:	d52f      	bpl.n	405108 <__sprint_r.part.0+0x6c>
  4050a8:	6893      	ldr	r3, [r2, #8]
  4050aa:	6812      	ldr	r2, [r2, #0]
  4050ac:	b353      	cbz	r3, 405104 <__sprint_r.part.0+0x68>
  4050ae:	460e      	mov	r6, r1
  4050b0:	4607      	mov	r7, r0
  4050b2:	f102 0908 	add.w	r9, r2, #8
  4050b6:	e919 0420 	ldmdb	r9, {r5, sl}
  4050ba:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4050be:	d017      	beq.n	4050f0 <__sprint_r.part.0+0x54>
  4050c0:	3d04      	subs	r5, #4
  4050c2:	2400      	movs	r4, #0
  4050c4:	e001      	b.n	4050ca <__sprint_r.part.0+0x2e>
  4050c6:	45a0      	cmp	r8, r4
  4050c8:	d010      	beq.n	4050ec <__sprint_r.part.0+0x50>
  4050ca:	4632      	mov	r2, r6
  4050cc:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4050d0:	4638      	mov	r0, r7
  4050d2:	f001 f8bb 	bl	40624c <_fputwc_r>
  4050d6:	1c43      	adds	r3, r0, #1
  4050d8:	f104 0401 	add.w	r4, r4, #1
  4050dc:	d1f3      	bne.n	4050c6 <__sprint_r.part.0+0x2a>
  4050de:	2300      	movs	r3, #0
  4050e0:	f8cb 3008 	str.w	r3, [fp, #8]
  4050e4:	f8cb 3004 	str.w	r3, [fp, #4]
  4050e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4050ec:	f8db 3008 	ldr.w	r3, [fp, #8]
  4050f0:	f02a 0a03 	bic.w	sl, sl, #3
  4050f4:	eba3 030a 	sub.w	r3, r3, sl
  4050f8:	f8cb 3008 	str.w	r3, [fp, #8]
  4050fc:	f109 0908 	add.w	r9, r9, #8
  405100:	2b00      	cmp	r3, #0
  405102:	d1d8      	bne.n	4050b6 <__sprint_r.part.0+0x1a>
  405104:	2000      	movs	r0, #0
  405106:	e7ea      	b.n	4050de <__sprint_r.part.0+0x42>
  405108:	f001 fa0a 	bl	406520 <__sfvwrite_r>
  40510c:	2300      	movs	r3, #0
  40510e:	f8cb 3008 	str.w	r3, [fp, #8]
  405112:	f8cb 3004 	str.w	r3, [fp, #4]
  405116:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40511a:	bf00      	nop

0040511c <_vfiprintf_r>:
  40511c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405120:	b0ad      	sub	sp, #180	; 0xb4
  405122:	461d      	mov	r5, r3
  405124:	468b      	mov	fp, r1
  405126:	4690      	mov	r8, r2
  405128:	9307      	str	r3, [sp, #28]
  40512a:	9006      	str	r0, [sp, #24]
  40512c:	b118      	cbz	r0, 405136 <_vfiprintf_r+0x1a>
  40512e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405130:	2b00      	cmp	r3, #0
  405132:	f000 80f3 	beq.w	40531c <_vfiprintf_r+0x200>
  405136:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40513a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40513e:	07df      	lsls	r7, r3, #31
  405140:	b281      	uxth	r1, r0
  405142:	d402      	bmi.n	40514a <_vfiprintf_r+0x2e>
  405144:	058e      	lsls	r6, r1, #22
  405146:	f140 80fc 	bpl.w	405342 <_vfiprintf_r+0x226>
  40514a:	048c      	lsls	r4, r1, #18
  40514c:	d40a      	bmi.n	405164 <_vfiprintf_r+0x48>
  40514e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405152:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  405156:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40515a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40515e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  405162:	b289      	uxth	r1, r1
  405164:	0708      	lsls	r0, r1, #28
  405166:	f140 80b3 	bpl.w	4052d0 <_vfiprintf_r+0x1b4>
  40516a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40516e:	2b00      	cmp	r3, #0
  405170:	f000 80ae 	beq.w	4052d0 <_vfiprintf_r+0x1b4>
  405174:	f001 031a 	and.w	r3, r1, #26
  405178:	2b0a      	cmp	r3, #10
  40517a:	f000 80b5 	beq.w	4052e8 <_vfiprintf_r+0x1cc>
  40517e:	2300      	movs	r3, #0
  405180:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  405184:	930b      	str	r3, [sp, #44]	; 0x2c
  405186:	9311      	str	r3, [sp, #68]	; 0x44
  405188:	9310      	str	r3, [sp, #64]	; 0x40
  40518a:	9303      	str	r3, [sp, #12]
  40518c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  405190:	46ca      	mov	sl, r9
  405192:	f8cd b010 	str.w	fp, [sp, #16]
  405196:	f898 3000 	ldrb.w	r3, [r8]
  40519a:	4644      	mov	r4, r8
  40519c:	b1fb      	cbz	r3, 4051de <_vfiprintf_r+0xc2>
  40519e:	2b25      	cmp	r3, #37	; 0x25
  4051a0:	d102      	bne.n	4051a8 <_vfiprintf_r+0x8c>
  4051a2:	e01c      	b.n	4051de <_vfiprintf_r+0xc2>
  4051a4:	2b25      	cmp	r3, #37	; 0x25
  4051a6:	d003      	beq.n	4051b0 <_vfiprintf_r+0x94>
  4051a8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4051ac:	2b00      	cmp	r3, #0
  4051ae:	d1f9      	bne.n	4051a4 <_vfiprintf_r+0x88>
  4051b0:	eba4 0508 	sub.w	r5, r4, r8
  4051b4:	b19d      	cbz	r5, 4051de <_vfiprintf_r+0xc2>
  4051b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4051b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4051ba:	f8ca 8000 	str.w	r8, [sl]
  4051be:	3301      	adds	r3, #1
  4051c0:	442a      	add	r2, r5
  4051c2:	2b07      	cmp	r3, #7
  4051c4:	f8ca 5004 	str.w	r5, [sl, #4]
  4051c8:	9211      	str	r2, [sp, #68]	; 0x44
  4051ca:	9310      	str	r3, [sp, #64]	; 0x40
  4051cc:	dd7a      	ble.n	4052c4 <_vfiprintf_r+0x1a8>
  4051ce:	2a00      	cmp	r2, #0
  4051d0:	f040 84b0 	bne.w	405b34 <_vfiprintf_r+0xa18>
  4051d4:	9b03      	ldr	r3, [sp, #12]
  4051d6:	9210      	str	r2, [sp, #64]	; 0x40
  4051d8:	442b      	add	r3, r5
  4051da:	46ca      	mov	sl, r9
  4051dc:	9303      	str	r3, [sp, #12]
  4051de:	7823      	ldrb	r3, [r4, #0]
  4051e0:	2b00      	cmp	r3, #0
  4051e2:	f000 83e0 	beq.w	4059a6 <_vfiprintf_r+0x88a>
  4051e6:	2000      	movs	r0, #0
  4051e8:	f04f 0300 	mov.w	r3, #0
  4051ec:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4051f0:	f104 0801 	add.w	r8, r4, #1
  4051f4:	7862      	ldrb	r2, [r4, #1]
  4051f6:	4605      	mov	r5, r0
  4051f8:	4606      	mov	r6, r0
  4051fa:	4603      	mov	r3, r0
  4051fc:	f04f 34ff 	mov.w	r4, #4294967295
  405200:	f108 0801 	add.w	r8, r8, #1
  405204:	f1a2 0120 	sub.w	r1, r2, #32
  405208:	2958      	cmp	r1, #88	; 0x58
  40520a:	f200 82de 	bhi.w	4057ca <_vfiprintf_r+0x6ae>
  40520e:	e8df f011 	tbh	[pc, r1, lsl #1]
  405212:	0221      	.short	0x0221
  405214:	02dc02dc 	.word	0x02dc02dc
  405218:	02dc0229 	.word	0x02dc0229
  40521c:	02dc02dc 	.word	0x02dc02dc
  405220:	02dc02dc 	.word	0x02dc02dc
  405224:	028902dc 	.word	0x028902dc
  405228:	02dc0295 	.word	0x02dc0295
  40522c:	02bd00a2 	.word	0x02bd00a2
  405230:	019f02dc 	.word	0x019f02dc
  405234:	01a401a4 	.word	0x01a401a4
  405238:	01a401a4 	.word	0x01a401a4
  40523c:	01a401a4 	.word	0x01a401a4
  405240:	01a401a4 	.word	0x01a401a4
  405244:	02dc01a4 	.word	0x02dc01a4
  405248:	02dc02dc 	.word	0x02dc02dc
  40524c:	02dc02dc 	.word	0x02dc02dc
  405250:	02dc02dc 	.word	0x02dc02dc
  405254:	02dc02dc 	.word	0x02dc02dc
  405258:	01b202dc 	.word	0x01b202dc
  40525c:	02dc02dc 	.word	0x02dc02dc
  405260:	02dc02dc 	.word	0x02dc02dc
  405264:	02dc02dc 	.word	0x02dc02dc
  405268:	02dc02dc 	.word	0x02dc02dc
  40526c:	02dc02dc 	.word	0x02dc02dc
  405270:	02dc0197 	.word	0x02dc0197
  405274:	02dc02dc 	.word	0x02dc02dc
  405278:	02dc02dc 	.word	0x02dc02dc
  40527c:	02dc019b 	.word	0x02dc019b
  405280:	025302dc 	.word	0x025302dc
  405284:	02dc02dc 	.word	0x02dc02dc
  405288:	02dc02dc 	.word	0x02dc02dc
  40528c:	02dc02dc 	.word	0x02dc02dc
  405290:	02dc02dc 	.word	0x02dc02dc
  405294:	02dc02dc 	.word	0x02dc02dc
  405298:	021b025a 	.word	0x021b025a
  40529c:	02dc02dc 	.word	0x02dc02dc
  4052a0:	026e02dc 	.word	0x026e02dc
  4052a4:	02dc021b 	.word	0x02dc021b
  4052a8:	027302dc 	.word	0x027302dc
  4052ac:	01f502dc 	.word	0x01f502dc
  4052b0:	02090182 	.word	0x02090182
  4052b4:	02dc02d7 	.word	0x02dc02d7
  4052b8:	02dc029a 	.word	0x02dc029a
  4052bc:	02dc00a7 	.word	0x02dc00a7
  4052c0:	022e02dc 	.word	0x022e02dc
  4052c4:	f10a 0a08 	add.w	sl, sl, #8
  4052c8:	9b03      	ldr	r3, [sp, #12]
  4052ca:	442b      	add	r3, r5
  4052cc:	9303      	str	r3, [sp, #12]
  4052ce:	e786      	b.n	4051de <_vfiprintf_r+0xc2>
  4052d0:	4659      	mov	r1, fp
  4052d2:	9806      	ldr	r0, [sp, #24]
  4052d4:	f000 fdac 	bl	405e30 <__swsetup_r>
  4052d8:	bb18      	cbnz	r0, 405322 <_vfiprintf_r+0x206>
  4052da:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4052de:	f001 031a 	and.w	r3, r1, #26
  4052e2:	2b0a      	cmp	r3, #10
  4052e4:	f47f af4b 	bne.w	40517e <_vfiprintf_r+0x62>
  4052e8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4052ec:	2b00      	cmp	r3, #0
  4052ee:	f6ff af46 	blt.w	40517e <_vfiprintf_r+0x62>
  4052f2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4052f6:	07db      	lsls	r3, r3, #31
  4052f8:	d405      	bmi.n	405306 <_vfiprintf_r+0x1ea>
  4052fa:	058f      	lsls	r7, r1, #22
  4052fc:	d403      	bmi.n	405306 <_vfiprintf_r+0x1ea>
  4052fe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405302:	f001 fac3 	bl	40688c <__retarget_lock_release_recursive>
  405306:	462b      	mov	r3, r5
  405308:	4642      	mov	r2, r8
  40530a:	4659      	mov	r1, fp
  40530c:	9806      	ldr	r0, [sp, #24]
  40530e:	f000 fd4d 	bl	405dac <__sbprintf>
  405312:	9003      	str	r0, [sp, #12]
  405314:	9803      	ldr	r0, [sp, #12]
  405316:	b02d      	add	sp, #180	; 0xb4
  405318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40531c:	f000 fef4 	bl	406108 <__sinit>
  405320:	e709      	b.n	405136 <_vfiprintf_r+0x1a>
  405322:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405326:	07d9      	lsls	r1, r3, #31
  405328:	d404      	bmi.n	405334 <_vfiprintf_r+0x218>
  40532a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40532e:	059a      	lsls	r2, r3, #22
  405330:	f140 84aa 	bpl.w	405c88 <_vfiprintf_r+0xb6c>
  405334:	f04f 33ff 	mov.w	r3, #4294967295
  405338:	9303      	str	r3, [sp, #12]
  40533a:	9803      	ldr	r0, [sp, #12]
  40533c:	b02d      	add	sp, #180	; 0xb4
  40533e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405342:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405346:	f001 fa9f 	bl	406888 <__retarget_lock_acquire_recursive>
  40534a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40534e:	b281      	uxth	r1, r0
  405350:	e6fb      	b.n	40514a <_vfiprintf_r+0x2e>
  405352:	4276      	negs	r6, r6
  405354:	9207      	str	r2, [sp, #28]
  405356:	f043 0304 	orr.w	r3, r3, #4
  40535a:	f898 2000 	ldrb.w	r2, [r8]
  40535e:	e74f      	b.n	405200 <_vfiprintf_r+0xe4>
  405360:	9608      	str	r6, [sp, #32]
  405362:	069e      	lsls	r6, r3, #26
  405364:	f100 8450 	bmi.w	405c08 <_vfiprintf_r+0xaec>
  405368:	9907      	ldr	r1, [sp, #28]
  40536a:	06dd      	lsls	r5, r3, #27
  40536c:	460a      	mov	r2, r1
  40536e:	f100 83ef 	bmi.w	405b50 <_vfiprintf_r+0xa34>
  405372:	0658      	lsls	r0, r3, #25
  405374:	f140 83ec 	bpl.w	405b50 <_vfiprintf_r+0xa34>
  405378:	880e      	ldrh	r6, [r1, #0]
  40537a:	3104      	adds	r1, #4
  40537c:	2700      	movs	r7, #0
  40537e:	2201      	movs	r2, #1
  405380:	9107      	str	r1, [sp, #28]
  405382:	f04f 0100 	mov.w	r1, #0
  405386:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40538a:	2500      	movs	r5, #0
  40538c:	1c61      	adds	r1, r4, #1
  40538e:	f000 8116 	beq.w	4055be <_vfiprintf_r+0x4a2>
  405392:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  405396:	9102      	str	r1, [sp, #8]
  405398:	ea56 0107 	orrs.w	r1, r6, r7
  40539c:	f040 8114 	bne.w	4055c8 <_vfiprintf_r+0x4ac>
  4053a0:	2c00      	cmp	r4, #0
  4053a2:	f040 835c 	bne.w	405a5e <_vfiprintf_r+0x942>
  4053a6:	2a00      	cmp	r2, #0
  4053a8:	f040 83b7 	bne.w	405b1a <_vfiprintf_r+0x9fe>
  4053ac:	f013 0301 	ands.w	r3, r3, #1
  4053b0:	9305      	str	r3, [sp, #20]
  4053b2:	f000 8457 	beq.w	405c64 <_vfiprintf_r+0xb48>
  4053b6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4053ba:	2330      	movs	r3, #48	; 0x30
  4053bc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4053c0:	9b05      	ldr	r3, [sp, #20]
  4053c2:	42a3      	cmp	r3, r4
  4053c4:	bfb8      	it	lt
  4053c6:	4623      	movlt	r3, r4
  4053c8:	9301      	str	r3, [sp, #4]
  4053ca:	b10d      	cbz	r5, 4053d0 <_vfiprintf_r+0x2b4>
  4053cc:	3301      	adds	r3, #1
  4053ce:	9301      	str	r3, [sp, #4]
  4053d0:	9b02      	ldr	r3, [sp, #8]
  4053d2:	f013 0302 	ands.w	r3, r3, #2
  4053d6:	9309      	str	r3, [sp, #36]	; 0x24
  4053d8:	d002      	beq.n	4053e0 <_vfiprintf_r+0x2c4>
  4053da:	9b01      	ldr	r3, [sp, #4]
  4053dc:	3302      	adds	r3, #2
  4053de:	9301      	str	r3, [sp, #4]
  4053e0:	9b02      	ldr	r3, [sp, #8]
  4053e2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4053e6:	930a      	str	r3, [sp, #40]	; 0x28
  4053e8:	f040 8217 	bne.w	40581a <_vfiprintf_r+0x6fe>
  4053ec:	9b08      	ldr	r3, [sp, #32]
  4053ee:	9a01      	ldr	r2, [sp, #4]
  4053f0:	1a9d      	subs	r5, r3, r2
  4053f2:	2d00      	cmp	r5, #0
  4053f4:	f340 8211 	ble.w	40581a <_vfiprintf_r+0x6fe>
  4053f8:	2d10      	cmp	r5, #16
  4053fa:	f340 8490 	ble.w	405d1e <_vfiprintf_r+0xc02>
  4053fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405400:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405402:	4ec4      	ldr	r6, [pc, #784]	; (405714 <_vfiprintf_r+0x5f8>)
  405404:	46d6      	mov	lr, sl
  405406:	2710      	movs	r7, #16
  405408:	46a2      	mov	sl, r4
  40540a:	4619      	mov	r1, r3
  40540c:	9c06      	ldr	r4, [sp, #24]
  40540e:	e007      	b.n	405420 <_vfiprintf_r+0x304>
  405410:	f101 0c02 	add.w	ip, r1, #2
  405414:	f10e 0e08 	add.w	lr, lr, #8
  405418:	4601      	mov	r1, r0
  40541a:	3d10      	subs	r5, #16
  40541c:	2d10      	cmp	r5, #16
  40541e:	dd11      	ble.n	405444 <_vfiprintf_r+0x328>
  405420:	1c48      	adds	r0, r1, #1
  405422:	3210      	adds	r2, #16
  405424:	2807      	cmp	r0, #7
  405426:	9211      	str	r2, [sp, #68]	; 0x44
  405428:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40542c:	9010      	str	r0, [sp, #64]	; 0x40
  40542e:	ddef      	ble.n	405410 <_vfiprintf_r+0x2f4>
  405430:	2a00      	cmp	r2, #0
  405432:	f040 81e4 	bne.w	4057fe <_vfiprintf_r+0x6e2>
  405436:	3d10      	subs	r5, #16
  405438:	2d10      	cmp	r5, #16
  40543a:	4611      	mov	r1, r2
  40543c:	f04f 0c01 	mov.w	ip, #1
  405440:	46ce      	mov	lr, r9
  405442:	dced      	bgt.n	405420 <_vfiprintf_r+0x304>
  405444:	4654      	mov	r4, sl
  405446:	4661      	mov	r1, ip
  405448:	46f2      	mov	sl, lr
  40544a:	442a      	add	r2, r5
  40544c:	2907      	cmp	r1, #7
  40544e:	9211      	str	r2, [sp, #68]	; 0x44
  405450:	f8ca 6000 	str.w	r6, [sl]
  405454:	f8ca 5004 	str.w	r5, [sl, #4]
  405458:	9110      	str	r1, [sp, #64]	; 0x40
  40545a:	f300 82ec 	bgt.w	405a36 <_vfiprintf_r+0x91a>
  40545e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405462:	f10a 0a08 	add.w	sl, sl, #8
  405466:	1c48      	adds	r0, r1, #1
  405468:	2d00      	cmp	r5, #0
  40546a:	f040 81de 	bne.w	40582a <_vfiprintf_r+0x70e>
  40546e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405470:	2b00      	cmp	r3, #0
  405472:	f000 81f8 	beq.w	405866 <_vfiprintf_r+0x74a>
  405476:	3202      	adds	r2, #2
  405478:	a90e      	add	r1, sp, #56	; 0x38
  40547a:	2302      	movs	r3, #2
  40547c:	2807      	cmp	r0, #7
  40547e:	9211      	str	r2, [sp, #68]	; 0x44
  405480:	9010      	str	r0, [sp, #64]	; 0x40
  405482:	e88a 000a 	stmia.w	sl, {r1, r3}
  405486:	f340 81ea 	ble.w	40585e <_vfiprintf_r+0x742>
  40548a:	2a00      	cmp	r2, #0
  40548c:	f040 838c 	bne.w	405ba8 <_vfiprintf_r+0xa8c>
  405490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405492:	2b80      	cmp	r3, #128	; 0x80
  405494:	f04f 0001 	mov.w	r0, #1
  405498:	4611      	mov	r1, r2
  40549a:	46ca      	mov	sl, r9
  40549c:	f040 81e7 	bne.w	40586e <_vfiprintf_r+0x752>
  4054a0:	9b08      	ldr	r3, [sp, #32]
  4054a2:	9d01      	ldr	r5, [sp, #4]
  4054a4:	1b5e      	subs	r6, r3, r5
  4054a6:	2e00      	cmp	r6, #0
  4054a8:	f340 81e1 	ble.w	40586e <_vfiprintf_r+0x752>
  4054ac:	2e10      	cmp	r6, #16
  4054ae:	4d9a      	ldr	r5, [pc, #616]	; (405718 <_vfiprintf_r+0x5fc>)
  4054b0:	f340 8450 	ble.w	405d54 <_vfiprintf_r+0xc38>
  4054b4:	46d4      	mov	ip, sl
  4054b6:	2710      	movs	r7, #16
  4054b8:	46a2      	mov	sl, r4
  4054ba:	9c06      	ldr	r4, [sp, #24]
  4054bc:	e007      	b.n	4054ce <_vfiprintf_r+0x3b2>
  4054be:	f101 0e02 	add.w	lr, r1, #2
  4054c2:	f10c 0c08 	add.w	ip, ip, #8
  4054c6:	4601      	mov	r1, r0
  4054c8:	3e10      	subs	r6, #16
  4054ca:	2e10      	cmp	r6, #16
  4054cc:	dd11      	ble.n	4054f2 <_vfiprintf_r+0x3d6>
  4054ce:	1c48      	adds	r0, r1, #1
  4054d0:	3210      	adds	r2, #16
  4054d2:	2807      	cmp	r0, #7
  4054d4:	9211      	str	r2, [sp, #68]	; 0x44
  4054d6:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4054da:	9010      	str	r0, [sp, #64]	; 0x40
  4054dc:	ddef      	ble.n	4054be <_vfiprintf_r+0x3a2>
  4054de:	2a00      	cmp	r2, #0
  4054e0:	f040 829d 	bne.w	405a1e <_vfiprintf_r+0x902>
  4054e4:	3e10      	subs	r6, #16
  4054e6:	2e10      	cmp	r6, #16
  4054e8:	f04f 0e01 	mov.w	lr, #1
  4054ec:	4611      	mov	r1, r2
  4054ee:	46cc      	mov	ip, r9
  4054f0:	dced      	bgt.n	4054ce <_vfiprintf_r+0x3b2>
  4054f2:	4654      	mov	r4, sl
  4054f4:	46e2      	mov	sl, ip
  4054f6:	4432      	add	r2, r6
  4054f8:	f1be 0f07 	cmp.w	lr, #7
  4054fc:	9211      	str	r2, [sp, #68]	; 0x44
  4054fe:	e88a 0060 	stmia.w	sl, {r5, r6}
  405502:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  405506:	f300 8369 	bgt.w	405bdc <_vfiprintf_r+0xac0>
  40550a:	f10a 0a08 	add.w	sl, sl, #8
  40550e:	f10e 0001 	add.w	r0, lr, #1
  405512:	4671      	mov	r1, lr
  405514:	e1ab      	b.n	40586e <_vfiprintf_r+0x752>
  405516:	9608      	str	r6, [sp, #32]
  405518:	f013 0220 	ands.w	r2, r3, #32
  40551c:	f040 838c 	bne.w	405c38 <_vfiprintf_r+0xb1c>
  405520:	f013 0110 	ands.w	r1, r3, #16
  405524:	f040 831a 	bne.w	405b5c <_vfiprintf_r+0xa40>
  405528:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40552c:	f000 8316 	beq.w	405b5c <_vfiprintf_r+0xa40>
  405530:	9807      	ldr	r0, [sp, #28]
  405532:	460a      	mov	r2, r1
  405534:	4601      	mov	r1, r0
  405536:	3104      	adds	r1, #4
  405538:	8806      	ldrh	r6, [r0, #0]
  40553a:	9107      	str	r1, [sp, #28]
  40553c:	2700      	movs	r7, #0
  40553e:	e720      	b.n	405382 <_vfiprintf_r+0x266>
  405540:	9608      	str	r6, [sp, #32]
  405542:	f043 0310 	orr.w	r3, r3, #16
  405546:	e7e7      	b.n	405518 <_vfiprintf_r+0x3fc>
  405548:	9608      	str	r6, [sp, #32]
  40554a:	f043 0310 	orr.w	r3, r3, #16
  40554e:	e708      	b.n	405362 <_vfiprintf_r+0x246>
  405550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405554:	f898 2000 	ldrb.w	r2, [r8]
  405558:	e652      	b.n	405200 <_vfiprintf_r+0xe4>
  40555a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40555e:	2600      	movs	r6, #0
  405560:	f818 2b01 	ldrb.w	r2, [r8], #1
  405564:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  405568:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40556c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405570:	2909      	cmp	r1, #9
  405572:	d9f5      	bls.n	405560 <_vfiprintf_r+0x444>
  405574:	e646      	b.n	405204 <_vfiprintf_r+0xe8>
  405576:	9608      	str	r6, [sp, #32]
  405578:	2800      	cmp	r0, #0
  40557a:	f040 8408 	bne.w	405d8e <_vfiprintf_r+0xc72>
  40557e:	f043 0310 	orr.w	r3, r3, #16
  405582:	069e      	lsls	r6, r3, #26
  405584:	f100 834c 	bmi.w	405c20 <_vfiprintf_r+0xb04>
  405588:	06dd      	lsls	r5, r3, #27
  40558a:	f100 82f3 	bmi.w	405b74 <_vfiprintf_r+0xa58>
  40558e:	0658      	lsls	r0, r3, #25
  405590:	f140 82f0 	bpl.w	405b74 <_vfiprintf_r+0xa58>
  405594:	9d07      	ldr	r5, [sp, #28]
  405596:	f9b5 6000 	ldrsh.w	r6, [r5]
  40559a:	462a      	mov	r2, r5
  40559c:	17f7      	asrs	r7, r6, #31
  40559e:	3204      	adds	r2, #4
  4055a0:	4630      	mov	r0, r6
  4055a2:	4639      	mov	r1, r7
  4055a4:	9207      	str	r2, [sp, #28]
  4055a6:	2800      	cmp	r0, #0
  4055a8:	f171 0200 	sbcs.w	r2, r1, #0
  4055ac:	f2c0 835d 	blt.w	405c6a <_vfiprintf_r+0xb4e>
  4055b0:	1c61      	adds	r1, r4, #1
  4055b2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4055b6:	f04f 0201 	mov.w	r2, #1
  4055ba:	f47f aeea 	bne.w	405392 <_vfiprintf_r+0x276>
  4055be:	ea56 0107 	orrs.w	r1, r6, r7
  4055c2:	f000 824d 	beq.w	405a60 <_vfiprintf_r+0x944>
  4055c6:	9302      	str	r3, [sp, #8]
  4055c8:	2a01      	cmp	r2, #1
  4055ca:	f000 828c 	beq.w	405ae6 <_vfiprintf_r+0x9ca>
  4055ce:	2a02      	cmp	r2, #2
  4055d0:	f040 825c 	bne.w	405a8c <_vfiprintf_r+0x970>
  4055d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4055d6:	46cb      	mov	fp, r9
  4055d8:	0933      	lsrs	r3, r6, #4
  4055da:	f006 010f 	and.w	r1, r6, #15
  4055de:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4055e2:	093a      	lsrs	r2, r7, #4
  4055e4:	461e      	mov	r6, r3
  4055e6:	4617      	mov	r7, r2
  4055e8:	5c43      	ldrb	r3, [r0, r1]
  4055ea:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4055ee:	ea56 0307 	orrs.w	r3, r6, r7
  4055f2:	d1f1      	bne.n	4055d8 <_vfiprintf_r+0x4bc>
  4055f4:	eba9 030b 	sub.w	r3, r9, fp
  4055f8:	9305      	str	r3, [sp, #20]
  4055fa:	e6e1      	b.n	4053c0 <_vfiprintf_r+0x2a4>
  4055fc:	2800      	cmp	r0, #0
  4055fe:	f040 83c0 	bne.w	405d82 <_vfiprintf_r+0xc66>
  405602:	0699      	lsls	r1, r3, #26
  405604:	f100 8367 	bmi.w	405cd6 <_vfiprintf_r+0xbba>
  405608:	06da      	lsls	r2, r3, #27
  40560a:	f100 80f1 	bmi.w	4057f0 <_vfiprintf_r+0x6d4>
  40560e:	065b      	lsls	r3, r3, #25
  405610:	f140 80ee 	bpl.w	4057f0 <_vfiprintf_r+0x6d4>
  405614:	9a07      	ldr	r2, [sp, #28]
  405616:	6813      	ldr	r3, [r2, #0]
  405618:	3204      	adds	r2, #4
  40561a:	9207      	str	r2, [sp, #28]
  40561c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  405620:	801a      	strh	r2, [r3, #0]
  405622:	e5b8      	b.n	405196 <_vfiprintf_r+0x7a>
  405624:	9807      	ldr	r0, [sp, #28]
  405626:	4a3d      	ldr	r2, [pc, #244]	; (40571c <_vfiprintf_r+0x600>)
  405628:	9608      	str	r6, [sp, #32]
  40562a:	920b      	str	r2, [sp, #44]	; 0x2c
  40562c:	6806      	ldr	r6, [r0, #0]
  40562e:	2278      	movs	r2, #120	; 0x78
  405630:	2130      	movs	r1, #48	; 0x30
  405632:	3004      	adds	r0, #4
  405634:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405638:	f043 0302 	orr.w	r3, r3, #2
  40563c:	9007      	str	r0, [sp, #28]
  40563e:	2700      	movs	r7, #0
  405640:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405644:	2202      	movs	r2, #2
  405646:	e69c      	b.n	405382 <_vfiprintf_r+0x266>
  405648:	9608      	str	r6, [sp, #32]
  40564a:	2800      	cmp	r0, #0
  40564c:	d099      	beq.n	405582 <_vfiprintf_r+0x466>
  40564e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405652:	e796      	b.n	405582 <_vfiprintf_r+0x466>
  405654:	f898 2000 	ldrb.w	r2, [r8]
  405658:	2d00      	cmp	r5, #0
  40565a:	f47f add1 	bne.w	405200 <_vfiprintf_r+0xe4>
  40565e:	2001      	movs	r0, #1
  405660:	2520      	movs	r5, #32
  405662:	e5cd      	b.n	405200 <_vfiprintf_r+0xe4>
  405664:	f043 0301 	orr.w	r3, r3, #1
  405668:	f898 2000 	ldrb.w	r2, [r8]
  40566c:	e5c8      	b.n	405200 <_vfiprintf_r+0xe4>
  40566e:	9608      	str	r6, [sp, #32]
  405670:	2800      	cmp	r0, #0
  405672:	f040 8393 	bne.w	405d9c <_vfiprintf_r+0xc80>
  405676:	4929      	ldr	r1, [pc, #164]	; (40571c <_vfiprintf_r+0x600>)
  405678:	910b      	str	r1, [sp, #44]	; 0x2c
  40567a:	069f      	lsls	r7, r3, #26
  40567c:	f100 82e8 	bmi.w	405c50 <_vfiprintf_r+0xb34>
  405680:	9807      	ldr	r0, [sp, #28]
  405682:	06de      	lsls	r6, r3, #27
  405684:	4601      	mov	r1, r0
  405686:	f100 8270 	bmi.w	405b6a <_vfiprintf_r+0xa4e>
  40568a:	065d      	lsls	r5, r3, #25
  40568c:	f140 826d 	bpl.w	405b6a <_vfiprintf_r+0xa4e>
  405690:	3104      	adds	r1, #4
  405692:	8806      	ldrh	r6, [r0, #0]
  405694:	9107      	str	r1, [sp, #28]
  405696:	2700      	movs	r7, #0
  405698:	07d8      	lsls	r0, r3, #31
  40569a:	f140 8222 	bpl.w	405ae2 <_vfiprintf_r+0x9c6>
  40569e:	ea56 0107 	orrs.w	r1, r6, r7
  4056a2:	f000 821e 	beq.w	405ae2 <_vfiprintf_r+0x9c6>
  4056a6:	2130      	movs	r1, #48	; 0x30
  4056a8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4056ac:	f043 0302 	orr.w	r3, r3, #2
  4056b0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4056b4:	2202      	movs	r2, #2
  4056b6:	e664      	b.n	405382 <_vfiprintf_r+0x266>
  4056b8:	9608      	str	r6, [sp, #32]
  4056ba:	2800      	cmp	r0, #0
  4056bc:	f040 836b 	bne.w	405d96 <_vfiprintf_r+0xc7a>
  4056c0:	4917      	ldr	r1, [pc, #92]	; (405720 <_vfiprintf_r+0x604>)
  4056c2:	910b      	str	r1, [sp, #44]	; 0x2c
  4056c4:	e7d9      	b.n	40567a <_vfiprintf_r+0x55e>
  4056c6:	9907      	ldr	r1, [sp, #28]
  4056c8:	9608      	str	r6, [sp, #32]
  4056ca:	680a      	ldr	r2, [r1, #0]
  4056cc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4056d0:	f04f 0000 	mov.w	r0, #0
  4056d4:	460a      	mov	r2, r1
  4056d6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4056da:	3204      	adds	r2, #4
  4056dc:	2001      	movs	r0, #1
  4056de:	9001      	str	r0, [sp, #4]
  4056e0:	9207      	str	r2, [sp, #28]
  4056e2:	9005      	str	r0, [sp, #20]
  4056e4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4056e8:	9302      	str	r3, [sp, #8]
  4056ea:	2400      	movs	r4, #0
  4056ec:	e670      	b.n	4053d0 <_vfiprintf_r+0x2b4>
  4056ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4056f2:	f898 2000 	ldrb.w	r2, [r8]
  4056f6:	e583      	b.n	405200 <_vfiprintf_r+0xe4>
  4056f8:	f898 2000 	ldrb.w	r2, [r8]
  4056fc:	2a6c      	cmp	r2, #108	; 0x6c
  4056fe:	bf03      	ittte	eq
  405700:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  405704:	f043 0320 	orreq.w	r3, r3, #32
  405708:	f108 0801 	addeq.w	r8, r8, #1
  40570c:	f043 0310 	orrne.w	r3, r3, #16
  405710:	e576      	b.n	405200 <_vfiprintf_r+0xe4>
  405712:	bf00      	nop
  405714:	004076e8 	.word	0x004076e8
  405718:	004076f8 	.word	0x004076f8
  40571c:	004076cc 	.word	0x004076cc
  405720:	004076b8 	.word	0x004076b8
  405724:	9907      	ldr	r1, [sp, #28]
  405726:	680e      	ldr	r6, [r1, #0]
  405728:	460a      	mov	r2, r1
  40572a:	2e00      	cmp	r6, #0
  40572c:	f102 0204 	add.w	r2, r2, #4
  405730:	f6ff ae0f 	blt.w	405352 <_vfiprintf_r+0x236>
  405734:	9207      	str	r2, [sp, #28]
  405736:	f898 2000 	ldrb.w	r2, [r8]
  40573a:	e561      	b.n	405200 <_vfiprintf_r+0xe4>
  40573c:	f898 2000 	ldrb.w	r2, [r8]
  405740:	2001      	movs	r0, #1
  405742:	252b      	movs	r5, #43	; 0x2b
  405744:	e55c      	b.n	405200 <_vfiprintf_r+0xe4>
  405746:	9907      	ldr	r1, [sp, #28]
  405748:	9608      	str	r6, [sp, #32]
  40574a:	f8d1 b000 	ldr.w	fp, [r1]
  40574e:	f04f 0200 	mov.w	r2, #0
  405752:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405756:	1d0e      	adds	r6, r1, #4
  405758:	f1bb 0f00 	cmp.w	fp, #0
  40575c:	f000 82e5 	beq.w	405d2a <_vfiprintf_r+0xc0e>
  405760:	1c67      	adds	r7, r4, #1
  405762:	f000 82c4 	beq.w	405cee <_vfiprintf_r+0xbd2>
  405766:	4622      	mov	r2, r4
  405768:	2100      	movs	r1, #0
  40576a:	4658      	mov	r0, fp
  40576c:	9301      	str	r3, [sp, #4]
  40576e:	f001 f91f 	bl	4069b0 <memchr>
  405772:	9b01      	ldr	r3, [sp, #4]
  405774:	2800      	cmp	r0, #0
  405776:	f000 82e5 	beq.w	405d44 <_vfiprintf_r+0xc28>
  40577a:	eba0 020b 	sub.w	r2, r0, fp
  40577e:	9205      	str	r2, [sp, #20]
  405780:	9607      	str	r6, [sp, #28]
  405782:	9302      	str	r3, [sp, #8]
  405784:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405788:	2400      	movs	r4, #0
  40578a:	e619      	b.n	4053c0 <_vfiprintf_r+0x2a4>
  40578c:	f898 2000 	ldrb.w	r2, [r8]
  405790:	2a2a      	cmp	r2, #42	; 0x2a
  405792:	f108 0701 	add.w	r7, r8, #1
  405796:	f000 82e9 	beq.w	405d6c <_vfiprintf_r+0xc50>
  40579a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40579e:	2909      	cmp	r1, #9
  4057a0:	46b8      	mov	r8, r7
  4057a2:	f04f 0400 	mov.w	r4, #0
  4057a6:	f63f ad2d 	bhi.w	405204 <_vfiprintf_r+0xe8>
  4057aa:	f818 2b01 	ldrb.w	r2, [r8], #1
  4057ae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4057b2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4057b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4057ba:	2909      	cmp	r1, #9
  4057bc:	d9f5      	bls.n	4057aa <_vfiprintf_r+0x68e>
  4057be:	e521      	b.n	405204 <_vfiprintf_r+0xe8>
  4057c0:	f043 0320 	orr.w	r3, r3, #32
  4057c4:	f898 2000 	ldrb.w	r2, [r8]
  4057c8:	e51a      	b.n	405200 <_vfiprintf_r+0xe4>
  4057ca:	9608      	str	r6, [sp, #32]
  4057cc:	2800      	cmp	r0, #0
  4057ce:	f040 82db 	bne.w	405d88 <_vfiprintf_r+0xc6c>
  4057d2:	2a00      	cmp	r2, #0
  4057d4:	f000 80e7 	beq.w	4059a6 <_vfiprintf_r+0x88a>
  4057d8:	2101      	movs	r1, #1
  4057da:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4057de:	f04f 0200 	mov.w	r2, #0
  4057e2:	9101      	str	r1, [sp, #4]
  4057e4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4057e8:	9105      	str	r1, [sp, #20]
  4057ea:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4057ee:	e77b      	b.n	4056e8 <_vfiprintf_r+0x5cc>
  4057f0:	9a07      	ldr	r2, [sp, #28]
  4057f2:	6813      	ldr	r3, [r2, #0]
  4057f4:	3204      	adds	r2, #4
  4057f6:	9207      	str	r2, [sp, #28]
  4057f8:	9a03      	ldr	r2, [sp, #12]
  4057fa:	601a      	str	r2, [r3, #0]
  4057fc:	e4cb      	b.n	405196 <_vfiprintf_r+0x7a>
  4057fe:	aa0f      	add	r2, sp, #60	; 0x3c
  405800:	9904      	ldr	r1, [sp, #16]
  405802:	4620      	mov	r0, r4
  405804:	f7ff fc4a 	bl	40509c <__sprint_r.part.0>
  405808:	2800      	cmp	r0, #0
  40580a:	f040 8139 	bne.w	405a80 <_vfiprintf_r+0x964>
  40580e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405810:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405812:	f101 0c01 	add.w	ip, r1, #1
  405816:	46ce      	mov	lr, r9
  405818:	e5ff      	b.n	40541a <_vfiprintf_r+0x2fe>
  40581a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40581c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40581e:	1c48      	adds	r0, r1, #1
  405820:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405824:	2d00      	cmp	r5, #0
  405826:	f43f ae22 	beq.w	40546e <_vfiprintf_r+0x352>
  40582a:	3201      	adds	r2, #1
  40582c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  405830:	2101      	movs	r1, #1
  405832:	2807      	cmp	r0, #7
  405834:	9211      	str	r2, [sp, #68]	; 0x44
  405836:	9010      	str	r0, [sp, #64]	; 0x40
  405838:	f8ca 5000 	str.w	r5, [sl]
  40583c:	f8ca 1004 	str.w	r1, [sl, #4]
  405840:	f340 8108 	ble.w	405a54 <_vfiprintf_r+0x938>
  405844:	2a00      	cmp	r2, #0
  405846:	f040 81bc 	bne.w	405bc2 <_vfiprintf_r+0xaa6>
  40584a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40584c:	2b00      	cmp	r3, #0
  40584e:	f43f ae1f 	beq.w	405490 <_vfiprintf_r+0x374>
  405852:	ab0e      	add	r3, sp, #56	; 0x38
  405854:	2202      	movs	r2, #2
  405856:	4608      	mov	r0, r1
  405858:	931c      	str	r3, [sp, #112]	; 0x70
  40585a:	921d      	str	r2, [sp, #116]	; 0x74
  40585c:	46ca      	mov	sl, r9
  40585e:	4601      	mov	r1, r0
  405860:	f10a 0a08 	add.w	sl, sl, #8
  405864:	3001      	adds	r0, #1
  405866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405868:	2b80      	cmp	r3, #128	; 0x80
  40586a:	f43f ae19 	beq.w	4054a0 <_vfiprintf_r+0x384>
  40586e:	9b05      	ldr	r3, [sp, #20]
  405870:	1ae4      	subs	r4, r4, r3
  405872:	2c00      	cmp	r4, #0
  405874:	dd2e      	ble.n	4058d4 <_vfiprintf_r+0x7b8>
  405876:	2c10      	cmp	r4, #16
  405878:	4db3      	ldr	r5, [pc, #716]	; (405b48 <_vfiprintf_r+0xa2c>)
  40587a:	dd1e      	ble.n	4058ba <_vfiprintf_r+0x79e>
  40587c:	46d6      	mov	lr, sl
  40587e:	2610      	movs	r6, #16
  405880:	9f06      	ldr	r7, [sp, #24]
  405882:	f8dd a010 	ldr.w	sl, [sp, #16]
  405886:	e006      	b.n	405896 <_vfiprintf_r+0x77a>
  405888:	1c88      	adds	r0, r1, #2
  40588a:	f10e 0e08 	add.w	lr, lr, #8
  40588e:	4619      	mov	r1, r3
  405890:	3c10      	subs	r4, #16
  405892:	2c10      	cmp	r4, #16
  405894:	dd10      	ble.n	4058b8 <_vfiprintf_r+0x79c>
  405896:	1c4b      	adds	r3, r1, #1
  405898:	3210      	adds	r2, #16
  40589a:	2b07      	cmp	r3, #7
  40589c:	9211      	str	r2, [sp, #68]	; 0x44
  40589e:	e88e 0060 	stmia.w	lr, {r5, r6}
  4058a2:	9310      	str	r3, [sp, #64]	; 0x40
  4058a4:	ddf0      	ble.n	405888 <_vfiprintf_r+0x76c>
  4058a6:	2a00      	cmp	r2, #0
  4058a8:	d165      	bne.n	405976 <_vfiprintf_r+0x85a>
  4058aa:	3c10      	subs	r4, #16
  4058ac:	2c10      	cmp	r4, #16
  4058ae:	f04f 0001 	mov.w	r0, #1
  4058b2:	4611      	mov	r1, r2
  4058b4:	46ce      	mov	lr, r9
  4058b6:	dcee      	bgt.n	405896 <_vfiprintf_r+0x77a>
  4058b8:	46f2      	mov	sl, lr
  4058ba:	4422      	add	r2, r4
  4058bc:	2807      	cmp	r0, #7
  4058be:	9211      	str	r2, [sp, #68]	; 0x44
  4058c0:	f8ca 5000 	str.w	r5, [sl]
  4058c4:	f8ca 4004 	str.w	r4, [sl, #4]
  4058c8:	9010      	str	r0, [sp, #64]	; 0x40
  4058ca:	f300 8085 	bgt.w	4059d8 <_vfiprintf_r+0x8bc>
  4058ce:	f10a 0a08 	add.w	sl, sl, #8
  4058d2:	3001      	adds	r0, #1
  4058d4:	9905      	ldr	r1, [sp, #20]
  4058d6:	f8ca b000 	str.w	fp, [sl]
  4058da:	440a      	add	r2, r1
  4058dc:	2807      	cmp	r0, #7
  4058de:	9211      	str	r2, [sp, #68]	; 0x44
  4058e0:	f8ca 1004 	str.w	r1, [sl, #4]
  4058e4:	9010      	str	r0, [sp, #64]	; 0x40
  4058e6:	f340 8082 	ble.w	4059ee <_vfiprintf_r+0x8d2>
  4058ea:	2a00      	cmp	r2, #0
  4058ec:	f040 8118 	bne.w	405b20 <_vfiprintf_r+0xa04>
  4058f0:	9b02      	ldr	r3, [sp, #8]
  4058f2:	9210      	str	r2, [sp, #64]	; 0x40
  4058f4:	0758      	lsls	r0, r3, #29
  4058f6:	d535      	bpl.n	405964 <_vfiprintf_r+0x848>
  4058f8:	9b08      	ldr	r3, [sp, #32]
  4058fa:	9901      	ldr	r1, [sp, #4]
  4058fc:	1a5c      	subs	r4, r3, r1
  4058fe:	2c00      	cmp	r4, #0
  405900:	f340 80e7 	ble.w	405ad2 <_vfiprintf_r+0x9b6>
  405904:	46ca      	mov	sl, r9
  405906:	2c10      	cmp	r4, #16
  405908:	f340 8218 	ble.w	405d3c <_vfiprintf_r+0xc20>
  40590c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40590e:	4e8f      	ldr	r6, [pc, #572]	; (405b4c <_vfiprintf_r+0xa30>)
  405910:	9f06      	ldr	r7, [sp, #24]
  405912:	f8dd b010 	ldr.w	fp, [sp, #16]
  405916:	2510      	movs	r5, #16
  405918:	e006      	b.n	405928 <_vfiprintf_r+0x80c>
  40591a:	1c88      	adds	r0, r1, #2
  40591c:	f10a 0a08 	add.w	sl, sl, #8
  405920:	4619      	mov	r1, r3
  405922:	3c10      	subs	r4, #16
  405924:	2c10      	cmp	r4, #16
  405926:	dd11      	ble.n	40594c <_vfiprintf_r+0x830>
  405928:	1c4b      	adds	r3, r1, #1
  40592a:	3210      	adds	r2, #16
  40592c:	2b07      	cmp	r3, #7
  40592e:	9211      	str	r2, [sp, #68]	; 0x44
  405930:	f8ca 6000 	str.w	r6, [sl]
  405934:	f8ca 5004 	str.w	r5, [sl, #4]
  405938:	9310      	str	r3, [sp, #64]	; 0x40
  40593a:	ddee      	ble.n	40591a <_vfiprintf_r+0x7fe>
  40593c:	bb42      	cbnz	r2, 405990 <_vfiprintf_r+0x874>
  40593e:	3c10      	subs	r4, #16
  405940:	2c10      	cmp	r4, #16
  405942:	f04f 0001 	mov.w	r0, #1
  405946:	4611      	mov	r1, r2
  405948:	46ca      	mov	sl, r9
  40594a:	dced      	bgt.n	405928 <_vfiprintf_r+0x80c>
  40594c:	4422      	add	r2, r4
  40594e:	2807      	cmp	r0, #7
  405950:	9211      	str	r2, [sp, #68]	; 0x44
  405952:	f8ca 6000 	str.w	r6, [sl]
  405956:	f8ca 4004 	str.w	r4, [sl, #4]
  40595a:	9010      	str	r0, [sp, #64]	; 0x40
  40595c:	dd51      	ble.n	405a02 <_vfiprintf_r+0x8e6>
  40595e:	2a00      	cmp	r2, #0
  405960:	f040 819b 	bne.w	405c9a <_vfiprintf_r+0xb7e>
  405964:	9b03      	ldr	r3, [sp, #12]
  405966:	9a08      	ldr	r2, [sp, #32]
  405968:	9901      	ldr	r1, [sp, #4]
  40596a:	428a      	cmp	r2, r1
  40596c:	bfac      	ite	ge
  40596e:	189b      	addge	r3, r3, r2
  405970:	185b      	addlt	r3, r3, r1
  405972:	9303      	str	r3, [sp, #12]
  405974:	e04e      	b.n	405a14 <_vfiprintf_r+0x8f8>
  405976:	aa0f      	add	r2, sp, #60	; 0x3c
  405978:	4651      	mov	r1, sl
  40597a:	4638      	mov	r0, r7
  40597c:	f7ff fb8e 	bl	40509c <__sprint_r.part.0>
  405980:	2800      	cmp	r0, #0
  405982:	f040 813f 	bne.w	405c04 <_vfiprintf_r+0xae8>
  405986:	9910      	ldr	r1, [sp, #64]	; 0x40
  405988:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40598a:	1c48      	adds	r0, r1, #1
  40598c:	46ce      	mov	lr, r9
  40598e:	e77f      	b.n	405890 <_vfiprintf_r+0x774>
  405990:	aa0f      	add	r2, sp, #60	; 0x3c
  405992:	4659      	mov	r1, fp
  405994:	4638      	mov	r0, r7
  405996:	f7ff fb81 	bl	40509c <__sprint_r.part.0>
  40599a:	b960      	cbnz	r0, 4059b6 <_vfiprintf_r+0x89a>
  40599c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40599e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4059a0:	1c48      	adds	r0, r1, #1
  4059a2:	46ca      	mov	sl, r9
  4059a4:	e7bd      	b.n	405922 <_vfiprintf_r+0x806>
  4059a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4059a8:	f8dd b010 	ldr.w	fp, [sp, #16]
  4059ac:	2b00      	cmp	r3, #0
  4059ae:	f040 81d4 	bne.w	405d5a <_vfiprintf_r+0xc3e>
  4059b2:	2300      	movs	r3, #0
  4059b4:	9310      	str	r3, [sp, #64]	; 0x40
  4059b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4059ba:	f013 0f01 	tst.w	r3, #1
  4059be:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4059c2:	d102      	bne.n	4059ca <_vfiprintf_r+0x8ae>
  4059c4:	059a      	lsls	r2, r3, #22
  4059c6:	f140 80de 	bpl.w	405b86 <_vfiprintf_r+0xa6a>
  4059ca:	065b      	lsls	r3, r3, #25
  4059cc:	f53f acb2 	bmi.w	405334 <_vfiprintf_r+0x218>
  4059d0:	9803      	ldr	r0, [sp, #12]
  4059d2:	b02d      	add	sp, #180	; 0xb4
  4059d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059d8:	2a00      	cmp	r2, #0
  4059da:	f040 8106 	bne.w	405bea <_vfiprintf_r+0xace>
  4059de:	9a05      	ldr	r2, [sp, #20]
  4059e0:	921d      	str	r2, [sp, #116]	; 0x74
  4059e2:	2301      	movs	r3, #1
  4059e4:	9211      	str	r2, [sp, #68]	; 0x44
  4059e6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4059ea:	9310      	str	r3, [sp, #64]	; 0x40
  4059ec:	46ca      	mov	sl, r9
  4059ee:	f10a 0a08 	add.w	sl, sl, #8
  4059f2:	9b02      	ldr	r3, [sp, #8]
  4059f4:	0759      	lsls	r1, r3, #29
  4059f6:	d504      	bpl.n	405a02 <_vfiprintf_r+0x8e6>
  4059f8:	9b08      	ldr	r3, [sp, #32]
  4059fa:	9901      	ldr	r1, [sp, #4]
  4059fc:	1a5c      	subs	r4, r3, r1
  4059fe:	2c00      	cmp	r4, #0
  405a00:	dc81      	bgt.n	405906 <_vfiprintf_r+0x7ea>
  405a02:	9b03      	ldr	r3, [sp, #12]
  405a04:	9908      	ldr	r1, [sp, #32]
  405a06:	9801      	ldr	r0, [sp, #4]
  405a08:	4281      	cmp	r1, r0
  405a0a:	bfac      	ite	ge
  405a0c:	185b      	addge	r3, r3, r1
  405a0e:	181b      	addlt	r3, r3, r0
  405a10:	9303      	str	r3, [sp, #12]
  405a12:	bb72      	cbnz	r2, 405a72 <_vfiprintf_r+0x956>
  405a14:	2300      	movs	r3, #0
  405a16:	9310      	str	r3, [sp, #64]	; 0x40
  405a18:	46ca      	mov	sl, r9
  405a1a:	f7ff bbbc 	b.w	405196 <_vfiprintf_r+0x7a>
  405a1e:	aa0f      	add	r2, sp, #60	; 0x3c
  405a20:	9904      	ldr	r1, [sp, #16]
  405a22:	4620      	mov	r0, r4
  405a24:	f7ff fb3a 	bl	40509c <__sprint_r.part.0>
  405a28:	bb50      	cbnz	r0, 405a80 <_vfiprintf_r+0x964>
  405a2a:	9910      	ldr	r1, [sp, #64]	; 0x40
  405a2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405a2e:	f101 0e01 	add.w	lr, r1, #1
  405a32:	46cc      	mov	ip, r9
  405a34:	e548      	b.n	4054c8 <_vfiprintf_r+0x3ac>
  405a36:	2a00      	cmp	r2, #0
  405a38:	f040 8140 	bne.w	405cbc <_vfiprintf_r+0xba0>
  405a3c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  405a40:	2900      	cmp	r1, #0
  405a42:	f000 811b 	beq.w	405c7c <_vfiprintf_r+0xb60>
  405a46:	2201      	movs	r2, #1
  405a48:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  405a4c:	4610      	mov	r0, r2
  405a4e:	921d      	str	r2, [sp, #116]	; 0x74
  405a50:	911c      	str	r1, [sp, #112]	; 0x70
  405a52:	46ca      	mov	sl, r9
  405a54:	4601      	mov	r1, r0
  405a56:	f10a 0a08 	add.w	sl, sl, #8
  405a5a:	3001      	adds	r0, #1
  405a5c:	e507      	b.n	40546e <_vfiprintf_r+0x352>
  405a5e:	9b02      	ldr	r3, [sp, #8]
  405a60:	2a01      	cmp	r2, #1
  405a62:	f000 8098 	beq.w	405b96 <_vfiprintf_r+0xa7a>
  405a66:	2a02      	cmp	r2, #2
  405a68:	d10d      	bne.n	405a86 <_vfiprintf_r+0x96a>
  405a6a:	9302      	str	r3, [sp, #8]
  405a6c:	2600      	movs	r6, #0
  405a6e:	2700      	movs	r7, #0
  405a70:	e5b0      	b.n	4055d4 <_vfiprintf_r+0x4b8>
  405a72:	aa0f      	add	r2, sp, #60	; 0x3c
  405a74:	9904      	ldr	r1, [sp, #16]
  405a76:	9806      	ldr	r0, [sp, #24]
  405a78:	f7ff fb10 	bl	40509c <__sprint_r.part.0>
  405a7c:	2800      	cmp	r0, #0
  405a7e:	d0c9      	beq.n	405a14 <_vfiprintf_r+0x8f8>
  405a80:	f8dd b010 	ldr.w	fp, [sp, #16]
  405a84:	e797      	b.n	4059b6 <_vfiprintf_r+0x89a>
  405a86:	9302      	str	r3, [sp, #8]
  405a88:	2600      	movs	r6, #0
  405a8a:	2700      	movs	r7, #0
  405a8c:	4649      	mov	r1, r9
  405a8e:	e000      	b.n	405a92 <_vfiprintf_r+0x976>
  405a90:	4659      	mov	r1, fp
  405a92:	08f2      	lsrs	r2, r6, #3
  405a94:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  405a98:	08f8      	lsrs	r0, r7, #3
  405a9a:	f006 0307 	and.w	r3, r6, #7
  405a9e:	4607      	mov	r7, r0
  405aa0:	4616      	mov	r6, r2
  405aa2:	3330      	adds	r3, #48	; 0x30
  405aa4:	ea56 0207 	orrs.w	r2, r6, r7
  405aa8:	f801 3c01 	strb.w	r3, [r1, #-1]
  405aac:	f101 3bff 	add.w	fp, r1, #4294967295
  405ab0:	d1ee      	bne.n	405a90 <_vfiprintf_r+0x974>
  405ab2:	9a02      	ldr	r2, [sp, #8]
  405ab4:	07d6      	lsls	r6, r2, #31
  405ab6:	f57f ad9d 	bpl.w	4055f4 <_vfiprintf_r+0x4d8>
  405aba:	2b30      	cmp	r3, #48	; 0x30
  405abc:	f43f ad9a 	beq.w	4055f4 <_vfiprintf_r+0x4d8>
  405ac0:	3902      	subs	r1, #2
  405ac2:	2330      	movs	r3, #48	; 0x30
  405ac4:	f80b 3c01 	strb.w	r3, [fp, #-1]
  405ac8:	eba9 0301 	sub.w	r3, r9, r1
  405acc:	9305      	str	r3, [sp, #20]
  405ace:	468b      	mov	fp, r1
  405ad0:	e476      	b.n	4053c0 <_vfiprintf_r+0x2a4>
  405ad2:	9b03      	ldr	r3, [sp, #12]
  405ad4:	9a08      	ldr	r2, [sp, #32]
  405ad6:	428a      	cmp	r2, r1
  405ad8:	bfac      	ite	ge
  405ada:	189b      	addge	r3, r3, r2
  405adc:	185b      	addlt	r3, r3, r1
  405ade:	9303      	str	r3, [sp, #12]
  405ae0:	e798      	b.n	405a14 <_vfiprintf_r+0x8f8>
  405ae2:	2202      	movs	r2, #2
  405ae4:	e44d      	b.n	405382 <_vfiprintf_r+0x266>
  405ae6:	2f00      	cmp	r7, #0
  405ae8:	bf08      	it	eq
  405aea:	2e0a      	cmpeq	r6, #10
  405aec:	d352      	bcc.n	405b94 <_vfiprintf_r+0xa78>
  405aee:	46cb      	mov	fp, r9
  405af0:	4630      	mov	r0, r6
  405af2:	4639      	mov	r1, r7
  405af4:	220a      	movs	r2, #10
  405af6:	2300      	movs	r3, #0
  405af8:	f001 fbc6 	bl	407288 <__aeabi_uldivmod>
  405afc:	3230      	adds	r2, #48	; 0x30
  405afe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  405b02:	4630      	mov	r0, r6
  405b04:	4639      	mov	r1, r7
  405b06:	2300      	movs	r3, #0
  405b08:	220a      	movs	r2, #10
  405b0a:	f001 fbbd 	bl	407288 <__aeabi_uldivmod>
  405b0e:	4606      	mov	r6, r0
  405b10:	460f      	mov	r7, r1
  405b12:	ea56 0307 	orrs.w	r3, r6, r7
  405b16:	d1eb      	bne.n	405af0 <_vfiprintf_r+0x9d4>
  405b18:	e56c      	b.n	4055f4 <_vfiprintf_r+0x4d8>
  405b1a:	9405      	str	r4, [sp, #20]
  405b1c:	46cb      	mov	fp, r9
  405b1e:	e44f      	b.n	4053c0 <_vfiprintf_r+0x2a4>
  405b20:	aa0f      	add	r2, sp, #60	; 0x3c
  405b22:	9904      	ldr	r1, [sp, #16]
  405b24:	9806      	ldr	r0, [sp, #24]
  405b26:	f7ff fab9 	bl	40509c <__sprint_r.part.0>
  405b2a:	2800      	cmp	r0, #0
  405b2c:	d1a8      	bne.n	405a80 <_vfiprintf_r+0x964>
  405b2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405b30:	46ca      	mov	sl, r9
  405b32:	e75e      	b.n	4059f2 <_vfiprintf_r+0x8d6>
  405b34:	aa0f      	add	r2, sp, #60	; 0x3c
  405b36:	9904      	ldr	r1, [sp, #16]
  405b38:	9806      	ldr	r0, [sp, #24]
  405b3a:	f7ff faaf 	bl	40509c <__sprint_r.part.0>
  405b3e:	2800      	cmp	r0, #0
  405b40:	d19e      	bne.n	405a80 <_vfiprintf_r+0x964>
  405b42:	46ca      	mov	sl, r9
  405b44:	f7ff bbc0 	b.w	4052c8 <_vfiprintf_r+0x1ac>
  405b48:	004076f8 	.word	0x004076f8
  405b4c:	004076e8 	.word	0x004076e8
  405b50:	3104      	adds	r1, #4
  405b52:	6816      	ldr	r6, [r2, #0]
  405b54:	9107      	str	r1, [sp, #28]
  405b56:	2201      	movs	r2, #1
  405b58:	2700      	movs	r7, #0
  405b5a:	e412      	b.n	405382 <_vfiprintf_r+0x266>
  405b5c:	9807      	ldr	r0, [sp, #28]
  405b5e:	4601      	mov	r1, r0
  405b60:	3104      	adds	r1, #4
  405b62:	6806      	ldr	r6, [r0, #0]
  405b64:	9107      	str	r1, [sp, #28]
  405b66:	2700      	movs	r7, #0
  405b68:	e40b      	b.n	405382 <_vfiprintf_r+0x266>
  405b6a:	680e      	ldr	r6, [r1, #0]
  405b6c:	3104      	adds	r1, #4
  405b6e:	9107      	str	r1, [sp, #28]
  405b70:	2700      	movs	r7, #0
  405b72:	e591      	b.n	405698 <_vfiprintf_r+0x57c>
  405b74:	9907      	ldr	r1, [sp, #28]
  405b76:	680e      	ldr	r6, [r1, #0]
  405b78:	460a      	mov	r2, r1
  405b7a:	17f7      	asrs	r7, r6, #31
  405b7c:	3204      	adds	r2, #4
  405b7e:	9207      	str	r2, [sp, #28]
  405b80:	4630      	mov	r0, r6
  405b82:	4639      	mov	r1, r7
  405b84:	e50f      	b.n	4055a6 <_vfiprintf_r+0x48a>
  405b86:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405b8a:	f000 fe7f 	bl	40688c <__retarget_lock_release_recursive>
  405b8e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405b92:	e71a      	b.n	4059ca <_vfiprintf_r+0x8ae>
  405b94:	9b02      	ldr	r3, [sp, #8]
  405b96:	9302      	str	r3, [sp, #8]
  405b98:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405b9c:	3630      	adds	r6, #48	; 0x30
  405b9e:	2301      	movs	r3, #1
  405ba0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  405ba4:	9305      	str	r3, [sp, #20]
  405ba6:	e40b      	b.n	4053c0 <_vfiprintf_r+0x2a4>
  405ba8:	aa0f      	add	r2, sp, #60	; 0x3c
  405baa:	9904      	ldr	r1, [sp, #16]
  405bac:	9806      	ldr	r0, [sp, #24]
  405bae:	f7ff fa75 	bl	40509c <__sprint_r.part.0>
  405bb2:	2800      	cmp	r0, #0
  405bb4:	f47f af64 	bne.w	405a80 <_vfiprintf_r+0x964>
  405bb8:	9910      	ldr	r1, [sp, #64]	; 0x40
  405bba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405bbc:	1c48      	adds	r0, r1, #1
  405bbe:	46ca      	mov	sl, r9
  405bc0:	e651      	b.n	405866 <_vfiprintf_r+0x74a>
  405bc2:	aa0f      	add	r2, sp, #60	; 0x3c
  405bc4:	9904      	ldr	r1, [sp, #16]
  405bc6:	9806      	ldr	r0, [sp, #24]
  405bc8:	f7ff fa68 	bl	40509c <__sprint_r.part.0>
  405bcc:	2800      	cmp	r0, #0
  405bce:	f47f af57 	bne.w	405a80 <_vfiprintf_r+0x964>
  405bd2:	9910      	ldr	r1, [sp, #64]	; 0x40
  405bd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405bd6:	1c48      	adds	r0, r1, #1
  405bd8:	46ca      	mov	sl, r9
  405bda:	e448      	b.n	40546e <_vfiprintf_r+0x352>
  405bdc:	2a00      	cmp	r2, #0
  405bde:	f040 8091 	bne.w	405d04 <_vfiprintf_r+0xbe8>
  405be2:	2001      	movs	r0, #1
  405be4:	4611      	mov	r1, r2
  405be6:	46ca      	mov	sl, r9
  405be8:	e641      	b.n	40586e <_vfiprintf_r+0x752>
  405bea:	aa0f      	add	r2, sp, #60	; 0x3c
  405bec:	9904      	ldr	r1, [sp, #16]
  405bee:	9806      	ldr	r0, [sp, #24]
  405bf0:	f7ff fa54 	bl	40509c <__sprint_r.part.0>
  405bf4:	2800      	cmp	r0, #0
  405bf6:	f47f af43 	bne.w	405a80 <_vfiprintf_r+0x964>
  405bfa:	9810      	ldr	r0, [sp, #64]	; 0x40
  405bfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405bfe:	3001      	adds	r0, #1
  405c00:	46ca      	mov	sl, r9
  405c02:	e667      	b.n	4058d4 <_vfiprintf_r+0x7b8>
  405c04:	46d3      	mov	fp, sl
  405c06:	e6d6      	b.n	4059b6 <_vfiprintf_r+0x89a>
  405c08:	9e07      	ldr	r6, [sp, #28]
  405c0a:	3607      	adds	r6, #7
  405c0c:	f026 0207 	bic.w	r2, r6, #7
  405c10:	f102 0108 	add.w	r1, r2, #8
  405c14:	e9d2 6700 	ldrd	r6, r7, [r2]
  405c18:	9107      	str	r1, [sp, #28]
  405c1a:	2201      	movs	r2, #1
  405c1c:	f7ff bbb1 	b.w	405382 <_vfiprintf_r+0x266>
  405c20:	9e07      	ldr	r6, [sp, #28]
  405c22:	3607      	adds	r6, #7
  405c24:	f026 0607 	bic.w	r6, r6, #7
  405c28:	e9d6 0100 	ldrd	r0, r1, [r6]
  405c2c:	f106 0208 	add.w	r2, r6, #8
  405c30:	9207      	str	r2, [sp, #28]
  405c32:	4606      	mov	r6, r0
  405c34:	460f      	mov	r7, r1
  405c36:	e4b6      	b.n	4055a6 <_vfiprintf_r+0x48a>
  405c38:	9e07      	ldr	r6, [sp, #28]
  405c3a:	3607      	adds	r6, #7
  405c3c:	f026 0207 	bic.w	r2, r6, #7
  405c40:	f102 0108 	add.w	r1, r2, #8
  405c44:	e9d2 6700 	ldrd	r6, r7, [r2]
  405c48:	9107      	str	r1, [sp, #28]
  405c4a:	2200      	movs	r2, #0
  405c4c:	f7ff bb99 	b.w	405382 <_vfiprintf_r+0x266>
  405c50:	9e07      	ldr	r6, [sp, #28]
  405c52:	3607      	adds	r6, #7
  405c54:	f026 0107 	bic.w	r1, r6, #7
  405c58:	f101 0008 	add.w	r0, r1, #8
  405c5c:	9007      	str	r0, [sp, #28]
  405c5e:	e9d1 6700 	ldrd	r6, r7, [r1]
  405c62:	e519      	b.n	405698 <_vfiprintf_r+0x57c>
  405c64:	46cb      	mov	fp, r9
  405c66:	f7ff bbab 	b.w	4053c0 <_vfiprintf_r+0x2a4>
  405c6a:	252d      	movs	r5, #45	; 0x2d
  405c6c:	4276      	negs	r6, r6
  405c6e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  405c72:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405c76:	2201      	movs	r2, #1
  405c78:	f7ff bb88 	b.w	40538c <_vfiprintf_r+0x270>
  405c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405c7e:	b9b3      	cbnz	r3, 405cae <_vfiprintf_r+0xb92>
  405c80:	4611      	mov	r1, r2
  405c82:	2001      	movs	r0, #1
  405c84:	46ca      	mov	sl, r9
  405c86:	e5f2      	b.n	40586e <_vfiprintf_r+0x752>
  405c88:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405c8c:	f000 fdfe 	bl	40688c <__retarget_lock_release_recursive>
  405c90:	f04f 33ff 	mov.w	r3, #4294967295
  405c94:	9303      	str	r3, [sp, #12]
  405c96:	f7ff bb50 	b.w	40533a <_vfiprintf_r+0x21e>
  405c9a:	aa0f      	add	r2, sp, #60	; 0x3c
  405c9c:	9904      	ldr	r1, [sp, #16]
  405c9e:	9806      	ldr	r0, [sp, #24]
  405ca0:	f7ff f9fc 	bl	40509c <__sprint_r.part.0>
  405ca4:	2800      	cmp	r0, #0
  405ca6:	f47f aeeb 	bne.w	405a80 <_vfiprintf_r+0x964>
  405caa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405cac:	e6a9      	b.n	405a02 <_vfiprintf_r+0x8e6>
  405cae:	ab0e      	add	r3, sp, #56	; 0x38
  405cb0:	2202      	movs	r2, #2
  405cb2:	931c      	str	r3, [sp, #112]	; 0x70
  405cb4:	921d      	str	r2, [sp, #116]	; 0x74
  405cb6:	2001      	movs	r0, #1
  405cb8:	46ca      	mov	sl, r9
  405cba:	e5d0      	b.n	40585e <_vfiprintf_r+0x742>
  405cbc:	aa0f      	add	r2, sp, #60	; 0x3c
  405cbe:	9904      	ldr	r1, [sp, #16]
  405cc0:	9806      	ldr	r0, [sp, #24]
  405cc2:	f7ff f9eb 	bl	40509c <__sprint_r.part.0>
  405cc6:	2800      	cmp	r0, #0
  405cc8:	f47f aeda 	bne.w	405a80 <_vfiprintf_r+0x964>
  405ccc:	9910      	ldr	r1, [sp, #64]	; 0x40
  405cce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405cd0:	1c48      	adds	r0, r1, #1
  405cd2:	46ca      	mov	sl, r9
  405cd4:	e5a4      	b.n	405820 <_vfiprintf_r+0x704>
  405cd6:	9a07      	ldr	r2, [sp, #28]
  405cd8:	9903      	ldr	r1, [sp, #12]
  405cda:	6813      	ldr	r3, [r2, #0]
  405cdc:	17cd      	asrs	r5, r1, #31
  405cde:	4608      	mov	r0, r1
  405ce0:	3204      	adds	r2, #4
  405ce2:	4629      	mov	r1, r5
  405ce4:	9207      	str	r2, [sp, #28]
  405ce6:	e9c3 0100 	strd	r0, r1, [r3]
  405cea:	f7ff ba54 	b.w	405196 <_vfiprintf_r+0x7a>
  405cee:	4658      	mov	r0, fp
  405cf0:	9607      	str	r6, [sp, #28]
  405cf2:	9302      	str	r3, [sp, #8]
  405cf4:	f7ff f964 	bl	404fc0 <strlen>
  405cf8:	2400      	movs	r4, #0
  405cfa:	9005      	str	r0, [sp, #20]
  405cfc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405d00:	f7ff bb5e 	b.w	4053c0 <_vfiprintf_r+0x2a4>
  405d04:	aa0f      	add	r2, sp, #60	; 0x3c
  405d06:	9904      	ldr	r1, [sp, #16]
  405d08:	9806      	ldr	r0, [sp, #24]
  405d0a:	f7ff f9c7 	bl	40509c <__sprint_r.part.0>
  405d0e:	2800      	cmp	r0, #0
  405d10:	f47f aeb6 	bne.w	405a80 <_vfiprintf_r+0x964>
  405d14:	9910      	ldr	r1, [sp, #64]	; 0x40
  405d16:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405d18:	1c48      	adds	r0, r1, #1
  405d1a:	46ca      	mov	sl, r9
  405d1c:	e5a7      	b.n	40586e <_vfiprintf_r+0x752>
  405d1e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405d20:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405d22:	4e20      	ldr	r6, [pc, #128]	; (405da4 <_vfiprintf_r+0xc88>)
  405d24:	3101      	adds	r1, #1
  405d26:	f7ff bb90 	b.w	40544a <_vfiprintf_r+0x32e>
  405d2a:	2c06      	cmp	r4, #6
  405d2c:	bf28      	it	cs
  405d2e:	2406      	movcs	r4, #6
  405d30:	9405      	str	r4, [sp, #20]
  405d32:	9607      	str	r6, [sp, #28]
  405d34:	9401      	str	r4, [sp, #4]
  405d36:	f8df b070 	ldr.w	fp, [pc, #112]	; 405da8 <_vfiprintf_r+0xc8c>
  405d3a:	e4d5      	b.n	4056e8 <_vfiprintf_r+0x5cc>
  405d3c:	9810      	ldr	r0, [sp, #64]	; 0x40
  405d3e:	4e19      	ldr	r6, [pc, #100]	; (405da4 <_vfiprintf_r+0xc88>)
  405d40:	3001      	adds	r0, #1
  405d42:	e603      	b.n	40594c <_vfiprintf_r+0x830>
  405d44:	9405      	str	r4, [sp, #20]
  405d46:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405d4a:	9607      	str	r6, [sp, #28]
  405d4c:	9302      	str	r3, [sp, #8]
  405d4e:	4604      	mov	r4, r0
  405d50:	f7ff bb36 	b.w	4053c0 <_vfiprintf_r+0x2a4>
  405d54:	4686      	mov	lr, r0
  405d56:	f7ff bbce 	b.w	4054f6 <_vfiprintf_r+0x3da>
  405d5a:	9806      	ldr	r0, [sp, #24]
  405d5c:	aa0f      	add	r2, sp, #60	; 0x3c
  405d5e:	4659      	mov	r1, fp
  405d60:	f7ff f99c 	bl	40509c <__sprint_r.part.0>
  405d64:	2800      	cmp	r0, #0
  405d66:	f43f ae24 	beq.w	4059b2 <_vfiprintf_r+0x896>
  405d6a:	e624      	b.n	4059b6 <_vfiprintf_r+0x89a>
  405d6c:	9907      	ldr	r1, [sp, #28]
  405d6e:	f898 2001 	ldrb.w	r2, [r8, #1]
  405d72:	680c      	ldr	r4, [r1, #0]
  405d74:	3104      	adds	r1, #4
  405d76:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  405d7a:	46b8      	mov	r8, r7
  405d7c:	9107      	str	r1, [sp, #28]
  405d7e:	f7ff ba3f 	b.w	405200 <_vfiprintf_r+0xe4>
  405d82:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405d86:	e43c      	b.n	405602 <_vfiprintf_r+0x4e6>
  405d88:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405d8c:	e521      	b.n	4057d2 <_vfiprintf_r+0x6b6>
  405d8e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405d92:	f7ff bbf4 	b.w	40557e <_vfiprintf_r+0x462>
  405d96:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405d9a:	e491      	b.n	4056c0 <_vfiprintf_r+0x5a4>
  405d9c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405da0:	e469      	b.n	405676 <_vfiprintf_r+0x55a>
  405da2:	bf00      	nop
  405da4:	004076e8 	.word	0x004076e8
  405da8:	004076e0 	.word	0x004076e0

00405dac <__sbprintf>:
  405dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405db0:	460c      	mov	r4, r1
  405db2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405db6:	8989      	ldrh	r1, [r1, #12]
  405db8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405dba:	89e5      	ldrh	r5, [r4, #14]
  405dbc:	9619      	str	r6, [sp, #100]	; 0x64
  405dbe:	f021 0102 	bic.w	r1, r1, #2
  405dc2:	4606      	mov	r6, r0
  405dc4:	69e0      	ldr	r0, [r4, #28]
  405dc6:	f8ad 100c 	strh.w	r1, [sp, #12]
  405dca:	4617      	mov	r7, r2
  405dcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405dd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405dd2:	f8ad 500e 	strh.w	r5, [sp, #14]
  405dd6:	4698      	mov	r8, r3
  405dd8:	ad1a      	add	r5, sp, #104	; 0x68
  405dda:	2300      	movs	r3, #0
  405ddc:	9007      	str	r0, [sp, #28]
  405dde:	a816      	add	r0, sp, #88	; 0x58
  405de0:	9209      	str	r2, [sp, #36]	; 0x24
  405de2:	9306      	str	r3, [sp, #24]
  405de4:	9500      	str	r5, [sp, #0]
  405de6:	9504      	str	r5, [sp, #16]
  405de8:	9102      	str	r1, [sp, #8]
  405dea:	9105      	str	r1, [sp, #20]
  405dec:	f000 fd48 	bl	406880 <__retarget_lock_init_recursive>
  405df0:	4643      	mov	r3, r8
  405df2:	463a      	mov	r2, r7
  405df4:	4669      	mov	r1, sp
  405df6:	4630      	mov	r0, r6
  405df8:	f7ff f990 	bl	40511c <_vfiprintf_r>
  405dfc:	1e05      	subs	r5, r0, #0
  405dfe:	db07      	blt.n	405e10 <__sbprintf+0x64>
  405e00:	4630      	mov	r0, r6
  405e02:	4669      	mov	r1, sp
  405e04:	f000 f928 	bl	406058 <_fflush_r>
  405e08:	2800      	cmp	r0, #0
  405e0a:	bf18      	it	ne
  405e0c:	f04f 35ff 	movne.w	r5, #4294967295
  405e10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405e14:	065b      	lsls	r3, r3, #25
  405e16:	d503      	bpl.n	405e20 <__sbprintf+0x74>
  405e18:	89a3      	ldrh	r3, [r4, #12]
  405e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405e1e:	81a3      	strh	r3, [r4, #12]
  405e20:	9816      	ldr	r0, [sp, #88]	; 0x58
  405e22:	f000 fd2f 	bl	406884 <__retarget_lock_close_recursive>
  405e26:	4628      	mov	r0, r5
  405e28:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  405e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405e30 <__swsetup_r>:
  405e30:	b538      	push	{r3, r4, r5, lr}
  405e32:	4b30      	ldr	r3, [pc, #192]	; (405ef4 <__swsetup_r+0xc4>)
  405e34:	681b      	ldr	r3, [r3, #0]
  405e36:	4605      	mov	r5, r0
  405e38:	460c      	mov	r4, r1
  405e3a:	b113      	cbz	r3, 405e42 <__swsetup_r+0x12>
  405e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405e3e:	2a00      	cmp	r2, #0
  405e40:	d038      	beq.n	405eb4 <__swsetup_r+0x84>
  405e42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405e46:	b293      	uxth	r3, r2
  405e48:	0718      	lsls	r0, r3, #28
  405e4a:	d50c      	bpl.n	405e66 <__swsetup_r+0x36>
  405e4c:	6920      	ldr	r0, [r4, #16]
  405e4e:	b1a8      	cbz	r0, 405e7c <__swsetup_r+0x4c>
  405e50:	f013 0201 	ands.w	r2, r3, #1
  405e54:	d01e      	beq.n	405e94 <__swsetup_r+0x64>
  405e56:	6963      	ldr	r3, [r4, #20]
  405e58:	2200      	movs	r2, #0
  405e5a:	425b      	negs	r3, r3
  405e5c:	61a3      	str	r3, [r4, #24]
  405e5e:	60a2      	str	r2, [r4, #8]
  405e60:	b1f0      	cbz	r0, 405ea0 <__swsetup_r+0x70>
  405e62:	2000      	movs	r0, #0
  405e64:	bd38      	pop	{r3, r4, r5, pc}
  405e66:	06d9      	lsls	r1, r3, #27
  405e68:	d53c      	bpl.n	405ee4 <__swsetup_r+0xb4>
  405e6a:	0758      	lsls	r0, r3, #29
  405e6c:	d426      	bmi.n	405ebc <__swsetup_r+0x8c>
  405e6e:	6920      	ldr	r0, [r4, #16]
  405e70:	f042 0308 	orr.w	r3, r2, #8
  405e74:	81a3      	strh	r3, [r4, #12]
  405e76:	b29b      	uxth	r3, r3
  405e78:	2800      	cmp	r0, #0
  405e7a:	d1e9      	bne.n	405e50 <__swsetup_r+0x20>
  405e7c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405e80:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405e84:	d0e4      	beq.n	405e50 <__swsetup_r+0x20>
  405e86:	4628      	mov	r0, r5
  405e88:	4621      	mov	r1, r4
  405e8a:	f000 fd2f 	bl	4068ec <__smakebuf_r>
  405e8e:	89a3      	ldrh	r3, [r4, #12]
  405e90:	6920      	ldr	r0, [r4, #16]
  405e92:	e7dd      	b.n	405e50 <__swsetup_r+0x20>
  405e94:	0799      	lsls	r1, r3, #30
  405e96:	bf58      	it	pl
  405e98:	6962      	ldrpl	r2, [r4, #20]
  405e9a:	60a2      	str	r2, [r4, #8]
  405e9c:	2800      	cmp	r0, #0
  405e9e:	d1e0      	bne.n	405e62 <__swsetup_r+0x32>
  405ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ea4:	061a      	lsls	r2, r3, #24
  405ea6:	d5dd      	bpl.n	405e64 <__swsetup_r+0x34>
  405ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405eac:	81a3      	strh	r3, [r4, #12]
  405eae:	f04f 30ff 	mov.w	r0, #4294967295
  405eb2:	bd38      	pop	{r3, r4, r5, pc}
  405eb4:	4618      	mov	r0, r3
  405eb6:	f000 f927 	bl	406108 <__sinit>
  405eba:	e7c2      	b.n	405e42 <__swsetup_r+0x12>
  405ebc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405ebe:	b151      	cbz	r1, 405ed6 <__swsetup_r+0xa6>
  405ec0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405ec4:	4299      	cmp	r1, r3
  405ec6:	d004      	beq.n	405ed2 <__swsetup_r+0xa2>
  405ec8:	4628      	mov	r0, r5
  405eca:	f000 fa43 	bl	406354 <_free_r>
  405ece:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405ed2:	2300      	movs	r3, #0
  405ed4:	6323      	str	r3, [r4, #48]	; 0x30
  405ed6:	2300      	movs	r3, #0
  405ed8:	6920      	ldr	r0, [r4, #16]
  405eda:	6063      	str	r3, [r4, #4]
  405edc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405ee0:	6020      	str	r0, [r4, #0]
  405ee2:	e7c5      	b.n	405e70 <__swsetup_r+0x40>
  405ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405ee8:	2309      	movs	r3, #9
  405eea:	602b      	str	r3, [r5, #0]
  405eec:	f04f 30ff 	mov.w	r0, #4294967295
  405ef0:	81a2      	strh	r2, [r4, #12]
  405ef2:	bd38      	pop	{r3, r4, r5, pc}
  405ef4:	20400014 	.word	0x20400014

00405ef8 <register_fini>:
  405ef8:	4b02      	ldr	r3, [pc, #8]	; (405f04 <register_fini+0xc>)
  405efa:	b113      	cbz	r3, 405f02 <register_fini+0xa>
  405efc:	4802      	ldr	r0, [pc, #8]	; (405f08 <register_fini+0x10>)
  405efe:	f000 b805 	b.w	405f0c <atexit>
  405f02:	4770      	bx	lr
  405f04:	00000000 	.word	0x00000000
  405f08:	00406179 	.word	0x00406179

00405f0c <atexit>:
  405f0c:	2300      	movs	r3, #0
  405f0e:	4601      	mov	r1, r0
  405f10:	461a      	mov	r2, r3
  405f12:	4618      	mov	r0, r3
  405f14:	f001 b890 	b.w	407038 <__register_exitproc>

00405f18 <__sflush_r>:
  405f18:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  405f1c:	b29a      	uxth	r2, r3
  405f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405f22:	460d      	mov	r5, r1
  405f24:	0711      	lsls	r1, r2, #28
  405f26:	4680      	mov	r8, r0
  405f28:	d43a      	bmi.n	405fa0 <__sflush_r+0x88>
  405f2a:	686a      	ldr	r2, [r5, #4]
  405f2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  405f30:	2a00      	cmp	r2, #0
  405f32:	81ab      	strh	r3, [r5, #12]
  405f34:	dd6f      	ble.n	406016 <__sflush_r+0xfe>
  405f36:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405f38:	2c00      	cmp	r4, #0
  405f3a:	d049      	beq.n	405fd0 <__sflush_r+0xb8>
  405f3c:	2200      	movs	r2, #0
  405f3e:	b29b      	uxth	r3, r3
  405f40:	f8d8 6000 	ldr.w	r6, [r8]
  405f44:	f8c8 2000 	str.w	r2, [r8]
  405f48:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  405f4c:	d067      	beq.n	40601e <__sflush_r+0x106>
  405f4e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405f50:	075f      	lsls	r7, r3, #29
  405f52:	d505      	bpl.n	405f60 <__sflush_r+0x48>
  405f54:	6869      	ldr	r1, [r5, #4]
  405f56:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405f58:	1a52      	subs	r2, r2, r1
  405f5a:	b10b      	cbz	r3, 405f60 <__sflush_r+0x48>
  405f5c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  405f5e:	1ad2      	subs	r2, r2, r3
  405f60:	2300      	movs	r3, #0
  405f62:	69e9      	ldr	r1, [r5, #28]
  405f64:	4640      	mov	r0, r8
  405f66:	47a0      	blx	r4
  405f68:	1c44      	adds	r4, r0, #1
  405f6a:	d03c      	beq.n	405fe6 <__sflush_r+0xce>
  405f6c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  405f70:	692a      	ldr	r2, [r5, #16]
  405f72:	602a      	str	r2, [r5, #0]
  405f74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405f78:	2200      	movs	r2, #0
  405f7a:	81ab      	strh	r3, [r5, #12]
  405f7c:	04db      	lsls	r3, r3, #19
  405f7e:	606a      	str	r2, [r5, #4]
  405f80:	d447      	bmi.n	406012 <__sflush_r+0xfa>
  405f82:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405f84:	f8c8 6000 	str.w	r6, [r8]
  405f88:	b311      	cbz	r1, 405fd0 <__sflush_r+0xb8>
  405f8a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  405f8e:	4299      	cmp	r1, r3
  405f90:	d002      	beq.n	405f98 <__sflush_r+0x80>
  405f92:	4640      	mov	r0, r8
  405f94:	f000 f9de 	bl	406354 <_free_r>
  405f98:	2000      	movs	r0, #0
  405f9a:	6328      	str	r0, [r5, #48]	; 0x30
  405f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405fa0:	692e      	ldr	r6, [r5, #16]
  405fa2:	b1ae      	cbz	r6, 405fd0 <__sflush_r+0xb8>
  405fa4:	682c      	ldr	r4, [r5, #0]
  405fa6:	602e      	str	r6, [r5, #0]
  405fa8:	0791      	lsls	r1, r2, #30
  405faa:	bf0c      	ite	eq
  405fac:	696b      	ldreq	r3, [r5, #20]
  405fae:	2300      	movne	r3, #0
  405fb0:	1ba4      	subs	r4, r4, r6
  405fb2:	60ab      	str	r3, [r5, #8]
  405fb4:	e00a      	b.n	405fcc <__sflush_r+0xb4>
  405fb6:	4623      	mov	r3, r4
  405fb8:	4632      	mov	r2, r6
  405fba:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  405fbc:	69e9      	ldr	r1, [r5, #28]
  405fbe:	4640      	mov	r0, r8
  405fc0:	47b8      	blx	r7
  405fc2:	2800      	cmp	r0, #0
  405fc4:	eba4 0400 	sub.w	r4, r4, r0
  405fc8:	4406      	add	r6, r0
  405fca:	dd04      	ble.n	405fd6 <__sflush_r+0xbe>
  405fcc:	2c00      	cmp	r4, #0
  405fce:	dcf2      	bgt.n	405fb6 <__sflush_r+0x9e>
  405fd0:	2000      	movs	r0, #0
  405fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405fd6:	89ab      	ldrh	r3, [r5, #12]
  405fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405fdc:	81ab      	strh	r3, [r5, #12]
  405fde:	f04f 30ff 	mov.w	r0, #4294967295
  405fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405fe6:	f8d8 4000 	ldr.w	r4, [r8]
  405fea:	2c1d      	cmp	r4, #29
  405fec:	d8f3      	bhi.n	405fd6 <__sflush_r+0xbe>
  405fee:	4b19      	ldr	r3, [pc, #100]	; (406054 <__sflush_r+0x13c>)
  405ff0:	40e3      	lsrs	r3, r4
  405ff2:	43db      	mvns	r3, r3
  405ff4:	f013 0301 	ands.w	r3, r3, #1
  405ff8:	d1ed      	bne.n	405fd6 <__sflush_r+0xbe>
  405ffa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  405ffe:	606b      	str	r3, [r5, #4]
  406000:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  406004:	6929      	ldr	r1, [r5, #16]
  406006:	81ab      	strh	r3, [r5, #12]
  406008:	04da      	lsls	r2, r3, #19
  40600a:	6029      	str	r1, [r5, #0]
  40600c:	d5b9      	bpl.n	405f82 <__sflush_r+0x6a>
  40600e:	2c00      	cmp	r4, #0
  406010:	d1b7      	bne.n	405f82 <__sflush_r+0x6a>
  406012:	6528      	str	r0, [r5, #80]	; 0x50
  406014:	e7b5      	b.n	405f82 <__sflush_r+0x6a>
  406016:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  406018:	2a00      	cmp	r2, #0
  40601a:	dc8c      	bgt.n	405f36 <__sflush_r+0x1e>
  40601c:	e7d8      	b.n	405fd0 <__sflush_r+0xb8>
  40601e:	2301      	movs	r3, #1
  406020:	69e9      	ldr	r1, [r5, #28]
  406022:	4640      	mov	r0, r8
  406024:	47a0      	blx	r4
  406026:	1c43      	adds	r3, r0, #1
  406028:	4602      	mov	r2, r0
  40602a:	d002      	beq.n	406032 <__sflush_r+0x11a>
  40602c:	89ab      	ldrh	r3, [r5, #12]
  40602e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406030:	e78e      	b.n	405f50 <__sflush_r+0x38>
  406032:	f8d8 3000 	ldr.w	r3, [r8]
  406036:	2b00      	cmp	r3, #0
  406038:	d0f8      	beq.n	40602c <__sflush_r+0x114>
  40603a:	2b1d      	cmp	r3, #29
  40603c:	d001      	beq.n	406042 <__sflush_r+0x12a>
  40603e:	2b16      	cmp	r3, #22
  406040:	d102      	bne.n	406048 <__sflush_r+0x130>
  406042:	f8c8 6000 	str.w	r6, [r8]
  406046:	e7c3      	b.n	405fd0 <__sflush_r+0xb8>
  406048:	89ab      	ldrh	r3, [r5, #12]
  40604a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40604e:	81ab      	strh	r3, [r5, #12]
  406050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406054:	20400001 	.word	0x20400001

00406058 <_fflush_r>:
  406058:	b538      	push	{r3, r4, r5, lr}
  40605a:	460d      	mov	r5, r1
  40605c:	4604      	mov	r4, r0
  40605e:	b108      	cbz	r0, 406064 <_fflush_r+0xc>
  406060:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406062:	b1bb      	cbz	r3, 406094 <_fflush_r+0x3c>
  406064:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  406068:	b188      	cbz	r0, 40608e <_fflush_r+0x36>
  40606a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40606c:	07db      	lsls	r3, r3, #31
  40606e:	d401      	bmi.n	406074 <_fflush_r+0x1c>
  406070:	0581      	lsls	r1, r0, #22
  406072:	d517      	bpl.n	4060a4 <_fflush_r+0x4c>
  406074:	4620      	mov	r0, r4
  406076:	4629      	mov	r1, r5
  406078:	f7ff ff4e 	bl	405f18 <__sflush_r>
  40607c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40607e:	07da      	lsls	r2, r3, #31
  406080:	4604      	mov	r4, r0
  406082:	d402      	bmi.n	40608a <_fflush_r+0x32>
  406084:	89ab      	ldrh	r3, [r5, #12]
  406086:	059b      	lsls	r3, r3, #22
  406088:	d507      	bpl.n	40609a <_fflush_r+0x42>
  40608a:	4620      	mov	r0, r4
  40608c:	bd38      	pop	{r3, r4, r5, pc}
  40608e:	4604      	mov	r4, r0
  406090:	4620      	mov	r0, r4
  406092:	bd38      	pop	{r3, r4, r5, pc}
  406094:	f000 f838 	bl	406108 <__sinit>
  406098:	e7e4      	b.n	406064 <_fflush_r+0xc>
  40609a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40609c:	f000 fbf6 	bl	40688c <__retarget_lock_release_recursive>
  4060a0:	4620      	mov	r0, r4
  4060a2:	bd38      	pop	{r3, r4, r5, pc}
  4060a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4060a6:	f000 fbef 	bl	406888 <__retarget_lock_acquire_recursive>
  4060aa:	e7e3      	b.n	406074 <_fflush_r+0x1c>

004060ac <_cleanup_r>:
  4060ac:	4901      	ldr	r1, [pc, #4]	; (4060b4 <_cleanup_r+0x8>)
  4060ae:	f000 bbaf 	b.w	406810 <_fwalk_reent>
  4060b2:	bf00      	nop
  4060b4:	00407121 	.word	0x00407121

004060b8 <std.isra.0>:
  4060b8:	b510      	push	{r4, lr}
  4060ba:	2300      	movs	r3, #0
  4060bc:	4604      	mov	r4, r0
  4060be:	8181      	strh	r1, [r0, #12]
  4060c0:	81c2      	strh	r2, [r0, #14]
  4060c2:	6003      	str	r3, [r0, #0]
  4060c4:	6043      	str	r3, [r0, #4]
  4060c6:	6083      	str	r3, [r0, #8]
  4060c8:	6643      	str	r3, [r0, #100]	; 0x64
  4060ca:	6103      	str	r3, [r0, #16]
  4060cc:	6143      	str	r3, [r0, #20]
  4060ce:	6183      	str	r3, [r0, #24]
  4060d0:	4619      	mov	r1, r3
  4060d2:	2208      	movs	r2, #8
  4060d4:	305c      	adds	r0, #92	; 0x5c
  4060d6:	f7fe fe21 	bl	404d1c <memset>
  4060da:	4807      	ldr	r0, [pc, #28]	; (4060f8 <std.isra.0+0x40>)
  4060dc:	4907      	ldr	r1, [pc, #28]	; (4060fc <std.isra.0+0x44>)
  4060de:	4a08      	ldr	r2, [pc, #32]	; (406100 <std.isra.0+0x48>)
  4060e0:	4b08      	ldr	r3, [pc, #32]	; (406104 <std.isra.0+0x4c>)
  4060e2:	6220      	str	r0, [r4, #32]
  4060e4:	61e4      	str	r4, [r4, #28]
  4060e6:	6261      	str	r1, [r4, #36]	; 0x24
  4060e8:	62a2      	str	r2, [r4, #40]	; 0x28
  4060ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  4060ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4060f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4060f4:	f000 bbc4 	b.w	406880 <__retarget_lock_init_recursive>
  4060f8:	00406e65 	.word	0x00406e65
  4060fc:	00406e89 	.word	0x00406e89
  406100:	00406ec5 	.word	0x00406ec5
  406104:	00406ee5 	.word	0x00406ee5

00406108 <__sinit>:
  406108:	b510      	push	{r4, lr}
  40610a:	4604      	mov	r4, r0
  40610c:	4812      	ldr	r0, [pc, #72]	; (406158 <__sinit+0x50>)
  40610e:	f000 fbbb 	bl	406888 <__retarget_lock_acquire_recursive>
  406112:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  406114:	b9d2      	cbnz	r2, 40614c <__sinit+0x44>
  406116:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40611a:	4810      	ldr	r0, [pc, #64]	; (40615c <__sinit+0x54>)
  40611c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  406120:	2103      	movs	r1, #3
  406122:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  406126:	63e0      	str	r0, [r4, #60]	; 0x3c
  406128:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40612c:	6860      	ldr	r0, [r4, #4]
  40612e:	2104      	movs	r1, #4
  406130:	f7ff ffc2 	bl	4060b8 <std.isra.0>
  406134:	2201      	movs	r2, #1
  406136:	2109      	movs	r1, #9
  406138:	68a0      	ldr	r0, [r4, #8]
  40613a:	f7ff ffbd 	bl	4060b8 <std.isra.0>
  40613e:	2202      	movs	r2, #2
  406140:	2112      	movs	r1, #18
  406142:	68e0      	ldr	r0, [r4, #12]
  406144:	f7ff ffb8 	bl	4060b8 <std.isra.0>
  406148:	2301      	movs	r3, #1
  40614a:	63a3      	str	r3, [r4, #56]	; 0x38
  40614c:	4802      	ldr	r0, [pc, #8]	; (406158 <__sinit+0x50>)
  40614e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406152:	f000 bb9b 	b.w	40688c <__retarget_lock_release_recursive>
  406156:	bf00      	nop
  406158:	2040c890 	.word	0x2040c890
  40615c:	004060ad 	.word	0x004060ad

00406160 <__sfp_lock_acquire>:
  406160:	4801      	ldr	r0, [pc, #4]	; (406168 <__sfp_lock_acquire+0x8>)
  406162:	f000 bb91 	b.w	406888 <__retarget_lock_acquire_recursive>
  406166:	bf00      	nop
  406168:	2040c8a4 	.word	0x2040c8a4

0040616c <__sfp_lock_release>:
  40616c:	4801      	ldr	r0, [pc, #4]	; (406174 <__sfp_lock_release+0x8>)
  40616e:	f000 bb8d 	b.w	40688c <__retarget_lock_release_recursive>
  406172:	bf00      	nop
  406174:	2040c8a4 	.word	0x2040c8a4

00406178 <__libc_fini_array>:
  406178:	b538      	push	{r3, r4, r5, lr}
  40617a:	4c0a      	ldr	r4, [pc, #40]	; (4061a4 <__libc_fini_array+0x2c>)
  40617c:	4d0a      	ldr	r5, [pc, #40]	; (4061a8 <__libc_fini_array+0x30>)
  40617e:	1b64      	subs	r4, r4, r5
  406180:	10a4      	asrs	r4, r4, #2
  406182:	d00a      	beq.n	40619a <__libc_fini_array+0x22>
  406184:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406188:	3b01      	subs	r3, #1
  40618a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40618e:	3c01      	subs	r4, #1
  406190:	f855 3904 	ldr.w	r3, [r5], #-4
  406194:	4798      	blx	r3
  406196:	2c00      	cmp	r4, #0
  406198:	d1f9      	bne.n	40618e <__libc_fini_array+0x16>
  40619a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40619e:	f001 bb47 	b.w	407830 <_fini>
  4061a2:	bf00      	nop
  4061a4:	00407840 	.word	0x00407840
  4061a8:	0040783c 	.word	0x0040783c

004061ac <__fputwc>:
  4061ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4061b0:	b082      	sub	sp, #8
  4061b2:	4680      	mov	r8, r0
  4061b4:	4689      	mov	r9, r1
  4061b6:	4614      	mov	r4, r2
  4061b8:	f000 fb54 	bl	406864 <__locale_mb_cur_max>
  4061bc:	2801      	cmp	r0, #1
  4061be:	d036      	beq.n	40622e <__fputwc+0x82>
  4061c0:	464a      	mov	r2, r9
  4061c2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4061c6:	a901      	add	r1, sp, #4
  4061c8:	4640      	mov	r0, r8
  4061ca:	f000 fee7 	bl	406f9c <_wcrtomb_r>
  4061ce:	1c42      	adds	r2, r0, #1
  4061d0:	4606      	mov	r6, r0
  4061d2:	d025      	beq.n	406220 <__fputwc+0x74>
  4061d4:	b3a8      	cbz	r0, 406242 <__fputwc+0x96>
  4061d6:	f89d e004 	ldrb.w	lr, [sp, #4]
  4061da:	2500      	movs	r5, #0
  4061dc:	f10d 0a04 	add.w	sl, sp, #4
  4061e0:	e009      	b.n	4061f6 <__fputwc+0x4a>
  4061e2:	6823      	ldr	r3, [r4, #0]
  4061e4:	1c5a      	adds	r2, r3, #1
  4061e6:	6022      	str	r2, [r4, #0]
  4061e8:	f883 e000 	strb.w	lr, [r3]
  4061ec:	3501      	adds	r5, #1
  4061ee:	42b5      	cmp	r5, r6
  4061f0:	d227      	bcs.n	406242 <__fputwc+0x96>
  4061f2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4061f6:	68a3      	ldr	r3, [r4, #8]
  4061f8:	3b01      	subs	r3, #1
  4061fa:	2b00      	cmp	r3, #0
  4061fc:	60a3      	str	r3, [r4, #8]
  4061fe:	daf0      	bge.n	4061e2 <__fputwc+0x36>
  406200:	69a7      	ldr	r7, [r4, #24]
  406202:	42bb      	cmp	r3, r7
  406204:	4671      	mov	r1, lr
  406206:	4622      	mov	r2, r4
  406208:	4640      	mov	r0, r8
  40620a:	db02      	blt.n	406212 <__fputwc+0x66>
  40620c:	f1be 0f0a 	cmp.w	lr, #10
  406210:	d1e7      	bne.n	4061e2 <__fputwc+0x36>
  406212:	f000 fe6b 	bl	406eec <__swbuf_r>
  406216:	1c43      	adds	r3, r0, #1
  406218:	d1e8      	bne.n	4061ec <__fputwc+0x40>
  40621a:	b002      	add	sp, #8
  40621c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406220:	89a3      	ldrh	r3, [r4, #12]
  406222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406226:	81a3      	strh	r3, [r4, #12]
  406228:	b002      	add	sp, #8
  40622a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40622e:	f109 33ff 	add.w	r3, r9, #4294967295
  406232:	2bfe      	cmp	r3, #254	; 0xfe
  406234:	d8c4      	bhi.n	4061c0 <__fputwc+0x14>
  406236:	fa5f fe89 	uxtb.w	lr, r9
  40623a:	4606      	mov	r6, r0
  40623c:	f88d e004 	strb.w	lr, [sp, #4]
  406240:	e7cb      	b.n	4061da <__fputwc+0x2e>
  406242:	4648      	mov	r0, r9
  406244:	b002      	add	sp, #8
  406246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40624a:	bf00      	nop

0040624c <_fputwc_r>:
  40624c:	b530      	push	{r4, r5, lr}
  40624e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  406250:	f013 0f01 	tst.w	r3, #1
  406254:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  406258:	4614      	mov	r4, r2
  40625a:	b083      	sub	sp, #12
  40625c:	4605      	mov	r5, r0
  40625e:	b29a      	uxth	r2, r3
  406260:	d101      	bne.n	406266 <_fputwc_r+0x1a>
  406262:	0590      	lsls	r0, r2, #22
  406264:	d51c      	bpl.n	4062a0 <_fputwc_r+0x54>
  406266:	0490      	lsls	r0, r2, #18
  406268:	d406      	bmi.n	406278 <_fputwc_r+0x2c>
  40626a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40626c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  406270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406274:	81a3      	strh	r3, [r4, #12]
  406276:	6662      	str	r2, [r4, #100]	; 0x64
  406278:	4628      	mov	r0, r5
  40627a:	4622      	mov	r2, r4
  40627c:	f7ff ff96 	bl	4061ac <__fputwc>
  406280:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406282:	07da      	lsls	r2, r3, #31
  406284:	4605      	mov	r5, r0
  406286:	d402      	bmi.n	40628e <_fputwc_r+0x42>
  406288:	89a3      	ldrh	r3, [r4, #12]
  40628a:	059b      	lsls	r3, r3, #22
  40628c:	d502      	bpl.n	406294 <_fputwc_r+0x48>
  40628e:	4628      	mov	r0, r5
  406290:	b003      	add	sp, #12
  406292:	bd30      	pop	{r4, r5, pc}
  406294:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406296:	f000 faf9 	bl	40688c <__retarget_lock_release_recursive>
  40629a:	4628      	mov	r0, r5
  40629c:	b003      	add	sp, #12
  40629e:	bd30      	pop	{r4, r5, pc}
  4062a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4062a2:	9101      	str	r1, [sp, #4]
  4062a4:	f000 faf0 	bl	406888 <__retarget_lock_acquire_recursive>
  4062a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4062ac:	9901      	ldr	r1, [sp, #4]
  4062ae:	b29a      	uxth	r2, r3
  4062b0:	e7d9      	b.n	406266 <_fputwc_r+0x1a>
  4062b2:	bf00      	nop

004062b4 <_malloc_trim_r>:
  4062b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4062b6:	4f24      	ldr	r7, [pc, #144]	; (406348 <_malloc_trim_r+0x94>)
  4062b8:	460c      	mov	r4, r1
  4062ba:	4606      	mov	r6, r0
  4062bc:	f7fe fd7c 	bl	404db8 <__malloc_lock>
  4062c0:	68bb      	ldr	r3, [r7, #8]
  4062c2:	685d      	ldr	r5, [r3, #4]
  4062c4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4062c8:	310f      	adds	r1, #15
  4062ca:	f025 0503 	bic.w	r5, r5, #3
  4062ce:	4429      	add	r1, r5
  4062d0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4062d4:	f021 010f 	bic.w	r1, r1, #15
  4062d8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4062dc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4062e0:	db07      	blt.n	4062f2 <_malloc_trim_r+0x3e>
  4062e2:	2100      	movs	r1, #0
  4062e4:	4630      	mov	r0, r6
  4062e6:	f7fe fd73 	bl	404dd0 <_sbrk_r>
  4062ea:	68bb      	ldr	r3, [r7, #8]
  4062ec:	442b      	add	r3, r5
  4062ee:	4298      	cmp	r0, r3
  4062f0:	d004      	beq.n	4062fc <_malloc_trim_r+0x48>
  4062f2:	4630      	mov	r0, r6
  4062f4:	f7fe fd66 	bl	404dc4 <__malloc_unlock>
  4062f8:	2000      	movs	r0, #0
  4062fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4062fc:	4261      	negs	r1, r4
  4062fe:	4630      	mov	r0, r6
  406300:	f7fe fd66 	bl	404dd0 <_sbrk_r>
  406304:	3001      	adds	r0, #1
  406306:	d00d      	beq.n	406324 <_malloc_trim_r+0x70>
  406308:	4b10      	ldr	r3, [pc, #64]	; (40634c <_malloc_trim_r+0x98>)
  40630a:	68ba      	ldr	r2, [r7, #8]
  40630c:	6819      	ldr	r1, [r3, #0]
  40630e:	1b2d      	subs	r5, r5, r4
  406310:	f045 0501 	orr.w	r5, r5, #1
  406314:	4630      	mov	r0, r6
  406316:	1b09      	subs	r1, r1, r4
  406318:	6055      	str	r5, [r2, #4]
  40631a:	6019      	str	r1, [r3, #0]
  40631c:	f7fe fd52 	bl	404dc4 <__malloc_unlock>
  406320:	2001      	movs	r0, #1
  406322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406324:	2100      	movs	r1, #0
  406326:	4630      	mov	r0, r6
  406328:	f7fe fd52 	bl	404dd0 <_sbrk_r>
  40632c:	68ba      	ldr	r2, [r7, #8]
  40632e:	1a83      	subs	r3, r0, r2
  406330:	2b0f      	cmp	r3, #15
  406332:	ddde      	ble.n	4062f2 <_malloc_trim_r+0x3e>
  406334:	4c06      	ldr	r4, [pc, #24]	; (406350 <_malloc_trim_r+0x9c>)
  406336:	4905      	ldr	r1, [pc, #20]	; (40634c <_malloc_trim_r+0x98>)
  406338:	6824      	ldr	r4, [r4, #0]
  40633a:	f043 0301 	orr.w	r3, r3, #1
  40633e:	1b00      	subs	r0, r0, r4
  406340:	6053      	str	r3, [r2, #4]
  406342:	6008      	str	r0, [r1, #0]
  406344:	e7d5      	b.n	4062f2 <_malloc_trim_r+0x3e>
  406346:	bf00      	nop
  406348:	20400440 	.word	0x20400440
  40634c:	2040c760 	.word	0x2040c760
  406350:	20400848 	.word	0x20400848

00406354 <_free_r>:
  406354:	2900      	cmp	r1, #0
  406356:	d044      	beq.n	4063e2 <_free_r+0x8e>
  406358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40635c:	460d      	mov	r5, r1
  40635e:	4680      	mov	r8, r0
  406360:	f7fe fd2a 	bl	404db8 <__malloc_lock>
  406364:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406368:	4969      	ldr	r1, [pc, #420]	; (406510 <_free_r+0x1bc>)
  40636a:	f027 0301 	bic.w	r3, r7, #1
  40636e:	f1a5 0408 	sub.w	r4, r5, #8
  406372:	18e2      	adds	r2, r4, r3
  406374:	688e      	ldr	r6, [r1, #8]
  406376:	6850      	ldr	r0, [r2, #4]
  406378:	42b2      	cmp	r2, r6
  40637a:	f020 0003 	bic.w	r0, r0, #3
  40637e:	d05e      	beq.n	40643e <_free_r+0xea>
  406380:	07fe      	lsls	r6, r7, #31
  406382:	6050      	str	r0, [r2, #4]
  406384:	d40b      	bmi.n	40639e <_free_r+0x4a>
  406386:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40638a:	1be4      	subs	r4, r4, r7
  40638c:	f101 0e08 	add.w	lr, r1, #8
  406390:	68a5      	ldr	r5, [r4, #8]
  406392:	4575      	cmp	r5, lr
  406394:	443b      	add	r3, r7
  406396:	d06d      	beq.n	406474 <_free_r+0x120>
  406398:	68e7      	ldr	r7, [r4, #12]
  40639a:	60ef      	str	r7, [r5, #12]
  40639c:	60bd      	str	r5, [r7, #8]
  40639e:	1815      	adds	r5, r2, r0
  4063a0:	686d      	ldr	r5, [r5, #4]
  4063a2:	07ed      	lsls	r5, r5, #31
  4063a4:	d53e      	bpl.n	406424 <_free_r+0xd0>
  4063a6:	f043 0201 	orr.w	r2, r3, #1
  4063aa:	6062      	str	r2, [r4, #4]
  4063ac:	50e3      	str	r3, [r4, r3]
  4063ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4063b2:	d217      	bcs.n	4063e4 <_free_r+0x90>
  4063b4:	08db      	lsrs	r3, r3, #3
  4063b6:	1c58      	adds	r0, r3, #1
  4063b8:	109a      	asrs	r2, r3, #2
  4063ba:	684d      	ldr	r5, [r1, #4]
  4063bc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4063c0:	60a7      	str	r7, [r4, #8]
  4063c2:	2301      	movs	r3, #1
  4063c4:	4093      	lsls	r3, r2
  4063c6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4063ca:	432b      	orrs	r3, r5
  4063cc:	3a08      	subs	r2, #8
  4063ce:	60e2      	str	r2, [r4, #12]
  4063d0:	604b      	str	r3, [r1, #4]
  4063d2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4063d6:	60fc      	str	r4, [r7, #12]
  4063d8:	4640      	mov	r0, r8
  4063da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4063de:	f7fe bcf1 	b.w	404dc4 <__malloc_unlock>
  4063e2:	4770      	bx	lr
  4063e4:	0a5a      	lsrs	r2, r3, #9
  4063e6:	2a04      	cmp	r2, #4
  4063e8:	d852      	bhi.n	406490 <_free_r+0x13c>
  4063ea:	099a      	lsrs	r2, r3, #6
  4063ec:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4063f0:	00ff      	lsls	r7, r7, #3
  4063f2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4063f6:	19c8      	adds	r0, r1, r7
  4063f8:	59ca      	ldr	r2, [r1, r7]
  4063fa:	3808      	subs	r0, #8
  4063fc:	4290      	cmp	r0, r2
  4063fe:	d04f      	beq.n	4064a0 <_free_r+0x14c>
  406400:	6851      	ldr	r1, [r2, #4]
  406402:	f021 0103 	bic.w	r1, r1, #3
  406406:	428b      	cmp	r3, r1
  406408:	d232      	bcs.n	406470 <_free_r+0x11c>
  40640a:	6892      	ldr	r2, [r2, #8]
  40640c:	4290      	cmp	r0, r2
  40640e:	d1f7      	bne.n	406400 <_free_r+0xac>
  406410:	68c3      	ldr	r3, [r0, #12]
  406412:	60a0      	str	r0, [r4, #8]
  406414:	60e3      	str	r3, [r4, #12]
  406416:	609c      	str	r4, [r3, #8]
  406418:	60c4      	str	r4, [r0, #12]
  40641a:	4640      	mov	r0, r8
  40641c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406420:	f7fe bcd0 	b.w	404dc4 <__malloc_unlock>
  406424:	6895      	ldr	r5, [r2, #8]
  406426:	4f3b      	ldr	r7, [pc, #236]	; (406514 <_free_r+0x1c0>)
  406428:	42bd      	cmp	r5, r7
  40642a:	4403      	add	r3, r0
  40642c:	d040      	beq.n	4064b0 <_free_r+0x15c>
  40642e:	68d0      	ldr	r0, [r2, #12]
  406430:	60e8      	str	r0, [r5, #12]
  406432:	f043 0201 	orr.w	r2, r3, #1
  406436:	6085      	str	r5, [r0, #8]
  406438:	6062      	str	r2, [r4, #4]
  40643a:	50e3      	str	r3, [r4, r3]
  40643c:	e7b7      	b.n	4063ae <_free_r+0x5a>
  40643e:	07ff      	lsls	r7, r7, #31
  406440:	4403      	add	r3, r0
  406442:	d407      	bmi.n	406454 <_free_r+0x100>
  406444:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406448:	1aa4      	subs	r4, r4, r2
  40644a:	4413      	add	r3, r2
  40644c:	68a0      	ldr	r0, [r4, #8]
  40644e:	68e2      	ldr	r2, [r4, #12]
  406450:	60c2      	str	r2, [r0, #12]
  406452:	6090      	str	r0, [r2, #8]
  406454:	4a30      	ldr	r2, [pc, #192]	; (406518 <_free_r+0x1c4>)
  406456:	6812      	ldr	r2, [r2, #0]
  406458:	f043 0001 	orr.w	r0, r3, #1
  40645c:	4293      	cmp	r3, r2
  40645e:	6060      	str	r0, [r4, #4]
  406460:	608c      	str	r4, [r1, #8]
  406462:	d3b9      	bcc.n	4063d8 <_free_r+0x84>
  406464:	4b2d      	ldr	r3, [pc, #180]	; (40651c <_free_r+0x1c8>)
  406466:	4640      	mov	r0, r8
  406468:	6819      	ldr	r1, [r3, #0]
  40646a:	f7ff ff23 	bl	4062b4 <_malloc_trim_r>
  40646e:	e7b3      	b.n	4063d8 <_free_r+0x84>
  406470:	4610      	mov	r0, r2
  406472:	e7cd      	b.n	406410 <_free_r+0xbc>
  406474:	1811      	adds	r1, r2, r0
  406476:	6849      	ldr	r1, [r1, #4]
  406478:	07c9      	lsls	r1, r1, #31
  40647a:	d444      	bmi.n	406506 <_free_r+0x1b2>
  40647c:	6891      	ldr	r1, [r2, #8]
  40647e:	68d2      	ldr	r2, [r2, #12]
  406480:	60ca      	str	r2, [r1, #12]
  406482:	4403      	add	r3, r0
  406484:	f043 0001 	orr.w	r0, r3, #1
  406488:	6091      	str	r1, [r2, #8]
  40648a:	6060      	str	r0, [r4, #4]
  40648c:	50e3      	str	r3, [r4, r3]
  40648e:	e7a3      	b.n	4063d8 <_free_r+0x84>
  406490:	2a14      	cmp	r2, #20
  406492:	d816      	bhi.n	4064c2 <_free_r+0x16e>
  406494:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406498:	00ff      	lsls	r7, r7, #3
  40649a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40649e:	e7aa      	b.n	4063f6 <_free_r+0xa2>
  4064a0:	10aa      	asrs	r2, r5, #2
  4064a2:	2301      	movs	r3, #1
  4064a4:	684d      	ldr	r5, [r1, #4]
  4064a6:	4093      	lsls	r3, r2
  4064a8:	432b      	orrs	r3, r5
  4064aa:	604b      	str	r3, [r1, #4]
  4064ac:	4603      	mov	r3, r0
  4064ae:	e7b0      	b.n	406412 <_free_r+0xbe>
  4064b0:	f043 0201 	orr.w	r2, r3, #1
  4064b4:	614c      	str	r4, [r1, #20]
  4064b6:	610c      	str	r4, [r1, #16]
  4064b8:	60e5      	str	r5, [r4, #12]
  4064ba:	60a5      	str	r5, [r4, #8]
  4064bc:	6062      	str	r2, [r4, #4]
  4064be:	50e3      	str	r3, [r4, r3]
  4064c0:	e78a      	b.n	4063d8 <_free_r+0x84>
  4064c2:	2a54      	cmp	r2, #84	; 0x54
  4064c4:	d806      	bhi.n	4064d4 <_free_r+0x180>
  4064c6:	0b1a      	lsrs	r2, r3, #12
  4064c8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4064cc:	00ff      	lsls	r7, r7, #3
  4064ce:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4064d2:	e790      	b.n	4063f6 <_free_r+0xa2>
  4064d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4064d8:	d806      	bhi.n	4064e8 <_free_r+0x194>
  4064da:	0bda      	lsrs	r2, r3, #15
  4064dc:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4064e0:	00ff      	lsls	r7, r7, #3
  4064e2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4064e6:	e786      	b.n	4063f6 <_free_r+0xa2>
  4064e8:	f240 5054 	movw	r0, #1364	; 0x554
  4064ec:	4282      	cmp	r2, r0
  4064ee:	d806      	bhi.n	4064fe <_free_r+0x1aa>
  4064f0:	0c9a      	lsrs	r2, r3, #18
  4064f2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4064f6:	00ff      	lsls	r7, r7, #3
  4064f8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4064fc:	e77b      	b.n	4063f6 <_free_r+0xa2>
  4064fe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406502:	257e      	movs	r5, #126	; 0x7e
  406504:	e777      	b.n	4063f6 <_free_r+0xa2>
  406506:	f043 0101 	orr.w	r1, r3, #1
  40650a:	6061      	str	r1, [r4, #4]
  40650c:	6013      	str	r3, [r2, #0]
  40650e:	e763      	b.n	4063d8 <_free_r+0x84>
  406510:	20400440 	.word	0x20400440
  406514:	20400448 	.word	0x20400448
  406518:	2040084c 	.word	0x2040084c
  40651c:	2040c790 	.word	0x2040c790

00406520 <__sfvwrite_r>:
  406520:	6893      	ldr	r3, [r2, #8]
  406522:	2b00      	cmp	r3, #0
  406524:	d073      	beq.n	40660e <__sfvwrite_r+0xee>
  406526:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40652a:	898b      	ldrh	r3, [r1, #12]
  40652c:	b083      	sub	sp, #12
  40652e:	460c      	mov	r4, r1
  406530:	0719      	lsls	r1, r3, #28
  406532:	9000      	str	r0, [sp, #0]
  406534:	4616      	mov	r6, r2
  406536:	d526      	bpl.n	406586 <__sfvwrite_r+0x66>
  406538:	6922      	ldr	r2, [r4, #16]
  40653a:	b322      	cbz	r2, 406586 <__sfvwrite_r+0x66>
  40653c:	f013 0002 	ands.w	r0, r3, #2
  406540:	6835      	ldr	r5, [r6, #0]
  406542:	d02c      	beq.n	40659e <__sfvwrite_r+0x7e>
  406544:	f04f 0900 	mov.w	r9, #0
  406548:	4fb0      	ldr	r7, [pc, #704]	; (40680c <__sfvwrite_r+0x2ec>)
  40654a:	46c8      	mov	r8, r9
  40654c:	46b2      	mov	sl, r6
  40654e:	45b8      	cmp	r8, r7
  406550:	4643      	mov	r3, r8
  406552:	464a      	mov	r2, r9
  406554:	bf28      	it	cs
  406556:	463b      	movcs	r3, r7
  406558:	9800      	ldr	r0, [sp, #0]
  40655a:	f1b8 0f00 	cmp.w	r8, #0
  40655e:	d050      	beq.n	406602 <__sfvwrite_r+0xe2>
  406560:	69e1      	ldr	r1, [r4, #28]
  406562:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406564:	47b0      	blx	r6
  406566:	2800      	cmp	r0, #0
  406568:	dd58      	ble.n	40661c <__sfvwrite_r+0xfc>
  40656a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40656e:	1a1b      	subs	r3, r3, r0
  406570:	4481      	add	r9, r0
  406572:	eba8 0800 	sub.w	r8, r8, r0
  406576:	f8ca 3008 	str.w	r3, [sl, #8]
  40657a:	2b00      	cmp	r3, #0
  40657c:	d1e7      	bne.n	40654e <__sfvwrite_r+0x2e>
  40657e:	2000      	movs	r0, #0
  406580:	b003      	add	sp, #12
  406582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406586:	4621      	mov	r1, r4
  406588:	9800      	ldr	r0, [sp, #0]
  40658a:	f7ff fc51 	bl	405e30 <__swsetup_r>
  40658e:	2800      	cmp	r0, #0
  406590:	f040 8133 	bne.w	4067fa <__sfvwrite_r+0x2da>
  406594:	89a3      	ldrh	r3, [r4, #12]
  406596:	6835      	ldr	r5, [r6, #0]
  406598:	f013 0002 	ands.w	r0, r3, #2
  40659c:	d1d2      	bne.n	406544 <__sfvwrite_r+0x24>
  40659e:	f013 0901 	ands.w	r9, r3, #1
  4065a2:	d145      	bne.n	406630 <__sfvwrite_r+0x110>
  4065a4:	464f      	mov	r7, r9
  4065a6:	9601      	str	r6, [sp, #4]
  4065a8:	b337      	cbz	r7, 4065f8 <__sfvwrite_r+0xd8>
  4065aa:	059a      	lsls	r2, r3, #22
  4065ac:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4065b0:	f140 8083 	bpl.w	4066ba <__sfvwrite_r+0x19a>
  4065b4:	4547      	cmp	r7, r8
  4065b6:	46c3      	mov	fp, r8
  4065b8:	f0c0 80ab 	bcc.w	406712 <__sfvwrite_r+0x1f2>
  4065bc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4065c0:	f040 80ac 	bne.w	40671c <__sfvwrite_r+0x1fc>
  4065c4:	6820      	ldr	r0, [r4, #0]
  4065c6:	46ba      	mov	sl, r7
  4065c8:	465a      	mov	r2, fp
  4065ca:	4649      	mov	r1, r9
  4065cc:	f000 fa40 	bl	406a50 <memmove>
  4065d0:	68a2      	ldr	r2, [r4, #8]
  4065d2:	6823      	ldr	r3, [r4, #0]
  4065d4:	eba2 0208 	sub.w	r2, r2, r8
  4065d8:	445b      	add	r3, fp
  4065da:	60a2      	str	r2, [r4, #8]
  4065dc:	6023      	str	r3, [r4, #0]
  4065de:	9a01      	ldr	r2, [sp, #4]
  4065e0:	6893      	ldr	r3, [r2, #8]
  4065e2:	eba3 030a 	sub.w	r3, r3, sl
  4065e6:	44d1      	add	r9, sl
  4065e8:	eba7 070a 	sub.w	r7, r7, sl
  4065ec:	6093      	str	r3, [r2, #8]
  4065ee:	2b00      	cmp	r3, #0
  4065f0:	d0c5      	beq.n	40657e <__sfvwrite_r+0x5e>
  4065f2:	89a3      	ldrh	r3, [r4, #12]
  4065f4:	2f00      	cmp	r7, #0
  4065f6:	d1d8      	bne.n	4065aa <__sfvwrite_r+0x8a>
  4065f8:	f8d5 9000 	ldr.w	r9, [r5]
  4065fc:	686f      	ldr	r7, [r5, #4]
  4065fe:	3508      	adds	r5, #8
  406600:	e7d2      	b.n	4065a8 <__sfvwrite_r+0x88>
  406602:	f8d5 9000 	ldr.w	r9, [r5]
  406606:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40660a:	3508      	adds	r5, #8
  40660c:	e79f      	b.n	40654e <__sfvwrite_r+0x2e>
  40660e:	2000      	movs	r0, #0
  406610:	4770      	bx	lr
  406612:	4621      	mov	r1, r4
  406614:	9800      	ldr	r0, [sp, #0]
  406616:	f7ff fd1f 	bl	406058 <_fflush_r>
  40661a:	b370      	cbz	r0, 40667a <__sfvwrite_r+0x15a>
  40661c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406624:	f04f 30ff 	mov.w	r0, #4294967295
  406628:	81a3      	strh	r3, [r4, #12]
  40662a:	b003      	add	sp, #12
  40662c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406630:	4681      	mov	r9, r0
  406632:	4633      	mov	r3, r6
  406634:	464e      	mov	r6, r9
  406636:	46a8      	mov	r8, r5
  406638:	469a      	mov	sl, r3
  40663a:	464d      	mov	r5, r9
  40663c:	b34e      	cbz	r6, 406692 <__sfvwrite_r+0x172>
  40663e:	b380      	cbz	r0, 4066a2 <__sfvwrite_r+0x182>
  406640:	6820      	ldr	r0, [r4, #0]
  406642:	6923      	ldr	r3, [r4, #16]
  406644:	6962      	ldr	r2, [r4, #20]
  406646:	45b1      	cmp	r9, r6
  406648:	46cb      	mov	fp, r9
  40664a:	bf28      	it	cs
  40664c:	46b3      	movcs	fp, r6
  40664e:	4298      	cmp	r0, r3
  406650:	465f      	mov	r7, fp
  406652:	d904      	bls.n	40665e <__sfvwrite_r+0x13e>
  406654:	68a3      	ldr	r3, [r4, #8]
  406656:	4413      	add	r3, r2
  406658:	459b      	cmp	fp, r3
  40665a:	f300 80a6 	bgt.w	4067aa <__sfvwrite_r+0x28a>
  40665e:	4593      	cmp	fp, r2
  406660:	db4b      	blt.n	4066fa <__sfvwrite_r+0x1da>
  406662:	4613      	mov	r3, r2
  406664:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406666:	69e1      	ldr	r1, [r4, #28]
  406668:	9800      	ldr	r0, [sp, #0]
  40666a:	462a      	mov	r2, r5
  40666c:	47b8      	blx	r7
  40666e:	1e07      	subs	r7, r0, #0
  406670:	ddd4      	ble.n	40661c <__sfvwrite_r+0xfc>
  406672:	ebb9 0907 	subs.w	r9, r9, r7
  406676:	d0cc      	beq.n	406612 <__sfvwrite_r+0xf2>
  406678:	2001      	movs	r0, #1
  40667a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40667e:	1bdb      	subs	r3, r3, r7
  406680:	443d      	add	r5, r7
  406682:	1bf6      	subs	r6, r6, r7
  406684:	f8ca 3008 	str.w	r3, [sl, #8]
  406688:	2b00      	cmp	r3, #0
  40668a:	f43f af78 	beq.w	40657e <__sfvwrite_r+0x5e>
  40668e:	2e00      	cmp	r6, #0
  406690:	d1d5      	bne.n	40663e <__sfvwrite_r+0x11e>
  406692:	f108 0308 	add.w	r3, r8, #8
  406696:	e913 0060 	ldmdb	r3, {r5, r6}
  40669a:	4698      	mov	r8, r3
  40669c:	3308      	adds	r3, #8
  40669e:	2e00      	cmp	r6, #0
  4066a0:	d0f9      	beq.n	406696 <__sfvwrite_r+0x176>
  4066a2:	4632      	mov	r2, r6
  4066a4:	210a      	movs	r1, #10
  4066a6:	4628      	mov	r0, r5
  4066a8:	f000 f982 	bl	4069b0 <memchr>
  4066ac:	2800      	cmp	r0, #0
  4066ae:	f000 80a1 	beq.w	4067f4 <__sfvwrite_r+0x2d4>
  4066b2:	3001      	adds	r0, #1
  4066b4:	eba0 0905 	sub.w	r9, r0, r5
  4066b8:	e7c2      	b.n	406640 <__sfvwrite_r+0x120>
  4066ba:	6820      	ldr	r0, [r4, #0]
  4066bc:	6923      	ldr	r3, [r4, #16]
  4066be:	4298      	cmp	r0, r3
  4066c0:	d802      	bhi.n	4066c8 <__sfvwrite_r+0x1a8>
  4066c2:	6963      	ldr	r3, [r4, #20]
  4066c4:	429f      	cmp	r7, r3
  4066c6:	d25d      	bcs.n	406784 <__sfvwrite_r+0x264>
  4066c8:	45b8      	cmp	r8, r7
  4066ca:	bf28      	it	cs
  4066cc:	46b8      	movcs	r8, r7
  4066ce:	4642      	mov	r2, r8
  4066d0:	4649      	mov	r1, r9
  4066d2:	f000 f9bd 	bl	406a50 <memmove>
  4066d6:	68a3      	ldr	r3, [r4, #8]
  4066d8:	6822      	ldr	r2, [r4, #0]
  4066da:	eba3 0308 	sub.w	r3, r3, r8
  4066de:	4442      	add	r2, r8
  4066e0:	60a3      	str	r3, [r4, #8]
  4066e2:	6022      	str	r2, [r4, #0]
  4066e4:	b10b      	cbz	r3, 4066ea <__sfvwrite_r+0x1ca>
  4066e6:	46c2      	mov	sl, r8
  4066e8:	e779      	b.n	4065de <__sfvwrite_r+0xbe>
  4066ea:	4621      	mov	r1, r4
  4066ec:	9800      	ldr	r0, [sp, #0]
  4066ee:	f7ff fcb3 	bl	406058 <_fflush_r>
  4066f2:	2800      	cmp	r0, #0
  4066f4:	d192      	bne.n	40661c <__sfvwrite_r+0xfc>
  4066f6:	46c2      	mov	sl, r8
  4066f8:	e771      	b.n	4065de <__sfvwrite_r+0xbe>
  4066fa:	465a      	mov	r2, fp
  4066fc:	4629      	mov	r1, r5
  4066fe:	f000 f9a7 	bl	406a50 <memmove>
  406702:	68a2      	ldr	r2, [r4, #8]
  406704:	6823      	ldr	r3, [r4, #0]
  406706:	eba2 020b 	sub.w	r2, r2, fp
  40670a:	445b      	add	r3, fp
  40670c:	60a2      	str	r2, [r4, #8]
  40670e:	6023      	str	r3, [r4, #0]
  406710:	e7af      	b.n	406672 <__sfvwrite_r+0x152>
  406712:	6820      	ldr	r0, [r4, #0]
  406714:	46b8      	mov	r8, r7
  406716:	46ba      	mov	sl, r7
  406718:	46bb      	mov	fp, r7
  40671a:	e755      	b.n	4065c8 <__sfvwrite_r+0xa8>
  40671c:	6962      	ldr	r2, [r4, #20]
  40671e:	6820      	ldr	r0, [r4, #0]
  406720:	6921      	ldr	r1, [r4, #16]
  406722:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  406726:	eba0 0a01 	sub.w	sl, r0, r1
  40672a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40672e:	f10a 0001 	add.w	r0, sl, #1
  406732:	ea4f 0868 	mov.w	r8, r8, asr #1
  406736:	4438      	add	r0, r7
  406738:	4540      	cmp	r0, r8
  40673a:	4642      	mov	r2, r8
  40673c:	bf84      	itt	hi
  40673e:	4680      	movhi	r8, r0
  406740:	4642      	movhi	r2, r8
  406742:	055b      	lsls	r3, r3, #21
  406744:	d544      	bpl.n	4067d0 <__sfvwrite_r+0x2b0>
  406746:	4611      	mov	r1, r2
  406748:	9800      	ldr	r0, [sp, #0]
  40674a:	f7fd ff9d 	bl	404688 <_malloc_r>
  40674e:	4683      	mov	fp, r0
  406750:	2800      	cmp	r0, #0
  406752:	d055      	beq.n	406800 <__sfvwrite_r+0x2e0>
  406754:	4652      	mov	r2, sl
  406756:	6921      	ldr	r1, [r4, #16]
  406758:	f7fe fa46 	bl	404be8 <memcpy>
  40675c:	89a3      	ldrh	r3, [r4, #12]
  40675e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  406762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406766:	81a3      	strh	r3, [r4, #12]
  406768:	eb0b 000a 	add.w	r0, fp, sl
  40676c:	eba8 030a 	sub.w	r3, r8, sl
  406770:	f8c4 b010 	str.w	fp, [r4, #16]
  406774:	f8c4 8014 	str.w	r8, [r4, #20]
  406778:	6020      	str	r0, [r4, #0]
  40677a:	60a3      	str	r3, [r4, #8]
  40677c:	46b8      	mov	r8, r7
  40677e:	46ba      	mov	sl, r7
  406780:	46bb      	mov	fp, r7
  406782:	e721      	b.n	4065c8 <__sfvwrite_r+0xa8>
  406784:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  406788:	42b9      	cmp	r1, r7
  40678a:	bf28      	it	cs
  40678c:	4639      	movcs	r1, r7
  40678e:	464a      	mov	r2, r9
  406790:	fb91 f1f3 	sdiv	r1, r1, r3
  406794:	9800      	ldr	r0, [sp, #0]
  406796:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406798:	fb03 f301 	mul.w	r3, r3, r1
  40679c:	69e1      	ldr	r1, [r4, #28]
  40679e:	47b0      	blx	r6
  4067a0:	f1b0 0a00 	subs.w	sl, r0, #0
  4067a4:	f73f af1b 	bgt.w	4065de <__sfvwrite_r+0xbe>
  4067a8:	e738      	b.n	40661c <__sfvwrite_r+0xfc>
  4067aa:	461a      	mov	r2, r3
  4067ac:	4629      	mov	r1, r5
  4067ae:	9301      	str	r3, [sp, #4]
  4067b0:	f000 f94e 	bl	406a50 <memmove>
  4067b4:	6822      	ldr	r2, [r4, #0]
  4067b6:	9b01      	ldr	r3, [sp, #4]
  4067b8:	9800      	ldr	r0, [sp, #0]
  4067ba:	441a      	add	r2, r3
  4067bc:	6022      	str	r2, [r4, #0]
  4067be:	4621      	mov	r1, r4
  4067c0:	f7ff fc4a 	bl	406058 <_fflush_r>
  4067c4:	9b01      	ldr	r3, [sp, #4]
  4067c6:	2800      	cmp	r0, #0
  4067c8:	f47f af28 	bne.w	40661c <__sfvwrite_r+0xfc>
  4067cc:	461f      	mov	r7, r3
  4067ce:	e750      	b.n	406672 <__sfvwrite_r+0x152>
  4067d0:	9800      	ldr	r0, [sp, #0]
  4067d2:	f000 f9a1 	bl	406b18 <_realloc_r>
  4067d6:	4683      	mov	fp, r0
  4067d8:	2800      	cmp	r0, #0
  4067da:	d1c5      	bne.n	406768 <__sfvwrite_r+0x248>
  4067dc:	9d00      	ldr	r5, [sp, #0]
  4067de:	6921      	ldr	r1, [r4, #16]
  4067e0:	4628      	mov	r0, r5
  4067e2:	f7ff fdb7 	bl	406354 <_free_r>
  4067e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4067ea:	220c      	movs	r2, #12
  4067ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4067f0:	602a      	str	r2, [r5, #0]
  4067f2:	e715      	b.n	406620 <__sfvwrite_r+0x100>
  4067f4:	f106 0901 	add.w	r9, r6, #1
  4067f8:	e722      	b.n	406640 <__sfvwrite_r+0x120>
  4067fa:	f04f 30ff 	mov.w	r0, #4294967295
  4067fe:	e6bf      	b.n	406580 <__sfvwrite_r+0x60>
  406800:	9a00      	ldr	r2, [sp, #0]
  406802:	230c      	movs	r3, #12
  406804:	6013      	str	r3, [r2, #0]
  406806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40680a:	e709      	b.n	406620 <__sfvwrite_r+0x100>
  40680c:	7ffffc00 	.word	0x7ffffc00

00406810 <_fwalk_reent>:
  406810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406814:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406818:	d01f      	beq.n	40685a <_fwalk_reent+0x4a>
  40681a:	4688      	mov	r8, r1
  40681c:	4606      	mov	r6, r0
  40681e:	f04f 0900 	mov.w	r9, #0
  406822:	687d      	ldr	r5, [r7, #4]
  406824:	68bc      	ldr	r4, [r7, #8]
  406826:	3d01      	subs	r5, #1
  406828:	d411      	bmi.n	40684e <_fwalk_reent+0x3e>
  40682a:	89a3      	ldrh	r3, [r4, #12]
  40682c:	2b01      	cmp	r3, #1
  40682e:	f105 35ff 	add.w	r5, r5, #4294967295
  406832:	d908      	bls.n	406846 <_fwalk_reent+0x36>
  406834:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406838:	3301      	adds	r3, #1
  40683a:	4621      	mov	r1, r4
  40683c:	4630      	mov	r0, r6
  40683e:	d002      	beq.n	406846 <_fwalk_reent+0x36>
  406840:	47c0      	blx	r8
  406842:	ea49 0900 	orr.w	r9, r9, r0
  406846:	1c6b      	adds	r3, r5, #1
  406848:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40684c:	d1ed      	bne.n	40682a <_fwalk_reent+0x1a>
  40684e:	683f      	ldr	r7, [r7, #0]
  406850:	2f00      	cmp	r7, #0
  406852:	d1e6      	bne.n	406822 <_fwalk_reent+0x12>
  406854:	4648      	mov	r0, r9
  406856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40685a:	46b9      	mov	r9, r7
  40685c:	4648      	mov	r0, r9
  40685e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406862:	bf00      	nop

00406864 <__locale_mb_cur_max>:
  406864:	4b04      	ldr	r3, [pc, #16]	; (406878 <__locale_mb_cur_max+0x14>)
  406866:	4a05      	ldr	r2, [pc, #20]	; (40687c <__locale_mb_cur_max+0x18>)
  406868:	681b      	ldr	r3, [r3, #0]
  40686a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40686c:	2b00      	cmp	r3, #0
  40686e:	bf08      	it	eq
  406870:	4613      	moveq	r3, r2
  406872:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  406876:	4770      	bx	lr
  406878:	20400014 	.word	0x20400014
  40687c:	20400854 	.word	0x20400854

00406880 <__retarget_lock_init_recursive>:
  406880:	4770      	bx	lr
  406882:	bf00      	nop

00406884 <__retarget_lock_close_recursive>:
  406884:	4770      	bx	lr
  406886:	bf00      	nop

00406888 <__retarget_lock_acquire_recursive>:
  406888:	4770      	bx	lr
  40688a:	bf00      	nop

0040688c <__retarget_lock_release_recursive>:
  40688c:	4770      	bx	lr
  40688e:	bf00      	nop

00406890 <__swhatbuf_r>:
  406890:	b570      	push	{r4, r5, r6, lr}
  406892:	460c      	mov	r4, r1
  406894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406898:	2900      	cmp	r1, #0
  40689a:	b090      	sub	sp, #64	; 0x40
  40689c:	4615      	mov	r5, r2
  40689e:	461e      	mov	r6, r3
  4068a0:	db14      	blt.n	4068cc <__swhatbuf_r+0x3c>
  4068a2:	aa01      	add	r2, sp, #4
  4068a4:	f000 fc9e 	bl	4071e4 <_fstat_r>
  4068a8:	2800      	cmp	r0, #0
  4068aa:	db0f      	blt.n	4068cc <__swhatbuf_r+0x3c>
  4068ac:	9a02      	ldr	r2, [sp, #8]
  4068ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4068b2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4068b6:	fab2 f282 	clz	r2, r2
  4068ba:	0952      	lsrs	r2, r2, #5
  4068bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4068c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4068c4:	6032      	str	r2, [r6, #0]
  4068c6:	602b      	str	r3, [r5, #0]
  4068c8:	b010      	add	sp, #64	; 0x40
  4068ca:	bd70      	pop	{r4, r5, r6, pc}
  4068cc:	89a2      	ldrh	r2, [r4, #12]
  4068ce:	2300      	movs	r3, #0
  4068d0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4068d4:	6033      	str	r3, [r6, #0]
  4068d6:	d004      	beq.n	4068e2 <__swhatbuf_r+0x52>
  4068d8:	2240      	movs	r2, #64	; 0x40
  4068da:	4618      	mov	r0, r3
  4068dc:	602a      	str	r2, [r5, #0]
  4068de:	b010      	add	sp, #64	; 0x40
  4068e0:	bd70      	pop	{r4, r5, r6, pc}
  4068e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4068e6:	602b      	str	r3, [r5, #0]
  4068e8:	b010      	add	sp, #64	; 0x40
  4068ea:	bd70      	pop	{r4, r5, r6, pc}

004068ec <__smakebuf_r>:
  4068ec:	898a      	ldrh	r2, [r1, #12]
  4068ee:	0792      	lsls	r2, r2, #30
  4068f0:	460b      	mov	r3, r1
  4068f2:	d506      	bpl.n	406902 <__smakebuf_r+0x16>
  4068f4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4068f8:	2101      	movs	r1, #1
  4068fa:	601a      	str	r2, [r3, #0]
  4068fc:	611a      	str	r2, [r3, #16]
  4068fe:	6159      	str	r1, [r3, #20]
  406900:	4770      	bx	lr
  406902:	b5f0      	push	{r4, r5, r6, r7, lr}
  406904:	b083      	sub	sp, #12
  406906:	ab01      	add	r3, sp, #4
  406908:	466a      	mov	r2, sp
  40690a:	460c      	mov	r4, r1
  40690c:	4606      	mov	r6, r0
  40690e:	f7ff ffbf 	bl	406890 <__swhatbuf_r>
  406912:	9900      	ldr	r1, [sp, #0]
  406914:	4605      	mov	r5, r0
  406916:	4630      	mov	r0, r6
  406918:	f7fd feb6 	bl	404688 <_malloc_r>
  40691c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406920:	b1d8      	cbz	r0, 40695a <__smakebuf_r+0x6e>
  406922:	9a01      	ldr	r2, [sp, #4]
  406924:	4f15      	ldr	r7, [pc, #84]	; (40697c <__smakebuf_r+0x90>)
  406926:	9900      	ldr	r1, [sp, #0]
  406928:	63f7      	str	r7, [r6, #60]	; 0x3c
  40692a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40692e:	81a3      	strh	r3, [r4, #12]
  406930:	6020      	str	r0, [r4, #0]
  406932:	6120      	str	r0, [r4, #16]
  406934:	6161      	str	r1, [r4, #20]
  406936:	b91a      	cbnz	r2, 406940 <__smakebuf_r+0x54>
  406938:	432b      	orrs	r3, r5
  40693a:	81a3      	strh	r3, [r4, #12]
  40693c:	b003      	add	sp, #12
  40693e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406940:	4630      	mov	r0, r6
  406942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406946:	f000 fc61 	bl	40720c <_isatty_r>
  40694a:	b1a0      	cbz	r0, 406976 <__smakebuf_r+0x8a>
  40694c:	89a3      	ldrh	r3, [r4, #12]
  40694e:	f023 0303 	bic.w	r3, r3, #3
  406952:	f043 0301 	orr.w	r3, r3, #1
  406956:	b21b      	sxth	r3, r3
  406958:	e7ee      	b.n	406938 <__smakebuf_r+0x4c>
  40695a:	059a      	lsls	r2, r3, #22
  40695c:	d4ee      	bmi.n	40693c <__smakebuf_r+0x50>
  40695e:	f023 0303 	bic.w	r3, r3, #3
  406962:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406966:	f043 0302 	orr.w	r3, r3, #2
  40696a:	2101      	movs	r1, #1
  40696c:	81a3      	strh	r3, [r4, #12]
  40696e:	6022      	str	r2, [r4, #0]
  406970:	6122      	str	r2, [r4, #16]
  406972:	6161      	str	r1, [r4, #20]
  406974:	e7e2      	b.n	40693c <__smakebuf_r+0x50>
  406976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40697a:	e7dd      	b.n	406938 <__smakebuf_r+0x4c>
  40697c:	004060ad 	.word	0x004060ad

00406980 <__ascii_mbtowc>:
  406980:	b082      	sub	sp, #8
  406982:	b149      	cbz	r1, 406998 <__ascii_mbtowc+0x18>
  406984:	b15a      	cbz	r2, 40699e <__ascii_mbtowc+0x1e>
  406986:	b16b      	cbz	r3, 4069a4 <__ascii_mbtowc+0x24>
  406988:	7813      	ldrb	r3, [r2, #0]
  40698a:	600b      	str	r3, [r1, #0]
  40698c:	7812      	ldrb	r2, [r2, #0]
  40698e:	1c10      	adds	r0, r2, #0
  406990:	bf18      	it	ne
  406992:	2001      	movne	r0, #1
  406994:	b002      	add	sp, #8
  406996:	4770      	bx	lr
  406998:	a901      	add	r1, sp, #4
  40699a:	2a00      	cmp	r2, #0
  40699c:	d1f3      	bne.n	406986 <__ascii_mbtowc+0x6>
  40699e:	4610      	mov	r0, r2
  4069a0:	b002      	add	sp, #8
  4069a2:	4770      	bx	lr
  4069a4:	f06f 0001 	mvn.w	r0, #1
  4069a8:	e7f4      	b.n	406994 <__ascii_mbtowc+0x14>
  4069aa:	bf00      	nop
  4069ac:	0000      	movs	r0, r0
	...

004069b0 <memchr>:
  4069b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4069b4:	2a10      	cmp	r2, #16
  4069b6:	db2b      	blt.n	406a10 <memchr+0x60>
  4069b8:	f010 0f07 	tst.w	r0, #7
  4069bc:	d008      	beq.n	4069d0 <memchr+0x20>
  4069be:	f810 3b01 	ldrb.w	r3, [r0], #1
  4069c2:	3a01      	subs	r2, #1
  4069c4:	428b      	cmp	r3, r1
  4069c6:	d02d      	beq.n	406a24 <memchr+0x74>
  4069c8:	f010 0f07 	tst.w	r0, #7
  4069cc:	b342      	cbz	r2, 406a20 <memchr+0x70>
  4069ce:	d1f6      	bne.n	4069be <memchr+0xe>
  4069d0:	b4f0      	push	{r4, r5, r6, r7}
  4069d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4069d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4069da:	f022 0407 	bic.w	r4, r2, #7
  4069de:	f07f 0700 	mvns.w	r7, #0
  4069e2:	2300      	movs	r3, #0
  4069e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4069e8:	3c08      	subs	r4, #8
  4069ea:	ea85 0501 	eor.w	r5, r5, r1
  4069ee:	ea86 0601 	eor.w	r6, r6, r1
  4069f2:	fa85 f547 	uadd8	r5, r5, r7
  4069f6:	faa3 f587 	sel	r5, r3, r7
  4069fa:	fa86 f647 	uadd8	r6, r6, r7
  4069fe:	faa5 f687 	sel	r6, r5, r7
  406a02:	b98e      	cbnz	r6, 406a28 <memchr+0x78>
  406a04:	d1ee      	bne.n	4069e4 <memchr+0x34>
  406a06:	bcf0      	pop	{r4, r5, r6, r7}
  406a08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406a0c:	f002 0207 	and.w	r2, r2, #7
  406a10:	b132      	cbz	r2, 406a20 <memchr+0x70>
  406a12:	f810 3b01 	ldrb.w	r3, [r0], #1
  406a16:	3a01      	subs	r2, #1
  406a18:	ea83 0301 	eor.w	r3, r3, r1
  406a1c:	b113      	cbz	r3, 406a24 <memchr+0x74>
  406a1e:	d1f8      	bne.n	406a12 <memchr+0x62>
  406a20:	2000      	movs	r0, #0
  406a22:	4770      	bx	lr
  406a24:	3801      	subs	r0, #1
  406a26:	4770      	bx	lr
  406a28:	2d00      	cmp	r5, #0
  406a2a:	bf06      	itte	eq
  406a2c:	4635      	moveq	r5, r6
  406a2e:	3803      	subeq	r0, #3
  406a30:	3807      	subne	r0, #7
  406a32:	f015 0f01 	tst.w	r5, #1
  406a36:	d107      	bne.n	406a48 <memchr+0x98>
  406a38:	3001      	adds	r0, #1
  406a3a:	f415 7f80 	tst.w	r5, #256	; 0x100
  406a3e:	bf02      	ittt	eq
  406a40:	3001      	addeq	r0, #1
  406a42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406a46:	3001      	addeq	r0, #1
  406a48:	bcf0      	pop	{r4, r5, r6, r7}
  406a4a:	3801      	subs	r0, #1
  406a4c:	4770      	bx	lr
  406a4e:	bf00      	nop

00406a50 <memmove>:
  406a50:	4288      	cmp	r0, r1
  406a52:	b5f0      	push	{r4, r5, r6, r7, lr}
  406a54:	d90d      	bls.n	406a72 <memmove+0x22>
  406a56:	188b      	adds	r3, r1, r2
  406a58:	4298      	cmp	r0, r3
  406a5a:	d20a      	bcs.n	406a72 <memmove+0x22>
  406a5c:	1884      	adds	r4, r0, r2
  406a5e:	2a00      	cmp	r2, #0
  406a60:	d051      	beq.n	406b06 <memmove+0xb6>
  406a62:	4622      	mov	r2, r4
  406a64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406a68:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406a6c:	4299      	cmp	r1, r3
  406a6e:	d1f9      	bne.n	406a64 <memmove+0x14>
  406a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406a72:	2a0f      	cmp	r2, #15
  406a74:	d948      	bls.n	406b08 <memmove+0xb8>
  406a76:	ea41 0300 	orr.w	r3, r1, r0
  406a7a:	079b      	lsls	r3, r3, #30
  406a7c:	d146      	bne.n	406b0c <memmove+0xbc>
  406a7e:	f100 0410 	add.w	r4, r0, #16
  406a82:	f101 0310 	add.w	r3, r1, #16
  406a86:	4615      	mov	r5, r2
  406a88:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406a8c:	f844 6c10 	str.w	r6, [r4, #-16]
  406a90:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406a94:	f844 6c0c 	str.w	r6, [r4, #-12]
  406a98:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406a9c:	f844 6c08 	str.w	r6, [r4, #-8]
  406aa0:	3d10      	subs	r5, #16
  406aa2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406aa6:	f844 6c04 	str.w	r6, [r4, #-4]
  406aaa:	2d0f      	cmp	r5, #15
  406aac:	f103 0310 	add.w	r3, r3, #16
  406ab0:	f104 0410 	add.w	r4, r4, #16
  406ab4:	d8e8      	bhi.n	406a88 <memmove+0x38>
  406ab6:	f1a2 0310 	sub.w	r3, r2, #16
  406aba:	f023 030f 	bic.w	r3, r3, #15
  406abe:	f002 0e0f 	and.w	lr, r2, #15
  406ac2:	3310      	adds	r3, #16
  406ac4:	f1be 0f03 	cmp.w	lr, #3
  406ac8:	4419      	add	r1, r3
  406aca:	4403      	add	r3, r0
  406acc:	d921      	bls.n	406b12 <memmove+0xc2>
  406ace:	1f1e      	subs	r6, r3, #4
  406ad0:	460d      	mov	r5, r1
  406ad2:	4674      	mov	r4, lr
  406ad4:	3c04      	subs	r4, #4
  406ad6:	f855 7b04 	ldr.w	r7, [r5], #4
  406ada:	f846 7f04 	str.w	r7, [r6, #4]!
  406ade:	2c03      	cmp	r4, #3
  406ae0:	d8f8      	bhi.n	406ad4 <memmove+0x84>
  406ae2:	f1ae 0404 	sub.w	r4, lr, #4
  406ae6:	f024 0403 	bic.w	r4, r4, #3
  406aea:	3404      	adds	r4, #4
  406aec:	4421      	add	r1, r4
  406aee:	4423      	add	r3, r4
  406af0:	f002 0203 	and.w	r2, r2, #3
  406af4:	b162      	cbz	r2, 406b10 <memmove+0xc0>
  406af6:	3b01      	subs	r3, #1
  406af8:	440a      	add	r2, r1
  406afa:	f811 4b01 	ldrb.w	r4, [r1], #1
  406afe:	f803 4f01 	strb.w	r4, [r3, #1]!
  406b02:	428a      	cmp	r2, r1
  406b04:	d1f9      	bne.n	406afa <memmove+0xaa>
  406b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406b08:	4603      	mov	r3, r0
  406b0a:	e7f3      	b.n	406af4 <memmove+0xa4>
  406b0c:	4603      	mov	r3, r0
  406b0e:	e7f2      	b.n	406af6 <memmove+0xa6>
  406b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406b12:	4672      	mov	r2, lr
  406b14:	e7ee      	b.n	406af4 <memmove+0xa4>
  406b16:	bf00      	nop

00406b18 <_realloc_r>:
  406b18:	2900      	cmp	r1, #0
  406b1a:	f000 8095 	beq.w	406c48 <_realloc_r+0x130>
  406b1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406b22:	460d      	mov	r5, r1
  406b24:	4616      	mov	r6, r2
  406b26:	b083      	sub	sp, #12
  406b28:	4680      	mov	r8, r0
  406b2a:	f106 070b 	add.w	r7, r6, #11
  406b2e:	f7fe f943 	bl	404db8 <__malloc_lock>
  406b32:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406b36:	2f16      	cmp	r7, #22
  406b38:	f02e 0403 	bic.w	r4, lr, #3
  406b3c:	f1a5 0908 	sub.w	r9, r5, #8
  406b40:	d83c      	bhi.n	406bbc <_realloc_r+0xa4>
  406b42:	2210      	movs	r2, #16
  406b44:	4617      	mov	r7, r2
  406b46:	42be      	cmp	r6, r7
  406b48:	d83d      	bhi.n	406bc6 <_realloc_r+0xae>
  406b4a:	4294      	cmp	r4, r2
  406b4c:	da43      	bge.n	406bd6 <_realloc_r+0xbe>
  406b4e:	4bc4      	ldr	r3, [pc, #784]	; (406e60 <_realloc_r+0x348>)
  406b50:	6899      	ldr	r1, [r3, #8]
  406b52:	eb09 0004 	add.w	r0, r9, r4
  406b56:	4288      	cmp	r0, r1
  406b58:	f000 80b4 	beq.w	406cc4 <_realloc_r+0x1ac>
  406b5c:	6843      	ldr	r3, [r0, #4]
  406b5e:	f023 0101 	bic.w	r1, r3, #1
  406b62:	4401      	add	r1, r0
  406b64:	6849      	ldr	r1, [r1, #4]
  406b66:	07c9      	lsls	r1, r1, #31
  406b68:	d54c      	bpl.n	406c04 <_realloc_r+0xec>
  406b6a:	f01e 0f01 	tst.w	lr, #1
  406b6e:	f000 809b 	beq.w	406ca8 <_realloc_r+0x190>
  406b72:	4631      	mov	r1, r6
  406b74:	4640      	mov	r0, r8
  406b76:	f7fd fd87 	bl	404688 <_malloc_r>
  406b7a:	4606      	mov	r6, r0
  406b7c:	2800      	cmp	r0, #0
  406b7e:	d03a      	beq.n	406bf6 <_realloc_r+0xde>
  406b80:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406b84:	f023 0301 	bic.w	r3, r3, #1
  406b88:	444b      	add	r3, r9
  406b8a:	f1a0 0208 	sub.w	r2, r0, #8
  406b8e:	429a      	cmp	r2, r3
  406b90:	f000 8121 	beq.w	406dd6 <_realloc_r+0x2be>
  406b94:	1f22      	subs	r2, r4, #4
  406b96:	2a24      	cmp	r2, #36	; 0x24
  406b98:	f200 8107 	bhi.w	406daa <_realloc_r+0x292>
  406b9c:	2a13      	cmp	r2, #19
  406b9e:	f200 80db 	bhi.w	406d58 <_realloc_r+0x240>
  406ba2:	4603      	mov	r3, r0
  406ba4:	462a      	mov	r2, r5
  406ba6:	6811      	ldr	r1, [r2, #0]
  406ba8:	6019      	str	r1, [r3, #0]
  406baa:	6851      	ldr	r1, [r2, #4]
  406bac:	6059      	str	r1, [r3, #4]
  406bae:	6892      	ldr	r2, [r2, #8]
  406bb0:	609a      	str	r2, [r3, #8]
  406bb2:	4629      	mov	r1, r5
  406bb4:	4640      	mov	r0, r8
  406bb6:	f7ff fbcd 	bl	406354 <_free_r>
  406bba:	e01c      	b.n	406bf6 <_realloc_r+0xde>
  406bbc:	f027 0707 	bic.w	r7, r7, #7
  406bc0:	2f00      	cmp	r7, #0
  406bc2:	463a      	mov	r2, r7
  406bc4:	dabf      	bge.n	406b46 <_realloc_r+0x2e>
  406bc6:	2600      	movs	r6, #0
  406bc8:	230c      	movs	r3, #12
  406bca:	4630      	mov	r0, r6
  406bcc:	f8c8 3000 	str.w	r3, [r8]
  406bd0:	b003      	add	sp, #12
  406bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406bd6:	462e      	mov	r6, r5
  406bd8:	1be3      	subs	r3, r4, r7
  406bda:	2b0f      	cmp	r3, #15
  406bdc:	d81e      	bhi.n	406c1c <_realloc_r+0x104>
  406bde:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406be2:	f003 0301 	and.w	r3, r3, #1
  406be6:	4323      	orrs	r3, r4
  406be8:	444c      	add	r4, r9
  406bea:	f8c9 3004 	str.w	r3, [r9, #4]
  406bee:	6863      	ldr	r3, [r4, #4]
  406bf0:	f043 0301 	orr.w	r3, r3, #1
  406bf4:	6063      	str	r3, [r4, #4]
  406bf6:	4640      	mov	r0, r8
  406bf8:	f7fe f8e4 	bl	404dc4 <__malloc_unlock>
  406bfc:	4630      	mov	r0, r6
  406bfe:	b003      	add	sp, #12
  406c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c04:	f023 0303 	bic.w	r3, r3, #3
  406c08:	18e1      	adds	r1, r4, r3
  406c0a:	4291      	cmp	r1, r2
  406c0c:	db1f      	blt.n	406c4e <_realloc_r+0x136>
  406c0e:	68c3      	ldr	r3, [r0, #12]
  406c10:	6882      	ldr	r2, [r0, #8]
  406c12:	462e      	mov	r6, r5
  406c14:	60d3      	str	r3, [r2, #12]
  406c16:	460c      	mov	r4, r1
  406c18:	609a      	str	r2, [r3, #8]
  406c1a:	e7dd      	b.n	406bd8 <_realloc_r+0xc0>
  406c1c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406c20:	eb09 0107 	add.w	r1, r9, r7
  406c24:	f002 0201 	and.w	r2, r2, #1
  406c28:	444c      	add	r4, r9
  406c2a:	f043 0301 	orr.w	r3, r3, #1
  406c2e:	4317      	orrs	r7, r2
  406c30:	f8c9 7004 	str.w	r7, [r9, #4]
  406c34:	604b      	str	r3, [r1, #4]
  406c36:	6863      	ldr	r3, [r4, #4]
  406c38:	f043 0301 	orr.w	r3, r3, #1
  406c3c:	3108      	adds	r1, #8
  406c3e:	6063      	str	r3, [r4, #4]
  406c40:	4640      	mov	r0, r8
  406c42:	f7ff fb87 	bl	406354 <_free_r>
  406c46:	e7d6      	b.n	406bf6 <_realloc_r+0xde>
  406c48:	4611      	mov	r1, r2
  406c4a:	f7fd bd1d 	b.w	404688 <_malloc_r>
  406c4e:	f01e 0f01 	tst.w	lr, #1
  406c52:	d18e      	bne.n	406b72 <_realloc_r+0x5a>
  406c54:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406c58:	eba9 0a01 	sub.w	sl, r9, r1
  406c5c:	f8da 1004 	ldr.w	r1, [sl, #4]
  406c60:	f021 0103 	bic.w	r1, r1, #3
  406c64:	440b      	add	r3, r1
  406c66:	4423      	add	r3, r4
  406c68:	4293      	cmp	r3, r2
  406c6a:	db25      	blt.n	406cb8 <_realloc_r+0x1a0>
  406c6c:	68c2      	ldr	r2, [r0, #12]
  406c6e:	6881      	ldr	r1, [r0, #8]
  406c70:	4656      	mov	r6, sl
  406c72:	60ca      	str	r2, [r1, #12]
  406c74:	6091      	str	r1, [r2, #8]
  406c76:	f8da 100c 	ldr.w	r1, [sl, #12]
  406c7a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406c7e:	1f22      	subs	r2, r4, #4
  406c80:	2a24      	cmp	r2, #36	; 0x24
  406c82:	60c1      	str	r1, [r0, #12]
  406c84:	6088      	str	r0, [r1, #8]
  406c86:	f200 8094 	bhi.w	406db2 <_realloc_r+0x29a>
  406c8a:	2a13      	cmp	r2, #19
  406c8c:	d96f      	bls.n	406d6e <_realloc_r+0x256>
  406c8e:	6829      	ldr	r1, [r5, #0]
  406c90:	f8ca 1008 	str.w	r1, [sl, #8]
  406c94:	6869      	ldr	r1, [r5, #4]
  406c96:	f8ca 100c 	str.w	r1, [sl, #12]
  406c9a:	2a1b      	cmp	r2, #27
  406c9c:	f200 80a2 	bhi.w	406de4 <_realloc_r+0x2cc>
  406ca0:	3508      	adds	r5, #8
  406ca2:	f10a 0210 	add.w	r2, sl, #16
  406ca6:	e063      	b.n	406d70 <_realloc_r+0x258>
  406ca8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  406cac:	eba9 0a03 	sub.w	sl, r9, r3
  406cb0:	f8da 1004 	ldr.w	r1, [sl, #4]
  406cb4:	f021 0103 	bic.w	r1, r1, #3
  406cb8:	1863      	adds	r3, r4, r1
  406cba:	4293      	cmp	r3, r2
  406cbc:	f6ff af59 	blt.w	406b72 <_realloc_r+0x5a>
  406cc0:	4656      	mov	r6, sl
  406cc2:	e7d8      	b.n	406c76 <_realloc_r+0x15e>
  406cc4:	6841      	ldr	r1, [r0, #4]
  406cc6:	f021 0b03 	bic.w	fp, r1, #3
  406cca:	44a3      	add	fp, r4
  406ccc:	f107 0010 	add.w	r0, r7, #16
  406cd0:	4583      	cmp	fp, r0
  406cd2:	da56      	bge.n	406d82 <_realloc_r+0x26a>
  406cd4:	f01e 0f01 	tst.w	lr, #1
  406cd8:	f47f af4b 	bne.w	406b72 <_realloc_r+0x5a>
  406cdc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406ce0:	eba9 0a01 	sub.w	sl, r9, r1
  406ce4:	f8da 1004 	ldr.w	r1, [sl, #4]
  406ce8:	f021 0103 	bic.w	r1, r1, #3
  406cec:	448b      	add	fp, r1
  406cee:	4558      	cmp	r0, fp
  406cf0:	dce2      	bgt.n	406cb8 <_realloc_r+0x1a0>
  406cf2:	4656      	mov	r6, sl
  406cf4:	f8da 100c 	ldr.w	r1, [sl, #12]
  406cf8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406cfc:	1f22      	subs	r2, r4, #4
  406cfe:	2a24      	cmp	r2, #36	; 0x24
  406d00:	60c1      	str	r1, [r0, #12]
  406d02:	6088      	str	r0, [r1, #8]
  406d04:	f200 808f 	bhi.w	406e26 <_realloc_r+0x30e>
  406d08:	2a13      	cmp	r2, #19
  406d0a:	f240 808a 	bls.w	406e22 <_realloc_r+0x30a>
  406d0e:	6829      	ldr	r1, [r5, #0]
  406d10:	f8ca 1008 	str.w	r1, [sl, #8]
  406d14:	6869      	ldr	r1, [r5, #4]
  406d16:	f8ca 100c 	str.w	r1, [sl, #12]
  406d1a:	2a1b      	cmp	r2, #27
  406d1c:	f200 808a 	bhi.w	406e34 <_realloc_r+0x31c>
  406d20:	3508      	adds	r5, #8
  406d22:	f10a 0210 	add.w	r2, sl, #16
  406d26:	6829      	ldr	r1, [r5, #0]
  406d28:	6011      	str	r1, [r2, #0]
  406d2a:	6869      	ldr	r1, [r5, #4]
  406d2c:	6051      	str	r1, [r2, #4]
  406d2e:	68a9      	ldr	r1, [r5, #8]
  406d30:	6091      	str	r1, [r2, #8]
  406d32:	eb0a 0107 	add.w	r1, sl, r7
  406d36:	ebab 0207 	sub.w	r2, fp, r7
  406d3a:	f042 0201 	orr.w	r2, r2, #1
  406d3e:	6099      	str	r1, [r3, #8]
  406d40:	604a      	str	r2, [r1, #4]
  406d42:	f8da 3004 	ldr.w	r3, [sl, #4]
  406d46:	f003 0301 	and.w	r3, r3, #1
  406d4a:	431f      	orrs	r7, r3
  406d4c:	4640      	mov	r0, r8
  406d4e:	f8ca 7004 	str.w	r7, [sl, #4]
  406d52:	f7fe f837 	bl	404dc4 <__malloc_unlock>
  406d56:	e751      	b.n	406bfc <_realloc_r+0xe4>
  406d58:	682b      	ldr	r3, [r5, #0]
  406d5a:	6003      	str	r3, [r0, #0]
  406d5c:	686b      	ldr	r3, [r5, #4]
  406d5e:	6043      	str	r3, [r0, #4]
  406d60:	2a1b      	cmp	r2, #27
  406d62:	d82d      	bhi.n	406dc0 <_realloc_r+0x2a8>
  406d64:	f100 0308 	add.w	r3, r0, #8
  406d68:	f105 0208 	add.w	r2, r5, #8
  406d6c:	e71b      	b.n	406ba6 <_realloc_r+0x8e>
  406d6e:	4632      	mov	r2, r6
  406d70:	6829      	ldr	r1, [r5, #0]
  406d72:	6011      	str	r1, [r2, #0]
  406d74:	6869      	ldr	r1, [r5, #4]
  406d76:	6051      	str	r1, [r2, #4]
  406d78:	68a9      	ldr	r1, [r5, #8]
  406d7a:	6091      	str	r1, [r2, #8]
  406d7c:	461c      	mov	r4, r3
  406d7e:	46d1      	mov	r9, sl
  406d80:	e72a      	b.n	406bd8 <_realloc_r+0xc0>
  406d82:	eb09 0107 	add.w	r1, r9, r7
  406d86:	ebab 0b07 	sub.w	fp, fp, r7
  406d8a:	f04b 0201 	orr.w	r2, fp, #1
  406d8e:	6099      	str	r1, [r3, #8]
  406d90:	604a      	str	r2, [r1, #4]
  406d92:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406d96:	f003 0301 	and.w	r3, r3, #1
  406d9a:	431f      	orrs	r7, r3
  406d9c:	4640      	mov	r0, r8
  406d9e:	f845 7c04 	str.w	r7, [r5, #-4]
  406da2:	f7fe f80f 	bl	404dc4 <__malloc_unlock>
  406da6:	462e      	mov	r6, r5
  406da8:	e728      	b.n	406bfc <_realloc_r+0xe4>
  406daa:	4629      	mov	r1, r5
  406dac:	f7ff fe50 	bl	406a50 <memmove>
  406db0:	e6ff      	b.n	406bb2 <_realloc_r+0x9a>
  406db2:	4629      	mov	r1, r5
  406db4:	4630      	mov	r0, r6
  406db6:	461c      	mov	r4, r3
  406db8:	46d1      	mov	r9, sl
  406dba:	f7ff fe49 	bl	406a50 <memmove>
  406dbe:	e70b      	b.n	406bd8 <_realloc_r+0xc0>
  406dc0:	68ab      	ldr	r3, [r5, #8]
  406dc2:	6083      	str	r3, [r0, #8]
  406dc4:	68eb      	ldr	r3, [r5, #12]
  406dc6:	60c3      	str	r3, [r0, #12]
  406dc8:	2a24      	cmp	r2, #36	; 0x24
  406dca:	d017      	beq.n	406dfc <_realloc_r+0x2e4>
  406dcc:	f100 0310 	add.w	r3, r0, #16
  406dd0:	f105 0210 	add.w	r2, r5, #16
  406dd4:	e6e7      	b.n	406ba6 <_realloc_r+0x8e>
  406dd6:	f850 3c04 	ldr.w	r3, [r0, #-4]
  406dda:	f023 0303 	bic.w	r3, r3, #3
  406dde:	441c      	add	r4, r3
  406de0:	462e      	mov	r6, r5
  406de2:	e6f9      	b.n	406bd8 <_realloc_r+0xc0>
  406de4:	68a9      	ldr	r1, [r5, #8]
  406de6:	f8ca 1010 	str.w	r1, [sl, #16]
  406dea:	68e9      	ldr	r1, [r5, #12]
  406dec:	f8ca 1014 	str.w	r1, [sl, #20]
  406df0:	2a24      	cmp	r2, #36	; 0x24
  406df2:	d00c      	beq.n	406e0e <_realloc_r+0x2f6>
  406df4:	3510      	adds	r5, #16
  406df6:	f10a 0218 	add.w	r2, sl, #24
  406dfa:	e7b9      	b.n	406d70 <_realloc_r+0x258>
  406dfc:	692b      	ldr	r3, [r5, #16]
  406dfe:	6103      	str	r3, [r0, #16]
  406e00:	696b      	ldr	r3, [r5, #20]
  406e02:	6143      	str	r3, [r0, #20]
  406e04:	f105 0218 	add.w	r2, r5, #24
  406e08:	f100 0318 	add.w	r3, r0, #24
  406e0c:	e6cb      	b.n	406ba6 <_realloc_r+0x8e>
  406e0e:	692a      	ldr	r2, [r5, #16]
  406e10:	f8ca 2018 	str.w	r2, [sl, #24]
  406e14:	696a      	ldr	r2, [r5, #20]
  406e16:	f8ca 201c 	str.w	r2, [sl, #28]
  406e1a:	3518      	adds	r5, #24
  406e1c:	f10a 0220 	add.w	r2, sl, #32
  406e20:	e7a6      	b.n	406d70 <_realloc_r+0x258>
  406e22:	4632      	mov	r2, r6
  406e24:	e77f      	b.n	406d26 <_realloc_r+0x20e>
  406e26:	4629      	mov	r1, r5
  406e28:	4630      	mov	r0, r6
  406e2a:	9301      	str	r3, [sp, #4]
  406e2c:	f7ff fe10 	bl	406a50 <memmove>
  406e30:	9b01      	ldr	r3, [sp, #4]
  406e32:	e77e      	b.n	406d32 <_realloc_r+0x21a>
  406e34:	68a9      	ldr	r1, [r5, #8]
  406e36:	f8ca 1010 	str.w	r1, [sl, #16]
  406e3a:	68e9      	ldr	r1, [r5, #12]
  406e3c:	f8ca 1014 	str.w	r1, [sl, #20]
  406e40:	2a24      	cmp	r2, #36	; 0x24
  406e42:	d003      	beq.n	406e4c <_realloc_r+0x334>
  406e44:	3510      	adds	r5, #16
  406e46:	f10a 0218 	add.w	r2, sl, #24
  406e4a:	e76c      	b.n	406d26 <_realloc_r+0x20e>
  406e4c:	692a      	ldr	r2, [r5, #16]
  406e4e:	f8ca 2018 	str.w	r2, [sl, #24]
  406e52:	696a      	ldr	r2, [r5, #20]
  406e54:	f8ca 201c 	str.w	r2, [sl, #28]
  406e58:	3518      	adds	r5, #24
  406e5a:	f10a 0220 	add.w	r2, sl, #32
  406e5e:	e762      	b.n	406d26 <_realloc_r+0x20e>
  406e60:	20400440 	.word	0x20400440

00406e64 <__sread>:
  406e64:	b510      	push	{r4, lr}
  406e66:	460c      	mov	r4, r1
  406e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406e6c:	f000 f9f6 	bl	40725c <_read_r>
  406e70:	2800      	cmp	r0, #0
  406e72:	db03      	blt.n	406e7c <__sread+0x18>
  406e74:	6d23      	ldr	r3, [r4, #80]	; 0x50
  406e76:	4403      	add	r3, r0
  406e78:	6523      	str	r3, [r4, #80]	; 0x50
  406e7a:	bd10      	pop	{r4, pc}
  406e7c:	89a3      	ldrh	r3, [r4, #12]
  406e7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406e82:	81a3      	strh	r3, [r4, #12]
  406e84:	bd10      	pop	{r4, pc}
  406e86:	bf00      	nop

00406e88 <__swrite>:
  406e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406e8c:	4616      	mov	r6, r2
  406e8e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406e92:	461f      	mov	r7, r3
  406e94:	05d3      	lsls	r3, r2, #23
  406e96:	460c      	mov	r4, r1
  406e98:	4605      	mov	r5, r0
  406e9a:	d507      	bpl.n	406eac <__swrite+0x24>
  406e9c:	2200      	movs	r2, #0
  406e9e:	2302      	movs	r3, #2
  406ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406ea4:	f000 f9c4 	bl	407230 <_lseek_r>
  406ea8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406eac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406eb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406eb4:	81a2      	strh	r2, [r4, #12]
  406eb6:	463b      	mov	r3, r7
  406eb8:	4632      	mov	r2, r6
  406eba:	4628      	mov	r0, r5
  406ebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406ec0:	f000 b8a4 	b.w	40700c <_write_r>

00406ec4 <__sseek>:
  406ec4:	b510      	push	{r4, lr}
  406ec6:	460c      	mov	r4, r1
  406ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406ecc:	f000 f9b0 	bl	407230 <_lseek_r>
  406ed0:	89a3      	ldrh	r3, [r4, #12]
  406ed2:	1c42      	adds	r2, r0, #1
  406ed4:	bf0e      	itee	eq
  406ed6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  406eda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406ede:	6520      	strne	r0, [r4, #80]	; 0x50
  406ee0:	81a3      	strh	r3, [r4, #12]
  406ee2:	bd10      	pop	{r4, pc}

00406ee4 <__sclose>:
  406ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406ee8:	f000 b908 	b.w	4070fc <_close_r>

00406eec <__swbuf_r>:
  406eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406eee:	460d      	mov	r5, r1
  406ef0:	4614      	mov	r4, r2
  406ef2:	4606      	mov	r6, r0
  406ef4:	b110      	cbz	r0, 406efc <__swbuf_r+0x10>
  406ef6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406ef8:	2b00      	cmp	r3, #0
  406efa:	d04b      	beq.n	406f94 <__swbuf_r+0xa8>
  406efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406f00:	69a3      	ldr	r3, [r4, #24]
  406f02:	60a3      	str	r3, [r4, #8]
  406f04:	b291      	uxth	r1, r2
  406f06:	0708      	lsls	r0, r1, #28
  406f08:	d539      	bpl.n	406f7e <__swbuf_r+0x92>
  406f0a:	6923      	ldr	r3, [r4, #16]
  406f0c:	2b00      	cmp	r3, #0
  406f0e:	d036      	beq.n	406f7e <__swbuf_r+0x92>
  406f10:	b2ed      	uxtb	r5, r5
  406f12:	0489      	lsls	r1, r1, #18
  406f14:	462f      	mov	r7, r5
  406f16:	d515      	bpl.n	406f44 <__swbuf_r+0x58>
  406f18:	6822      	ldr	r2, [r4, #0]
  406f1a:	6961      	ldr	r1, [r4, #20]
  406f1c:	1ad3      	subs	r3, r2, r3
  406f1e:	428b      	cmp	r3, r1
  406f20:	da1c      	bge.n	406f5c <__swbuf_r+0x70>
  406f22:	3301      	adds	r3, #1
  406f24:	68a1      	ldr	r1, [r4, #8]
  406f26:	1c50      	adds	r0, r2, #1
  406f28:	3901      	subs	r1, #1
  406f2a:	60a1      	str	r1, [r4, #8]
  406f2c:	6020      	str	r0, [r4, #0]
  406f2e:	7015      	strb	r5, [r2, #0]
  406f30:	6962      	ldr	r2, [r4, #20]
  406f32:	429a      	cmp	r2, r3
  406f34:	d01a      	beq.n	406f6c <__swbuf_r+0x80>
  406f36:	89a3      	ldrh	r3, [r4, #12]
  406f38:	07db      	lsls	r3, r3, #31
  406f3a:	d501      	bpl.n	406f40 <__swbuf_r+0x54>
  406f3c:	2d0a      	cmp	r5, #10
  406f3e:	d015      	beq.n	406f6c <__swbuf_r+0x80>
  406f40:	4638      	mov	r0, r7
  406f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406f44:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406f46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406f4a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  406f4e:	81a2      	strh	r2, [r4, #12]
  406f50:	6822      	ldr	r2, [r4, #0]
  406f52:	6661      	str	r1, [r4, #100]	; 0x64
  406f54:	6961      	ldr	r1, [r4, #20]
  406f56:	1ad3      	subs	r3, r2, r3
  406f58:	428b      	cmp	r3, r1
  406f5a:	dbe2      	blt.n	406f22 <__swbuf_r+0x36>
  406f5c:	4621      	mov	r1, r4
  406f5e:	4630      	mov	r0, r6
  406f60:	f7ff f87a 	bl	406058 <_fflush_r>
  406f64:	b940      	cbnz	r0, 406f78 <__swbuf_r+0x8c>
  406f66:	6822      	ldr	r2, [r4, #0]
  406f68:	2301      	movs	r3, #1
  406f6a:	e7db      	b.n	406f24 <__swbuf_r+0x38>
  406f6c:	4621      	mov	r1, r4
  406f6e:	4630      	mov	r0, r6
  406f70:	f7ff f872 	bl	406058 <_fflush_r>
  406f74:	2800      	cmp	r0, #0
  406f76:	d0e3      	beq.n	406f40 <__swbuf_r+0x54>
  406f78:	f04f 37ff 	mov.w	r7, #4294967295
  406f7c:	e7e0      	b.n	406f40 <__swbuf_r+0x54>
  406f7e:	4621      	mov	r1, r4
  406f80:	4630      	mov	r0, r6
  406f82:	f7fe ff55 	bl	405e30 <__swsetup_r>
  406f86:	2800      	cmp	r0, #0
  406f88:	d1f6      	bne.n	406f78 <__swbuf_r+0x8c>
  406f8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406f8e:	6923      	ldr	r3, [r4, #16]
  406f90:	b291      	uxth	r1, r2
  406f92:	e7bd      	b.n	406f10 <__swbuf_r+0x24>
  406f94:	f7ff f8b8 	bl	406108 <__sinit>
  406f98:	e7b0      	b.n	406efc <__swbuf_r+0x10>
  406f9a:	bf00      	nop

00406f9c <_wcrtomb_r>:
  406f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  406f9e:	4606      	mov	r6, r0
  406fa0:	b085      	sub	sp, #20
  406fa2:	461f      	mov	r7, r3
  406fa4:	b189      	cbz	r1, 406fca <_wcrtomb_r+0x2e>
  406fa6:	4c10      	ldr	r4, [pc, #64]	; (406fe8 <_wcrtomb_r+0x4c>)
  406fa8:	4d10      	ldr	r5, [pc, #64]	; (406fec <_wcrtomb_r+0x50>)
  406faa:	6824      	ldr	r4, [r4, #0]
  406fac:	6b64      	ldr	r4, [r4, #52]	; 0x34
  406fae:	2c00      	cmp	r4, #0
  406fb0:	bf08      	it	eq
  406fb2:	462c      	moveq	r4, r5
  406fb4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406fb8:	47a0      	blx	r4
  406fba:	1c43      	adds	r3, r0, #1
  406fbc:	d103      	bne.n	406fc6 <_wcrtomb_r+0x2a>
  406fbe:	2200      	movs	r2, #0
  406fc0:	238a      	movs	r3, #138	; 0x8a
  406fc2:	603a      	str	r2, [r7, #0]
  406fc4:	6033      	str	r3, [r6, #0]
  406fc6:	b005      	add	sp, #20
  406fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406fca:	460c      	mov	r4, r1
  406fcc:	4906      	ldr	r1, [pc, #24]	; (406fe8 <_wcrtomb_r+0x4c>)
  406fce:	4a07      	ldr	r2, [pc, #28]	; (406fec <_wcrtomb_r+0x50>)
  406fd0:	6809      	ldr	r1, [r1, #0]
  406fd2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406fd4:	2900      	cmp	r1, #0
  406fd6:	bf08      	it	eq
  406fd8:	4611      	moveq	r1, r2
  406fda:	4622      	mov	r2, r4
  406fdc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406fe0:	a901      	add	r1, sp, #4
  406fe2:	47a0      	blx	r4
  406fe4:	e7e9      	b.n	406fba <_wcrtomb_r+0x1e>
  406fe6:	bf00      	nop
  406fe8:	20400014 	.word	0x20400014
  406fec:	20400854 	.word	0x20400854

00406ff0 <__ascii_wctomb>:
  406ff0:	b121      	cbz	r1, 406ffc <__ascii_wctomb+0xc>
  406ff2:	2aff      	cmp	r2, #255	; 0xff
  406ff4:	d804      	bhi.n	407000 <__ascii_wctomb+0x10>
  406ff6:	700a      	strb	r2, [r1, #0]
  406ff8:	2001      	movs	r0, #1
  406ffa:	4770      	bx	lr
  406ffc:	4608      	mov	r0, r1
  406ffe:	4770      	bx	lr
  407000:	238a      	movs	r3, #138	; 0x8a
  407002:	6003      	str	r3, [r0, #0]
  407004:	f04f 30ff 	mov.w	r0, #4294967295
  407008:	4770      	bx	lr
  40700a:	bf00      	nop

0040700c <_write_r>:
  40700c:	b570      	push	{r4, r5, r6, lr}
  40700e:	460d      	mov	r5, r1
  407010:	4c08      	ldr	r4, [pc, #32]	; (407034 <_write_r+0x28>)
  407012:	4611      	mov	r1, r2
  407014:	4606      	mov	r6, r0
  407016:	461a      	mov	r2, r3
  407018:	4628      	mov	r0, r5
  40701a:	2300      	movs	r3, #0
  40701c:	6023      	str	r3, [r4, #0]
  40701e:	f7f9 fe63 	bl	400ce8 <_write>
  407022:	1c43      	adds	r3, r0, #1
  407024:	d000      	beq.n	407028 <_write_r+0x1c>
  407026:	bd70      	pop	{r4, r5, r6, pc}
  407028:	6823      	ldr	r3, [r4, #0]
  40702a:	2b00      	cmp	r3, #0
  40702c:	d0fb      	beq.n	407026 <_write_r+0x1a>
  40702e:	6033      	str	r3, [r6, #0]
  407030:	bd70      	pop	{r4, r5, r6, pc}
  407032:	bf00      	nop
  407034:	2040c8a8 	.word	0x2040c8a8

00407038 <__register_exitproc>:
  407038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40703c:	4d2c      	ldr	r5, [pc, #176]	; (4070f0 <__register_exitproc+0xb8>)
  40703e:	4606      	mov	r6, r0
  407040:	6828      	ldr	r0, [r5, #0]
  407042:	4698      	mov	r8, r3
  407044:	460f      	mov	r7, r1
  407046:	4691      	mov	r9, r2
  407048:	f7ff fc1e 	bl	406888 <__retarget_lock_acquire_recursive>
  40704c:	4b29      	ldr	r3, [pc, #164]	; (4070f4 <__register_exitproc+0xbc>)
  40704e:	681c      	ldr	r4, [r3, #0]
  407050:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  407054:	2b00      	cmp	r3, #0
  407056:	d03e      	beq.n	4070d6 <__register_exitproc+0x9e>
  407058:	685a      	ldr	r2, [r3, #4]
  40705a:	2a1f      	cmp	r2, #31
  40705c:	dc1c      	bgt.n	407098 <__register_exitproc+0x60>
  40705e:	f102 0e01 	add.w	lr, r2, #1
  407062:	b176      	cbz	r6, 407082 <__register_exitproc+0x4a>
  407064:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  407068:	2401      	movs	r4, #1
  40706a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40706e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  407072:	4094      	lsls	r4, r2
  407074:	4320      	orrs	r0, r4
  407076:	2e02      	cmp	r6, #2
  407078:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40707c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  407080:	d023      	beq.n	4070ca <__register_exitproc+0x92>
  407082:	3202      	adds	r2, #2
  407084:	f8c3 e004 	str.w	lr, [r3, #4]
  407088:	6828      	ldr	r0, [r5, #0]
  40708a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40708e:	f7ff fbfd 	bl	40688c <__retarget_lock_release_recursive>
  407092:	2000      	movs	r0, #0
  407094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407098:	4b17      	ldr	r3, [pc, #92]	; (4070f8 <__register_exitproc+0xc0>)
  40709a:	b30b      	cbz	r3, 4070e0 <__register_exitproc+0xa8>
  40709c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4070a0:	f7fd faea 	bl	404678 <malloc>
  4070a4:	4603      	mov	r3, r0
  4070a6:	b1d8      	cbz	r0, 4070e0 <__register_exitproc+0xa8>
  4070a8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4070ac:	6002      	str	r2, [r0, #0]
  4070ae:	2100      	movs	r1, #0
  4070b0:	6041      	str	r1, [r0, #4]
  4070b2:	460a      	mov	r2, r1
  4070b4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4070b8:	f04f 0e01 	mov.w	lr, #1
  4070bc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4070c0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4070c4:	2e00      	cmp	r6, #0
  4070c6:	d0dc      	beq.n	407082 <__register_exitproc+0x4a>
  4070c8:	e7cc      	b.n	407064 <__register_exitproc+0x2c>
  4070ca:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4070ce:	430c      	orrs	r4, r1
  4070d0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4070d4:	e7d5      	b.n	407082 <__register_exitproc+0x4a>
  4070d6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4070da:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4070de:	e7bb      	b.n	407058 <__register_exitproc+0x20>
  4070e0:	6828      	ldr	r0, [r5, #0]
  4070e2:	f7ff fbd3 	bl	40688c <__retarget_lock_release_recursive>
  4070e6:	f04f 30ff 	mov.w	r0, #4294967295
  4070ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4070ee:	bf00      	nop
  4070f0:	20400850 	.word	0x20400850
  4070f4:	004076b4 	.word	0x004076b4
  4070f8:	00404679 	.word	0x00404679

004070fc <_close_r>:
  4070fc:	b538      	push	{r3, r4, r5, lr}
  4070fe:	4c07      	ldr	r4, [pc, #28]	; (40711c <_close_r+0x20>)
  407100:	2300      	movs	r3, #0
  407102:	4605      	mov	r5, r0
  407104:	4608      	mov	r0, r1
  407106:	6023      	str	r3, [r4, #0]
  407108:	f7fb f868 	bl	4021dc <_close>
  40710c:	1c43      	adds	r3, r0, #1
  40710e:	d000      	beq.n	407112 <_close_r+0x16>
  407110:	bd38      	pop	{r3, r4, r5, pc}
  407112:	6823      	ldr	r3, [r4, #0]
  407114:	2b00      	cmp	r3, #0
  407116:	d0fb      	beq.n	407110 <_close_r+0x14>
  407118:	602b      	str	r3, [r5, #0]
  40711a:	bd38      	pop	{r3, r4, r5, pc}
  40711c:	2040c8a8 	.word	0x2040c8a8

00407120 <_fclose_r>:
  407120:	b570      	push	{r4, r5, r6, lr}
  407122:	b159      	cbz	r1, 40713c <_fclose_r+0x1c>
  407124:	4605      	mov	r5, r0
  407126:	460c      	mov	r4, r1
  407128:	b110      	cbz	r0, 407130 <_fclose_r+0x10>
  40712a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40712c:	2b00      	cmp	r3, #0
  40712e:	d03c      	beq.n	4071aa <_fclose_r+0x8a>
  407130:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407132:	07d8      	lsls	r0, r3, #31
  407134:	d505      	bpl.n	407142 <_fclose_r+0x22>
  407136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40713a:	b92b      	cbnz	r3, 407148 <_fclose_r+0x28>
  40713c:	2600      	movs	r6, #0
  40713e:	4630      	mov	r0, r6
  407140:	bd70      	pop	{r4, r5, r6, pc}
  407142:	89a3      	ldrh	r3, [r4, #12]
  407144:	0599      	lsls	r1, r3, #22
  407146:	d53c      	bpl.n	4071c2 <_fclose_r+0xa2>
  407148:	4621      	mov	r1, r4
  40714a:	4628      	mov	r0, r5
  40714c:	f7fe fee4 	bl	405f18 <__sflush_r>
  407150:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  407152:	4606      	mov	r6, r0
  407154:	b133      	cbz	r3, 407164 <_fclose_r+0x44>
  407156:	69e1      	ldr	r1, [r4, #28]
  407158:	4628      	mov	r0, r5
  40715a:	4798      	blx	r3
  40715c:	2800      	cmp	r0, #0
  40715e:	bfb8      	it	lt
  407160:	f04f 36ff 	movlt.w	r6, #4294967295
  407164:	89a3      	ldrh	r3, [r4, #12]
  407166:	061a      	lsls	r2, r3, #24
  407168:	d422      	bmi.n	4071b0 <_fclose_r+0x90>
  40716a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40716c:	b141      	cbz	r1, 407180 <_fclose_r+0x60>
  40716e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407172:	4299      	cmp	r1, r3
  407174:	d002      	beq.n	40717c <_fclose_r+0x5c>
  407176:	4628      	mov	r0, r5
  407178:	f7ff f8ec 	bl	406354 <_free_r>
  40717c:	2300      	movs	r3, #0
  40717e:	6323      	str	r3, [r4, #48]	; 0x30
  407180:	6c61      	ldr	r1, [r4, #68]	; 0x44
  407182:	b121      	cbz	r1, 40718e <_fclose_r+0x6e>
  407184:	4628      	mov	r0, r5
  407186:	f7ff f8e5 	bl	406354 <_free_r>
  40718a:	2300      	movs	r3, #0
  40718c:	6463      	str	r3, [r4, #68]	; 0x44
  40718e:	f7fe ffe7 	bl	406160 <__sfp_lock_acquire>
  407192:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407194:	2200      	movs	r2, #0
  407196:	07db      	lsls	r3, r3, #31
  407198:	81a2      	strh	r2, [r4, #12]
  40719a:	d50e      	bpl.n	4071ba <_fclose_r+0x9a>
  40719c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40719e:	f7ff fb71 	bl	406884 <__retarget_lock_close_recursive>
  4071a2:	f7fe ffe3 	bl	40616c <__sfp_lock_release>
  4071a6:	4630      	mov	r0, r6
  4071a8:	bd70      	pop	{r4, r5, r6, pc}
  4071aa:	f7fe ffad 	bl	406108 <__sinit>
  4071ae:	e7bf      	b.n	407130 <_fclose_r+0x10>
  4071b0:	6921      	ldr	r1, [r4, #16]
  4071b2:	4628      	mov	r0, r5
  4071b4:	f7ff f8ce 	bl	406354 <_free_r>
  4071b8:	e7d7      	b.n	40716a <_fclose_r+0x4a>
  4071ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4071bc:	f7ff fb66 	bl	40688c <__retarget_lock_release_recursive>
  4071c0:	e7ec      	b.n	40719c <_fclose_r+0x7c>
  4071c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4071c4:	f7ff fb60 	bl	406888 <__retarget_lock_acquire_recursive>
  4071c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4071cc:	2b00      	cmp	r3, #0
  4071ce:	d1bb      	bne.n	407148 <_fclose_r+0x28>
  4071d0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4071d2:	f016 0601 	ands.w	r6, r6, #1
  4071d6:	d1b1      	bne.n	40713c <_fclose_r+0x1c>
  4071d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4071da:	f7ff fb57 	bl	40688c <__retarget_lock_release_recursive>
  4071de:	4630      	mov	r0, r6
  4071e0:	bd70      	pop	{r4, r5, r6, pc}
  4071e2:	bf00      	nop

004071e4 <_fstat_r>:
  4071e4:	b538      	push	{r3, r4, r5, lr}
  4071e6:	460b      	mov	r3, r1
  4071e8:	4c07      	ldr	r4, [pc, #28]	; (407208 <_fstat_r+0x24>)
  4071ea:	4605      	mov	r5, r0
  4071ec:	4611      	mov	r1, r2
  4071ee:	4618      	mov	r0, r3
  4071f0:	2300      	movs	r3, #0
  4071f2:	6023      	str	r3, [r4, #0]
  4071f4:	f7fa fff5 	bl	4021e2 <_fstat>
  4071f8:	1c43      	adds	r3, r0, #1
  4071fa:	d000      	beq.n	4071fe <_fstat_r+0x1a>
  4071fc:	bd38      	pop	{r3, r4, r5, pc}
  4071fe:	6823      	ldr	r3, [r4, #0]
  407200:	2b00      	cmp	r3, #0
  407202:	d0fb      	beq.n	4071fc <_fstat_r+0x18>
  407204:	602b      	str	r3, [r5, #0]
  407206:	bd38      	pop	{r3, r4, r5, pc}
  407208:	2040c8a8 	.word	0x2040c8a8

0040720c <_isatty_r>:
  40720c:	b538      	push	{r3, r4, r5, lr}
  40720e:	4c07      	ldr	r4, [pc, #28]	; (40722c <_isatty_r+0x20>)
  407210:	2300      	movs	r3, #0
  407212:	4605      	mov	r5, r0
  407214:	4608      	mov	r0, r1
  407216:	6023      	str	r3, [r4, #0]
  407218:	f7fa ffe8 	bl	4021ec <_isatty>
  40721c:	1c43      	adds	r3, r0, #1
  40721e:	d000      	beq.n	407222 <_isatty_r+0x16>
  407220:	bd38      	pop	{r3, r4, r5, pc}
  407222:	6823      	ldr	r3, [r4, #0]
  407224:	2b00      	cmp	r3, #0
  407226:	d0fb      	beq.n	407220 <_isatty_r+0x14>
  407228:	602b      	str	r3, [r5, #0]
  40722a:	bd38      	pop	{r3, r4, r5, pc}
  40722c:	2040c8a8 	.word	0x2040c8a8

00407230 <_lseek_r>:
  407230:	b570      	push	{r4, r5, r6, lr}
  407232:	460d      	mov	r5, r1
  407234:	4c08      	ldr	r4, [pc, #32]	; (407258 <_lseek_r+0x28>)
  407236:	4611      	mov	r1, r2
  407238:	4606      	mov	r6, r0
  40723a:	461a      	mov	r2, r3
  40723c:	4628      	mov	r0, r5
  40723e:	2300      	movs	r3, #0
  407240:	6023      	str	r3, [r4, #0]
  407242:	f7fa ffd5 	bl	4021f0 <_lseek>
  407246:	1c43      	adds	r3, r0, #1
  407248:	d000      	beq.n	40724c <_lseek_r+0x1c>
  40724a:	bd70      	pop	{r4, r5, r6, pc}
  40724c:	6823      	ldr	r3, [r4, #0]
  40724e:	2b00      	cmp	r3, #0
  407250:	d0fb      	beq.n	40724a <_lseek_r+0x1a>
  407252:	6033      	str	r3, [r6, #0]
  407254:	bd70      	pop	{r4, r5, r6, pc}
  407256:	bf00      	nop
  407258:	2040c8a8 	.word	0x2040c8a8

0040725c <_read_r>:
  40725c:	b570      	push	{r4, r5, r6, lr}
  40725e:	460d      	mov	r5, r1
  407260:	4c08      	ldr	r4, [pc, #32]	; (407284 <_read_r+0x28>)
  407262:	4611      	mov	r1, r2
  407264:	4606      	mov	r6, r0
  407266:	461a      	mov	r2, r3
  407268:	4628      	mov	r0, r5
  40726a:	2300      	movs	r3, #0
  40726c:	6023      	str	r3, [r4, #0]
  40726e:	f7f9 fd1d 	bl	400cac <_read>
  407272:	1c43      	adds	r3, r0, #1
  407274:	d000      	beq.n	407278 <_read_r+0x1c>
  407276:	bd70      	pop	{r4, r5, r6, pc}
  407278:	6823      	ldr	r3, [r4, #0]
  40727a:	2b00      	cmp	r3, #0
  40727c:	d0fb      	beq.n	407276 <_read_r+0x1a>
  40727e:	6033      	str	r3, [r6, #0]
  407280:	bd70      	pop	{r4, r5, r6, pc}
  407282:	bf00      	nop
  407284:	2040c8a8 	.word	0x2040c8a8

00407288 <__aeabi_uldivmod>:
  407288:	b953      	cbnz	r3, 4072a0 <__aeabi_uldivmod+0x18>
  40728a:	b94a      	cbnz	r2, 4072a0 <__aeabi_uldivmod+0x18>
  40728c:	2900      	cmp	r1, #0
  40728e:	bf08      	it	eq
  407290:	2800      	cmpeq	r0, #0
  407292:	bf1c      	itt	ne
  407294:	f04f 31ff 	movne.w	r1, #4294967295
  407298:	f04f 30ff 	movne.w	r0, #4294967295
  40729c:	f000 b97a 	b.w	407594 <__aeabi_idiv0>
  4072a0:	f1ad 0c08 	sub.w	ip, sp, #8
  4072a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4072a8:	f000 f806 	bl	4072b8 <__udivmoddi4>
  4072ac:	f8dd e004 	ldr.w	lr, [sp, #4]
  4072b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4072b4:	b004      	add	sp, #16
  4072b6:	4770      	bx	lr

004072b8 <__udivmoddi4>:
  4072b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4072bc:	468c      	mov	ip, r1
  4072be:	460d      	mov	r5, r1
  4072c0:	4604      	mov	r4, r0
  4072c2:	9e08      	ldr	r6, [sp, #32]
  4072c4:	2b00      	cmp	r3, #0
  4072c6:	d151      	bne.n	40736c <__udivmoddi4+0xb4>
  4072c8:	428a      	cmp	r2, r1
  4072ca:	4617      	mov	r7, r2
  4072cc:	d96d      	bls.n	4073aa <__udivmoddi4+0xf2>
  4072ce:	fab2 fe82 	clz	lr, r2
  4072d2:	f1be 0f00 	cmp.w	lr, #0
  4072d6:	d00b      	beq.n	4072f0 <__udivmoddi4+0x38>
  4072d8:	f1ce 0c20 	rsb	ip, lr, #32
  4072dc:	fa01 f50e 	lsl.w	r5, r1, lr
  4072e0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4072e4:	fa02 f70e 	lsl.w	r7, r2, lr
  4072e8:	ea4c 0c05 	orr.w	ip, ip, r5
  4072ec:	fa00 f40e 	lsl.w	r4, r0, lr
  4072f0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4072f4:	0c25      	lsrs	r5, r4, #16
  4072f6:	fbbc f8fa 	udiv	r8, ip, sl
  4072fa:	fa1f f987 	uxth.w	r9, r7
  4072fe:	fb0a cc18 	mls	ip, sl, r8, ip
  407302:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  407306:	fb08 f309 	mul.w	r3, r8, r9
  40730a:	42ab      	cmp	r3, r5
  40730c:	d90a      	bls.n	407324 <__udivmoddi4+0x6c>
  40730e:	19ed      	adds	r5, r5, r7
  407310:	f108 32ff 	add.w	r2, r8, #4294967295
  407314:	f080 8123 	bcs.w	40755e <__udivmoddi4+0x2a6>
  407318:	42ab      	cmp	r3, r5
  40731a:	f240 8120 	bls.w	40755e <__udivmoddi4+0x2a6>
  40731e:	f1a8 0802 	sub.w	r8, r8, #2
  407322:	443d      	add	r5, r7
  407324:	1aed      	subs	r5, r5, r3
  407326:	b2a4      	uxth	r4, r4
  407328:	fbb5 f0fa 	udiv	r0, r5, sl
  40732c:	fb0a 5510 	mls	r5, sl, r0, r5
  407330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  407334:	fb00 f909 	mul.w	r9, r0, r9
  407338:	45a1      	cmp	r9, r4
  40733a:	d909      	bls.n	407350 <__udivmoddi4+0x98>
  40733c:	19e4      	adds	r4, r4, r7
  40733e:	f100 33ff 	add.w	r3, r0, #4294967295
  407342:	f080 810a 	bcs.w	40755a <__udivmoddi4+0x2a2>
  407346:	45a1      	cmp	r9, r4
  407348:	f240 8107 	bls.w	40755a <__udivmoddi4+0x2a2>
  40734c:	3802      	subs	r0, #2
  40734e:	443c      	add	r4, r7
  407350:	eba4 0409 	sub.w	r4, r4, r9
  407354:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  407358:	2100      	movs	r1, #0
  40735a:	2e00      	cmp	r6, #0
  40735c:	d061      	beq.n	407422 <__udivmoddi4+0x16a>
  40735e:	fa24 f40e 	lsr.w	r4, r4, lr
  407362:	2300      	movs	r3, #0
  407364:	6034      	str	r4, [r6, #0]
  407366:	6073      	str	r3, [r6, #4]
  407368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40736c:	428b      	cmp	r3, r1
  40736e:	d907      	bls.n	407380 <__udivmoddi4+0xc8>
  407370:	2e00      	cmp	r6, #0
  407372:	d054      	beq.n	40741e <__udivmoddi4+0x166>
  407374:	2100      	movs	r1, #0
  407376:	e886 0021 	stmia.w	r6, {r0, r5}
  40737a:	4608      	mov	r0, r1
  40737c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407380:	fab3 f183 	clz	r1, r3
  407384:	2900      	cmp	r1, #0
  407386:	f040 808e 	bne.w	4074a6 <__udivmoddi4+0x1ee>
  40738a:	42ab      	cmp	r3, r5
  40738c:	d302      	bcc.n	407394 <__udivmoddi4+0xdc>
  40738e:	4282      	cmp	r2, r0
  407390:	f200 80fa 	bhi.w	407588 <__udivmoddi4+0x2d0>
  407394:	1a84      	subs	r4, r0, r2
  407396:	eb65 0503 	sbc.w	r5, r5, r3
  40739a:	2001      	movs	r0, #1
  40739c:	46ac      	mov	ip, r5
  40739e:	2e00      	cmp	r6, #0
  4073a0:	d03f      	beq.n	407422 <__udivmoddi4+0x16a>
  4073a2:	e886 1010 	stmia.w	r6, {r4, ip}
  4073a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4073aa:	b912      	cbnz	r2, 4073b2 <__udivmoddi4+0xfa>
  4073ac:	2701      	movs	r7, #1
  4073ae:	fbb7 f7f2 	udiv	r7, r7, r2
  4073b2:	fab7 fe87 	clz	lr, r7
  4073b6:	f1be 0f00 	cmp.w	lr, #0
  4073ba:	d134      	bne.n	407426 <__udivmoddi4+0x16e>
  4073bc:	1beb      	subs	r3, r5, r7
  4073be:	0c3a      	lsrs	r2, r7, #16
  4073c0:	fa1f fc87 	uxth.w	ip, r7
  4073c4:	2101      	movs	r1, #1
  4073c6:	fbb3 f8f2 	udiv	r8, r3, r2
  4073ca:	0c25      	lsrs	r5, r4, #16
  4073cc:	fb02 3318 	mls	r3, r2, r8, r3
  4073d0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4073d4:	fb0c f308 	mul.w	r3, ip, r8
  4073d8:	42ab      	cmp	r3, r5
  4073da:	d907      	bls.n	4073ec <__udivmoddi4+0x134>
  4073dc:	19ed      	adds	r5, r5, r7
  4073de:	f108 30ff 	add.w	r0, r8, #4294967295
  4073e2:	d202      	bcs.n	4073ea <__udivmoddi4+0x132>
  4073e4:	42ab      	cmp	r3, r5
  4073e6:	f200 80d1 	bhi.w	40758c <__udivmoddi4+0x2d4>
  4073ea:	4680      	mov	r8, r0
  4073ec:	1aed      	subs	r5, r5, r3
  4073ee:	b2a3      	uxth	r3, r4
  4073f0:	fbb5 f0f2 	udiv	r0, r5, r2
  4073f4:	fb02 5510 	mls	r5, r2, r0, r5
  4073f8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4073fc:	fb0c fc00 	mul.w	ip, ip, r0
  407400:	45a4      	cmp	ip, r4
  407402:	d907      	bls.n	407414 <__udivmoddi4+0x15c>
  407404:	19e4      	adds	r4, r4, r7
  407406:	f100 33ff 	add.w	r3, r0, #4294967295
  40740a:	d202      	bcs.n	407412 <__udivmoddi4+0x15a>
  40740c:	45a4      	cmp	ip, r4
  40740e:	f200 80b8 	bhi.w	407582 <__udivmoddi4+0x2ca>
  407412:	4618      	mov	r0, r3
  407414:	eba4 040c 	sub.w	r4, r4, ip
  407418:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40741c:	e79d      	b.n	40735a <__udivmoddi4+0xa2>
  40741e:	4631      	mov	r1, r6
  407420:	4630      	mov	r0, r6
  407422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407426:	f1ce 0420 	rsb	r4, lr, #32
  40742a:	fa05 f30e 	lsl.w	r3, r5, lr
  40742e:	fa07 f70e 	lsl.w	r7, r7, lr
  407432:	fa20 f804 	lsr.w	r8, r0, r4
  407436:	0c3a      	lsrs	r2, r7, #16
  407438:	fa25 f404 	lsr.w	r4, r5, r4
  40743c:	ea48 0803 	orr.w	r8, r8, r3
  407440:	fbb4 f1f2 	udiv	r1, r4, r2
  407444:	ea4f 4518 	mov.w	r5, r8, lsr #16
  407448:	fb02 4411 	mls	r4, r2, r1, r4
  40744c:	fa1f fc87 	uxth.w	ip, r7
  407450:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  407454:	fb01 f30c 	mul.w	r3, r1, ip
  407458:	42ab      	cmp	r3, r5
  40745a:	fa00 f40e 	lsl.w	r4, r0, lr
  40745e:	d909      	bls.n	407474 <__udivmoddi4+0x1bc>
  407460:	19ed      	adds	r5, r5, r7
  407462:	f101 30ff 	add.w	r0, r1, #4294967295
  407466:	f080 808a 	bcs.w	40757e <__udivmoddi4+0x2c6>
  40746a:	42ab      	cmp	r3, r5
  40746c:	f240 8087 	bls.w	40757e <__udivmoddi4+0x2c6>
  407470:	3902      	subs	r1, #2
  407472:	443d      	add	r5, r7
  407474:	1aeb      	subs	r3, r5, r3
  407476:	fa1f f588 	uxth.w	r5, r8
  40747a:	fbb3 f0f2 	udiv	r0, r3, r2
  40747e:	fb02 3310 	mls	r3, r2, r0, r3
  407482:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  407486:	fb00 f30c 	mul.w	r3, r0, ip
  40748a:	42ab      	cmp	r3, r5
  40748c:	d907      	bls.n	40749e <__udivmoddi4+0x1e6>
  40748e:	19ed      	adds	r5, r5, r7
  407490:	f100 38ff 	add.w	r8, r0, #4294967295
  407494:	d26f      	bcs.n	407576 <__udivmoddi4+0x2be>
  407496:	42ab      	cmp	r3, r5
  407498:	d96d      	bls.n	407576 <__udivmoddi4+0x2be>
  40749a:	3802      	subs	r0, #2
  40749c:	443d      	add	r5, r7
  40749e:	1aeb      	subs	r3, r5, r3
  4074a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4074a4:	e78f      	b.n	4073c6 <__udivmoddi4+0x10e>
  4074a6:	f1c1 0720 	rsb	r7, r1, #32
  4074aa:	fa22 f807 	lsr.w	r8, r2, r7
  4074ae:	408b      	lsls	r3, r1
  4074b0:	fa05 f401 	lsl.w	r4, r5, r1
  4074b4:	ea48 0303 	orr.w	r3, r8, r3
  4074b8:	fa20 fe07 	lsr.w	lr, r0, r7
  4074bc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4074c0:	40fd      	lsrs	r5, r7
  4074c2:	ea4e 0e04 	orr.w	lr, lr, r4
  4074c6:	fbb5 f9fc 	udiv	r9, r5, ip
  4074ca:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4074ce:	fb0c 5519 	mls	r5, ip, r9, r5
  4074d2:	fa1f f883 	uxth.w	r8, r3
  4074d6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4074da:	fb09 f408 	mul.w	r4, r9, r8
  4074de:	42ac      	cmp	r4, r5
  4074e0:	fa02 f201 	lsl.w	r2, r2, r1
  4074e4:	fa00 fa01 	lsl.w	sl, r0, r1
  4074e8:	d908      	bls.n	4074fc <__udivmoddi4+0x244>
  4074ea:	18ed      	adds	r5, r5, r3
  4074ec:	f109 30ff 	add.w	r0, r9, #4294967295
  4074f0:	d243      	bcs.n	40757a <__udivmoddi4+0x2c2>
  4074f2:	42ac      	cmp	r4, r5
  4074f4:	d941      	bls.n	40757a <__udivmoddi4+0x2c2>
  4074f6:	f1a9 0902 	sub.w	r9, r9, #2
  4074fa:	441d      	add	r5, r3
  4074fc:	1b2d      	subs	r5, r5, r4
  4074fe:	fa1f fe8e 	uxth.w	lr, lr
  407502:	fbb5 f0fc 	udiv	r0, r5, ip
  407506:	fb0c 5510 	mls	r5, ip, r0, r5
  40750a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40750e:	fb00 f808 	mul.w	r8, r0, r8
  407512:	45a0      	cmp	r8, r4
  407514:	d907      	bls.n	407526 <__udivmoddi4+0x26e>
  407516:	18e4      	adds	r4, r4, r3
  407518:	f100 35ff 	add.w	r5, r0, #4294967295
  40751c:	d229      	bcs.n	407572 <__udivmoddi4+0x2ba>
  40751e:	45a0      	cmp	r8, r4
  407520:	d927      	bls.n	407572 <__udivmoddi4+0x2ba>
  407522:	3802      	subs	r0, #2
  407524:	441c      	add	r4, r3
  407526:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40752a:	eba4 0408 	sub.w	r4, r4, r8
  40752e:	fba0 8902 	umull	r8, r9, r0, r2
  407532:	454c      	cmp	r4, r9
  407534:	46c6      	mov	lr, r8
  407536:	464d      	mov	r5, r9
  407538:	d315      	bcc.n	407566 <__udivmoddi4+0x2ae>
  40753a:	d012      	beq.n	407562 <__udivmoddi4+0x2aa>
  40753c:	b156      	cbz	r6, 407554 <__udivmoddi4+0x29c>
  40753e:	ebba 030e 	subs.w	r3, sl, lr
  407542:	eb64 0405 	sbc.w	r4, r4, r5
  407546:	fa04 f707 	lsl.w	r7, r4, r7
  40754a:	40cb      	lsrs	r3, r1
  40754c:	431f      	orrs	r7, r3
  40754e:	40cc      	lsrs	r4, r1
  407550:	6037      	str	r7, [r6, #0]
  407552:	6074      	str	r4, [r6, #4]
  407554:	2100      	movs	r1, #0
  407556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40755a:	4618      	mov	r0, r3
  40755c:	e6f8      	b.n	407350 <__udivmoddi4+0x98>
  40755e:	4690      	mov	r8, r2
  407560:	e6e0      	b.n	407324 <__udivmoddi4+0x6c>
  407562:	45c2      	cmp	sl, r8
  407564:	d2ea      	bcs.n	40753c <__udivmoddi4+0x284>
  407566:	ebb8 0e02 	subs.w	lr, r8, r2
  40756a:	eb69 0503 	sbc.w	r5, r9, r3
  40756e:	3801      	subs	r0, #1
  407570:	e7e4      	b.n	40753c <__udivmoddi4+0x284>
  407572:	4628      	mov	r0, r5
  407574:	e7d7      	b.n	407526 <__udivmoddi4+0x26e>
  407576:	4640      	mov	r0, r8
  407578:	e791      	b.n	40749e <__udivmoddi4+0x1e6>
  40757a:	4681      	mov	r9, r0
  40757c:	e7be      	b.n	4074fc <__udivmoddi4+0x244>
  40757e:	4601      	mov	r1, r0
  407580:	e778      	b.n	407474 <__udivmoddi4+0x1bc>
  407582:	3802      	subs	r0, #2
  407584:	443c      	add	r4, r7
  407586:	e745      	b.n	407414 <__udivmoddi4+0x15c>
  407588:	4608      	mov	r0, r1
  40758a:	e708      	b.n	40739e <__udivmoddi4+0xe6>
  40758c:	f1a8 0802 	sub.w	r8, r8, #2
  407590:	443d      	add	r5, r7
  407592:	e72b      	b.n	4073ec <__udivmoddi4+0x134>

00407594 <__aeabi_idiv0>:
  407594:	4770      	bx	lr
  407596:	bf00      	nop
  407598:	0a05000d 	.word	0x0a05000d
  40759c:	0000004b 	.word	0x0000004b
  4075a0:	00001932 	.word	0x00001932
  4075a4:	0e00008b 	.word	0x0e00008b
  4075a8:	32800008 	.word	0x32800008
  4075ac:	030a0205 	.word	0x030a0205
  4075b0:	0f022003 	.word	0x0f022003
  4075b4:	00000a0f 	.word	0x00000a0f
  4075b8:	18180000 	.word	0x18180000
  4075bc:	00002020 	.word	0x00002020
  4075c0:	0a000000 	.word	0x0a000000
  4075c4:	02020000 	.word	0x02020000
  4075c8:	18180000 	.word	0x18180000
  4075cc:	00030000 	.word	0x00030000
  4075d0:	00000000 	.word	0x00000000
  4075d4:	18010002 	.word	0x18010002
  4075d8:	1e1e1e1e 	.word	0x1e1e1e1e
  4075dc:	1e1e1e1e 	.word	0x1e1e1e1e
  4075e0:	1e1e1e1e 	.word	0x1e1e1e1e
  4075e4:	00001e1e 	.word	0x00001e1e
	...
  4075f8:	454c4449 	.word	0x454c4449
  4075fc:	00000000 	.word	0x00000000
  407600:	51726d54 	.word	0x51726d54
  407604:	00000000 	.word	0x00000000
  407608:	20726d54 	.word	0x20726d54
  40760c:	00637653 	.word	0x00637653
  407610:	0074786d 	.word	0x0074786d
  407614:	6c696146 	.word	0x6c696146
  407618:	74206465 	.word	0x74206465
  40761c:	7263206f 	.word	0x7263206f
  407620:	65746165 	.word	0x65746165
  407624:	73657420 	.word	0x73657420
  407628:	656c2074 	.word	0x656c2074
  40762c:	61742064 	.word	0x61742064
  407630:	0a0d6b73 	.word	0x0a0d6b73
  407634:	00000000 	.word	0x00000000
  407638:	0064636c 	.word	0x0064636c
  40763c:	00636461 	.word	0x00636461
  407640:	6c696146 	.word	0x6c696146
  407644:	74206465 	.word	0x74206465
  407648:	7263206f 	.word	0x7263206f
  40764c:	65746165 	.word	0x65746165
  407650:	73657420 	.word	0x73657420
  407654:	64612074 	.word	0x64612074
  407658:	61742063 	.word	0x61742063
  40765c:	0a0d6b73 	.word	0x0a0d6b73
  407660:	00000000 	.word	0x00000000
  407664:	686c6166 	.word	0x686c6166
  407668:	6d652061 	.word	0x6d652061
  40766c:	69726320 	.word	0x69726320
  407670:	6f207261 	.word	0x6f207261
  407674:	6d657320 	.word	0x6d657320
  407678:	726f6661 	.word	0x726f6661
  40767c:	000a206f 	.word	0x000a206f
  407680:	000a6425 	.word	0x000a6425
  407684:	63756f54 	.word	0x63756f54
  407688:	6d652068 	.word	0x6d652068
  40768c:	3a78203a 	.word	0x3a78203a
  407690:	79206425 	.word	0x79206425
  407694:	0a64253a 	.word	0x0a64253a
  407698:	00000000 	.word	0x00000000
  40769c:	63617473 	.word	0x63617473
  4076a0:	766f206b 	.word	0x766f206b
  4076a4:	6c667265 	.word	0x6c667265
  4076a8:	2520776f 	.word	0x2520776f
  4076ac:	73252078 	.word	0x73252078
  4076b0:	00000a0d 	.word	0x00000a0d

004076b4 <_global_impure_ptr>:
  4076b4:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  4076c4:	46454443 00000000 33323130 37363534     CDEF....01234567
  4076d4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4076e4:	0000296c                                l)..

004076e8 <blanks.7217>:
  4076e8:	20202020 20202020 20202020 20202020                     

004076f8 <zeroes.7218>:
  4076f8:	30303030 30303030 30303030 30303030     0000000000000000
  407708:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00407718 <_ctype_>:
  407718:	20202000 20202020 28282020 20282828     .         ((((( 
  407728:	20202020 20202020 20202020 20202020                     
  407738:	10108820 10101010 10101010 10101010      ...............
  407748:	04040410 04040404 10040404 10101010     ................
  407758:	41411010 41414141 01010101 01010101     ..AAAAAA........
  407768:	01010101 01010101 01010101 10101010     ................
  407778:	42421010 42424242 02020202 02020202     ..BBBBBB........
  407788:	02020202 02020202 02020202 10101010     ................
  407798:	00000020 00000000 00000000 00000000      ...............
	...

0040781c <_init>:
  40781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40781e:	bf00      	nop
  407820:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407822:	bc08      	pop	{r3}
  407824:	469e      	mov	lr, r3
  407826:	4770      	bx	lr

00407828 <__init_array_start>:
  407828:	00405ef9 	.word	0x00405ef9

0040782c <__frame_dummy_init_array_entry>:
  40782c:	0040018d                                ..@.

00407830 <_fini>:
  407830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407832:	bf00      	nop
  407834:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407836:	bc08      	pop	{r3}
  407838:	469e      	mov	lr, r3
  40783a:	4770      	bx	lr

0040783c <__fini_array_start>:
  40783c:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <uxCriticalNesting>:
20400010:	aaaa aaaa                                   ....

20400014 <_impure_ptr>:
20400014:	0018 2040                                   ..@ 

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__malloc_av_>:
	...
20400448:	0440 2040 0440 2040 0448 2040 0448 2040     @.@ @.@ H.@ H.@ 
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 

20400848 <__malloc_sbrk_base>:
20400848:	ffff ffff                                   ....

2040084c <__malloc_trim_threshold>:
2040084c:	0000 0002                                   ....

20400850 <__atexit_recursive_mutex>:
20400850:	c884 2040                                   ..@ 

20400854 <__global_locale>:
20400854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	6ff1 0040 6981 0040 0000 0000 7718 0040     .o@..i@......w@.
20400944:	7714 0040 7660 0040 7660 0040 7660 0040     .w@.`v@.`v@.`v@.
20400954:	7660 0040 7660 0040 7660 0040 7660 0040     `v@.`v@.`v@.`v@.
20400964:	7660 0040 7660 0040 ffff ffff ffff ffff     `v@.`v@.........
20400974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
